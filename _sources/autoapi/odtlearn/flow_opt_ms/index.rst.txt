:py:mod:`odtlearn.flow_opt_ms`
==============================

.. py:module:: odtlearn.flow_opt_ms


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   odtlearn.flow_opt_ms.FlowOPTMultipleSink




.. py:class:: FlowOPTMultipleSink(solver: str, depth: int, time_limit: int, num_threads: None, verbose: bool)


   Bases: :py:obj:`odtlearn.opt_pt.OptimalPrescriptiveTree`

   
    A base class for learning optimal prescriptive trees with multiple sink nodes using flow optimization.


   :Parameters:

       **solver** : str
           The solver to use for the optimization problem. Can be either "gurobi" or "cbc".

       **depth** : int, default=1
           The maximum depth of the tree to be learned.

       **time_limit** : int, default=60
           The time limit (in seconds) for solving the optimization problem.

       **num_threads** : int, default=None
           The number of threads the solver should use. If not specified,
           the solver uses all available threads.

       **verbose** : bool, default=False
           Whether to print verbose output during the tree learning process.









   .. rubric:: Notes

   This is a base class for learning optimal prescriptive trees with multiple sink nodes using
   flow optimization. It extends the :mod:`OptimalPrescriptiveTree <odtlearn.opt_pt.OptimalPrescriptiveTree>` class
   and provides the basic
   structure and common functionality for flow-based prescriptive tree learning. It should not
   be instantiated directly. Instead, use one of the
   derived classes that implement a specific prescriptive tree method, such as
   :mod:`FlowOPT_DM <odtlearn.flow_opt.FlowOPT_DM>` or
   :mod:`FlowOPT_DR <odtlearn.flow_opt.FlowOPT_DR>`.

   The key idea is to model the flow of each datapoint through the tree, allowing it to reach
   multiple sink nodes (i.e., leaves) with different treatment recommendations. The objective
   is to optimize the treatment recommendations based on the characteristics of each datapoint.

   The class defines decision variables and constraints specific to the flow optimization
   formulation with multiple sink nodes.
   The :meth:`_define_variables <odtlearn.flow_opt_ms.FlowOPTMultipleSink._define_variables>` method defines
   the decision
   variables, including the tree structure variables (`_b`, `_p`, `_w`) and the flow variables
   (`_zeta`, `_z`).

   The :meth:`_define_constraints <odtlearn.flow_opt_ms.FlowOPTMultipleSink._define_constraints>` method defines
   the constraints,
   including the tree structure
   constraints, flow constraints, and arc constraints. These constraints ensure the validity
   of the tree structure and the proper flow of datapoints through the tree to multiple sink nodes.

   Subclasses of `FlowOPTMultipleSink` should implement the
   :meth:`_define_objective <odtlearn.flow_opt_ms.FlowOPTMultipleSink._define_objective>` method to specify
   the objective function for the optimization problem,
   and the :meth:`fit <odtlearn.flow_opt_ms.FlowOPTMultipleSink.fit>` method
   to handle the model
   fitting process.

   The class inherits the :meth:`predict <odtlearn.opt_pt.OptimalPrescriptiveTree.predict>` method from the
   :mod:`OptimalPrescriptiveTree <odtlearn.opt_pt.OptimalPrescriptiveTree>` class to make
   treatment recommendations based on the learned tree.



   :Attributes:

       **_b** : dict
           A dictionary of binary decision variables representing the branching decisions at each node.

       **_p** : dict
           A dictionary of binary decision variables representing the prediction decisions at each node.

       **_w** : dict
           A dictionary of continuous decision variables representing the treatment weights at each node.

       **_zeta** : dict
           A dictionary of continuous decision variables representing the flow of each datapoint
           to each treatment at each node.

       **_z** : dict
           A dictionary of continuous decision variables representing the flow of each datapoint to each node.

   .. rubric:: Methods



   ===========================  ==========
   **_tree_struc_variables()**  Defines the decision variables related to the tree structure. _flow_variables() Defines the decision variables related to the flow of datapoints. _define_variables() Defines all the decision variables used in the optimization problem. _tree_structure_constraints() Defines the constraints related to the tree structure. _flow_constraints() Defines the constraints related to the flow of datapoints. _arc_constraints() Defines the constraints related to the arcs between nodes. _define_constraints() Defines all the constraints used in the optimization problem. _define_objective() Abstract method to be implemented by subclasses to define the objective function. fit(X, t, y, **kwargs) Abstract method to be implemented by subclasses to fit the optimal prescriptive tree.  
                **predict(X)**  Make treatment recommendations for the given input samples.  
   ===========================  ==========

   ..
       !! processed by numpydoc !!

