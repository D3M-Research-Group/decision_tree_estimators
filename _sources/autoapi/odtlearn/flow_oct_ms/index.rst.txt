:py:mod:`odtlearn.flow_oct_ms`
==============================

.. py:module:: odtlearn.flow_oct_ms


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   odtlearn.flow_oct_ms.FlowOCTMultipleSink




.. py:class:: FlowOCTMultipleSink(solver: str, _lambda: float, depth: int, time_limit: int, num_threads: None, verbose: bool)


   Bases: :py:obj:`odtlearn.opt_ct.OptimalClassificationTree`

   
   A base class for learning optimal classification trees using flow-based formulation with multiple sink nodes.


   :Parameters:

       **solver** : str
           The solver to use for the MIP formulation. Currently, only "gurobi" and "CBC" are supported.

       **_lambda** : float
           The regularization parameter for controlling the complexity of the learned tree.

       **depth** : int
           The maximum depth of the tree to be learned.

       **time_limit** : int
           The time limit (in seconds) for solving the MIP formulation.

       **num_threads** : int, optional
           The number of threads the solver should use. If not specified,
           solver uses all available threads

       **verbose** : bool, default=False
           Whether to print verbose output during the tree learning process.









   .. rubric:: Notes

   This class extends the :mod:`OptimalClassificationTree <odtlearn.opt_dt.OptimalClassificationTree>` class
   and provides the basic structure and
   common functionality for flow-based optimal classification tree learning with multiple sink nodes.

   The key idea behind the flow-based formulation with multiple sink nodes is to model the flow of
   each datapoint through the tree, allowing it to reach multiple sink nodes (i.e., leaves) with
   different class predictions. The objective is to optimize the class predictions based on the
   characteristics of each datapoint.

   The class defines decision variables and constraints specific to the flow-based formulation
   with multiple sink nodes. The
   :meth:`_define_variables <odtlearn.flow_oct_ms.FlowOCTMultipleSink._define_variables>` method
   defines the decision variables,
   including the tree structure variables (`_b`, `_p`, `_w`) and the flow variables (`_zeta`, `_z`).

   The :meth:`_define_constraints <odtlearn.flow_oct_ms.FlowOCTMultipleSink._define_constraints>`
   method defines the constraints, including the tree structure
   constraints, flow constraints, and arc constraints. These constraints ensure the validity
   of the tree structure and the proper flow of datapoints through the tree to multiple sink nodes.

   Users should not instantiate this class directly, but instead use one of its derived classes
   such as :mod:`FlowOCT <odtlearn.flow_oct.FlowOCT>` for learning optimal classification trees.



   :Attributes:

       **_b** : dict
           A dictionary of binary decision variables representing the branching decisions at each node.

       **_p** : dict
           A dictionary of binary decision variables representing the prediction decisions at each node.

       **_w** : dict
           A dictionary of continuous decision variables representing the prediction weights at each node.

       **_zeta** : dict
           A dictionary of binary decision variables representing the flow of each datapoint to each label at each node.

       **_z** : dict
           A dictionary of binary decision variables representing the flow of each datapoint to each node.

   .. rubric:: Methods



   =================================  ==========
         **_tree_struc_variables()**  Defines the decision variables related to the tree structure.  
               **_flow_variables()**  Defines the decision variables related to the flow of datapoints.  
             **_define_variables()**  Defines all the decision variables used in the optimization problem.  
   **_tree_structure_constraints()**  Defines the constraints related to the tree structure.  
             **_flow_constraints()**  Defines the constraints related to the flow of datapoints.  
              **_arc_constraints()**  Defines the constraints related to the arcs between nodes.  
           **_define_constraints()**  Defines all the constraints used in the optimization problem.  
   =================================  ==========

   ..
       !! processed by numpydoc !!

