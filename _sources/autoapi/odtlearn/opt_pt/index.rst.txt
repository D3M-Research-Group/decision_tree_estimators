:py:mod:`odtlearn.opt_pt`
=========================

.. py:module:: odtlearn.opt_pt


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   odtlearn.opt_pt.OptimalPrescriptiveTree




.. py:class:: OptimalPrescriptiveTree(solver, depth, time_limit, num_threads, verbose)


   Bases: :py:obj:`odtlearn.opt_dt.OptimalDecisionTree`

   
   A class for learning optimal prescriptive trees using mixed-integer programming.


   :Parameters:

       **solver** : str
           The solver to use for the MIP formulation. Can be either
           "gurobi" or "cbc".

       **depth** : int
           The maximum depth of the tree to be learned.

       **time_limit** : int, default=300
           The time limit (in seconds) for solving the MIP formulation.

       **num_threads** : int, default=1
           The number of threads the solver should use.

       **verbose** : bool, default=False
           Whether to print verbose output during the tree learning process.









   .. rubric:: Notes

   This class extends the `OptimalDecisionTree` base class to learn optimal prescriptive
   trees for making treatment recommendations. It formulates the problem as a mixed-integer
   program and solves it using either the Gurobi or CBC solver.



   :Attributes:

       **_X** : pandas.DataFrame
           The input features used to fit the prescriptive tree.

       **_X_col_labels** : numpy.ndarray
           The labels of the columns in the input data X.

       **_X_col_dtypes** : pandas.Series
           The data types of the columns in the input data X.

       **_y** : numpy.ndarray
           The target values used to fit the prescriptive tree.

       **_t** : numpy.ndarray
           The treatment values used to fit the prescriptive tree.

       **_labels** : numpy.ndarray
           The unique target values in y.

       **_treatments** : numpy.ndarray
           The unique treatment values in t.

       **_datapoints** : numpy.ndarray
           The indices of the datapoints used to fit the tree.

       **b_value** : numpy.ndarray
           The values of the branching decision variables in the learned tree.

       **w_value** : numpy.ndarray
           The values of the prediction decision variables in the learned tree.

       **p_value** : numpy.ndarray
           The values of the pruning decision variables in the learned tree.

   .. rubric:: Methods



   =======================  ==========
          **fit(X, y, t)**  Fit the optimal prescriptive tree to the given training data.  
            **predict(X)**  Make treatment recommendations using the fitted optimal prescriptive tree.  
          **print_tree()**  Print the structure of the fitted optimal prescriptive tree.  
   **plot_tree(**kwargs)**  Plot the fitted optimal prescriptive tree using matplotlib.  
   =======================  ==========

   ..
       !! processed by numpydoc !!
   .. py:method:: print_tree()

      
      Print the fitted tree with the branching features, the threshold values for
      each branching node's test, and the predictions asserted for each assignment node

      The method uses the Gurobi model's name for determining how to generate the tree















      ..
          !! processed by numpydoc !!

   .. py:method:: plot_tree(label='all', filled=True, rounded=False, precision=3, ax=None, fontsize=None, color_dict={'node': None, 'leaves': []}, edge_annotation=True, arrow_annotation_font_scale=0.8, debug=False, distance=1.0, feature_names=None)

      
      Plot the fitted tree with the branching features, the threshold values for
      each branching node's test, and the predictions asserted for each assignment node
      using matplotlib. The method uses the Gurobi model's name for determining how
      to generate the tree. It does some preprocessing before passing the tree to the
      `_MPLTreeExporter` class from the sklearn package. The arguments for the
      `plot_tree` method are based on the arguments of the sklearn `plot_tree` function.


      :Parameters:

          **label** : {'all', 'root', 'none'}, default='all'
              ..

          **Whether to show informative labels for impurity, etc.**
              ..

          **Options include 'all' to show at every node, 'root' to show only at**
              ..

          **the top root node, or 'none' to not show at any node.**
              ..

          **filled** : bool, default=False
              When set to ``True``, paint nodes to indicate majority class for
              classification, extremity of values for regression, or purity of node
              for multi-output.

          **rounded** : bool, default=False
              When set to ``True``, draw node boxes with rounded corners and use
              Helvetica fonts instead of Times-Roman.

          **precision: int, default=3**
              Number of digits of precision for floating point in the values of
              impurity, threshold and value attributes of each node.

          **ax** : matplotlib axis, default=None
              Axes to plot to. If None, use current axis. Any previous content

          **is cleared.**
              ..

          **fontsize** : int, default=None
              Size of text font. If None, determined automatically to fit figure.

          **color_dict: dict, default={"node": None, "leaves": []}**
              A dictionary specifying the colors for nodes and leaves in the plot in #RRGGBB format.
              If None, the colors are chosen using the sklearn `plot_tree` color palette

          **feature_names** : list of str, default=None
              A list of feature names to use for the plot. If None, the feature names from the
              fitted tree will be used. The feature names should be in the same order as the
              columns of the data used to fit the tree.














      ..
          !! processed by numpydoc !!


