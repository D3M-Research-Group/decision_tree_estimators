odtlearn.opt_pt
===============

.. py:module:: odtlearn.opt_pt


Classes
-------

.. autoapisummary::

   odtlearn.opt_pt.OptimalPrescriptiveTree


Module Contents
---------------

.. py:class:: OptimalPrescriptiveTree(solver: str, depth: int, time_limit: int, num_threads: None, verbose: bool)

   Bases: :py:obj:`odtlearn.opt_dt.OptimalDecisionTree`


   
   A class for learning optimal prescriptive trees using mixed-integer programming.


   :Parameters:

       **solver** : str
           The solver to use for the MIP formulation. Can be either
           "gurobi" or "cbc".

       **depth** : int
           The maximum depth of the tree to be learned.

       **time_limit** : int, default=300
           The time limit (in seconds) for solving the MIP formulation.

       **num_threads** : int, default=1
           The number of threads the solver should use.

       **verbose** : bool, default=False
           Whether to print verbose output during the tree learning process.









   .. rubric:: Notes

   This class extends the `OptimalDecisionTree` base class to learn optimal prescriptive
   trees for making treatment recommendations. It formulates the problem as a mixed-integer
   program and solves it using either the Gurobi or CBC solver.



   :Attributes:

       **_X** : pandas.DataFrame
           The input features used to fit the prescriptive tree.

       **_X_col_labels** : numpy.ndarray
           The labels of the columns in the input data X.

       **_X_col_dtypes** : pandas.Series
           The data types of the columns in the input data X.

       **_y** : numpy.ndarray
           The target values used to fit the prescriptive tree.

       **_t** : numpy.ndarray
           The treatment values used to fit the prescriptive tree.

       **_labels** : numpy.ndarray
           The unique target values in y.

       **_treatments** : numpy.ndarray
           The unique treatment values in t.

       **_datapoints** : numpy.ndarray
           The indices of the datapoints used to fit the tree.

       **b_value** : numpy.ndarray
           The values of the branching decision variables in the learned tree.

       **w_value** : numpy.ndarray
           The values of the prediction decision variables in the learned tree.

       **p_value** : numpy.ndarray
           The values of the pruning decision variables in the learned tree.

   .. rubric:: Methods



   =======================  ==========
          **fit(X, y, t)**  Fit the optimal prescriptive tree to the given training data.  
            **predict(X)**  Make treatment recommendations using the fitted optimal prescriptive tree.  
          **print_tree()**  Print the structure of the fitted optimal prescriptive tree.  
   **plot_tree(**kwargs)**  Plot the fitted optimal prescriptive tree using matplotlib.  
   =======================  ==========

   ..
       !! processed by numpydoc !!

   .. py:method:: print_tree()

      
      Print a text representation of the fitted prescriptive tree.

      This method prints the structure of the fitted tree, including the branching features,
      the threshold values for each branching node's test, and the treatment recommendations for each leaf node.






      :Raises:

          NotFittedError
              If the model has not been fitted yet.




      .. rubric:: Notes

      The tree is printed in a depth-first manner, with each node represented by its index,
      branching feature and threshold (for internal nodes), or treatment recommendation (for leaf nodes).





      ..
          !! processed by numpydoc !!


   .. py:method:: plot_tree(label='all', filled=True, rounded=False, precision=3, ax=None, fontsize=None, color_dict={'node': None, 'leaves': []}, edge_annotation=True, arrow_annotation_font_scale=0.8, debug=False, distance=1.0, feature_names=None)

      
      Plot the fitted prescriptive tree using matplotlib.


      :Parameters:

          **label** : {'all', 'root', 'none'}, default='all'
              Whether to show informative labels for impurity, etc.
              Options include 'all' to show at every node, 'root' to show only at
              the top root node, or 'none' to not show at any node.

          **filled** : bool, default=True
              When set to True, paint nodes to indicate majority treatment for
              prescriptive trees.

          **rounded** : bool, default=False
              When set to True, draw node boxes with rounded corners and use
              Helvetica fonts instead of Times-Roman.

          **precision** : int, default=3
              Number of digits of precision for floating point in the values of
              impurity, threshold and value attributes of each node.

          **ax** : matplotlib axis, default=None
              Axes to plot to. If None, use current axis. Any previous content is cleared.

          **fontsize** : int, default=None
              Size of text font. If None, determined automatically to fit figure.

          **color_dict** : dict, optional
              A dictionary specifying the colors for nodes and leaves.
              Default: {"node": None, "leaves": []}

          **edge_annotation** : bool, optional (default=True)
              Whether to display annotations on the edges.

          **arrow_annotation_font_scale** : float, optional (default=0.5)
              The font scale for the arrow annotations.

          **debug** : bool, optional (default=False)
              Whether to print debug information.

          **distance: float, default=1.0**
              Adjust distance between levels in the tree.

          **feature_names** : list of str, default=None
              A list of feature names to use for the plot. If None, the feature names from the
              fitted tree will be used. The feature names should be in the same order as the
              columns of the data used to fit the tree.

      :Returns:

          **ax** : matplotlib.axes.Axes
              The matplotlib Axes containing the plot.




      :Raises:

          NotFittedError
              If the model has not been fitted yet.




      .. rubric:: Notes

      This method visualizes the fitted prescriptive tree structure using matplotlib.
      Each node in the tree is represented by a box, with arrows indicating the branching structure.
      Leaf nodes show the recommended treatment.





      ..
          !! processed by numpydoc !!


