:py:mod:`odtlearn.opt_dt`
=========================

.. py:module:: odtlearn.opt_dt


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   odtlearn.opt_dt.OptimalDecisionTree




.. py:class:: OptimalDecisionTree(solver: str, depth: int = 1, time_limit: int = 60, num_threads: Union[None, int] = None, verbose: bool = False)


   Bases: :py:obj:`abc.ABC`

   
   An abstract base class for learning optimal decision trees using mixed-integer programming.


   :Parameters:

       **solver** : str
           The solver to use for the MIP formulation. Currently, only "gurobi" and "CBC" are supported.

       **depth** : int, default=1
           The maximum depth of the tree to be learned.

       **time_limit** : int, default=60
           The time limit (in seconds) for solving the MIP formulation.

       **num_threads** : int, optional
           The number of threads the solver should use. If not specified,
           solver uses all available threads

       **verbose** : bool, default=False
           Whether to print verbose output from the solver.









   .. rubric:: Notes

   This is an abstract base class and cannot be instantiated directly.
   Subclasses must implement the following abstract methods:

   * `_define_variables()`
   * `_define_constraints()`
   * `_define_objective()`
   * `fit()`
   * `predict()`



   :Attributes:

       **solver_name** : str
           The name of the solver being used.

       **optim_gap** : float
           The optimality gap considering the cost of the best solution found.

       **objective_value** : float
           The objective function value of the solution found or None if the model was not optimized.

       **objective_bound** : float
           A valid estimate computed for the optimal solution cost. The bound is equal to the objective
           value if the optimal solution is found.

       **num_decision_vars** : int
           The number of decision variables in the model.

       **num_integer_vars** : int
           The number of integer variables in the model.

       **num_non_zero** : int
           The number of non-zeros in the constraint matrix.

       **num_solutions** : int
           The number of solutions found during the optimization.

       **num_constraints** : int
           The number of constraints in the model.

       **search_progress_log** : mip.ProgressLog
           The log of bound improvements during the optimization.

       **store_search_progress_log** : bool
           Whether the search progress log should be stored or not.

   .. rubric:: Methods



   ==============  ==========
    **fit(X, y)**  Fit the optimal decision tree to the given training data.  
   **predict(X)**  Make predictions using the fitted optimal decision tree.  
   ==============  ==========

   ..
       !! processed by numpydoc !!
   .. py:property:: optim_gap
      :type: float

      
      The optimality gap considering the cost of the best solution found.
















      ..
          !! processed by numpydoc !!

   .. py:property:: objective_value
      :type: float

      
      Objective function value of the solution found or None if the model was not optimized.
















      ..
          !! processed by numpydoc !!

   .. py:property:: objective_bound
      :type: float

      
      A valid estimate computed for the optimal solution cost.
      The bound is equal to the objective value if the optimal solution is found.
















      ..
          !! processed by numpydoc !!

   .. py:property:: num_decision_vars
      :type: int

      
      Number of decision variables in the model.
















      ..
          !! processed by numpydoc !!

   .. py:property:: num_integer_vars
      :type: int

      
      Number of integer variables in the model.
















      ..
          !! processed by numpydoc !!

   .. py:property:: num_non_zero
      :type: int

      
      Number of non-zeros in the constraint matrix.
















      ..
          !! processed by numpydoc !!

   .. py:property:: num_solutions
      :type: int

      
      Number of solutions found during the optimization.
















      ..
          !! processed by numpydoc !!

   .. py:property:: num_constraints
      :type: int

      
      Number of constraints in the model.
















      ..
          !! processed by numpydoc !!

   .. py:property:: search_progress_log
      :type: mip.ProgressLog

      
      Log of bound improvements during the optimization.
















      ..
          !! processed by numpydoc !!

   .. py:property:: store_search_progress_log
      :type: bool

      
      Boolean for whether the search progress log should be stored or not.
      As in python-mip this is disabled by default.
      Enable storing the search progress log to analyze bound improvements over time.
















      ..
          !! processed by numpydoc !!

   .. py:method:: fit()
      :abstractmethod:


   .. py:method:: predict()
      :abstractmethod:


   .. py:method:: plot_search_progress(ax=None, title='Search Progress', xlabel='Time (s)', ylabel='Objective Bound', lw=2, alpha=0.8, legend_loc='best', legend_fontsize=None, grid=True, color_ub='b', color_lb='r', log_scale=False) -> matplotlib.axes.Axes

      
      Plots the search progress log showing the lower and upper objective bounds over time.


      :Parameters:

          **ax** : matplotlib axis, default=None
              Axes to plot to. If None, use current axis. Any previous content is cleared.

          **title** : str, optional, default: 'Search Progress'
              The title of the plot.

          **xlabel** : str, optional, default: 'Time (s)'
              The label for the x-axis.

          **ylabel** : str, optional, default: 'Objective Bound'
              The label for the y-axis.

          **lw** : float, optional, default: 2
              The line width of the bound lines.

          **alpha** : float, optional, default: 0.8
              The alpha blending value between 0 (transparent) and 1 (opaque).

          **legend_loc** : str, optional, default: 'best'
              The location of the legend.

          **legend_fontsize** : int or str, optional
              The font size for the legend labels.

          **grid** : bool, optional, default: True
              Whether to show the grid lines.

          **color_ub** : color str or tuple of floats, optional, default: 'b'
              The color to use for the upper bound line.

          **color_lb** : color str or tuple of floats, optional, default: 'r'
              The color to use for the lower bound line.

          **log_scale** : bool, optional, default: False
              Whether to use a log scale for the y-axis.





      :Raises:

          NotFittedError
              If the model has not been fitted yet.

          AttributeError
              If the search progress log was not recorded during fitting.




      .. rubric:: Notes

      The search progress log must be enabled prior to fitting by setting
      `store_search_progress_log` to True.





      ..
          !! processed by numpydoc !!


