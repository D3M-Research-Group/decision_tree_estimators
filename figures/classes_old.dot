digraph "classes" {
rankdir=BT
charset="utf-8";ranksep=0.3;
"abc.ABC" [color="grey", fontcolor="black", label="{Abstract Base Class}", shape="record", style="filled", fontsize="25"];
"odtlearn.BendersOCT.BendersOCT" [fillcolor="aliceblue", fontcolor="black", label="{BendersOCT|X_predict_col_names\l_lambda : int\lb\lb_value\lclasses_ : ndarray\lg : int\lobj_mode : str\lp\lp_value\lw\lw_value\l|_define_constraints()\l_define_objective()\l_define_variables()\lfit(X, y)\lpredict(X)\l}", shape="record", style="filled", fontsize="25"];
"odtlearn.classification_formulation.ClassificationProblem" [fillcolor="aliceblue", fontcolor="black", label="{ClassificationProblem|X : DataFrame\lX_col_dtypes\lX_col_labels : ndarray\ldatapoints\llabels\ly\l|_extract_metadata(X, y)\l_get_node_status(b, w, p, n)\l_make_prediction(X)\lplot_tree(...)\lprint_tree()\l}", shape="record", style="filled", fontsize="25"];
"odtlearn.FairOCT.FairOCT" [fillcolor="aliceblue", fontcolor="black", label="{FairOCT|P\lP_col_labels : ndarray\lX_p : DataFrame, ndarray\lX_predict_col_names : ndarray\lb_value\lclass_name : str\lclasses_ : ndarray\lfairness_bound : int\lfairness_type : NoneType\llegit_factor\llegitimate_name : str\lmodel_name : str\lobj_mode : str\lp_value\lpositive_class\lprotect_feat_col_dtypes\lprotect_feat_col_labels : ndarray\lprotect_feat_test_col_names : ndarray\lw_value\l|_define_constraints()\l_define_objective()\l_extract_metadata(X, y, protect_feat)\ladd_fairness_constraint(p_df, p_prime_df)\lfairness_metric_summary(metric, new_data)\lfit(X, y, protect_feat, legit_factor)\lget_CSP(protect_feat, legit_factor, y)\lget_CondEqOdds(protect_feat, legit_factor, y, y_pred)\lget_EqOdds(protect_feat, y, y_pred)\lget_SP(protect_feat, y)\lpredict(X)\l}", shape="record", style="filled", fontsize="25"];
"odtlearn.FlowOCT.FlowOCT" [fillcolor="aliceblue", fontcolor="black", label="{FlowOCT|X_predict_col_names\lb_value\lclasses_ : ndarray\lmodel_name : str\lobj_mode : str\lp_value\lw_value\l|_define_objective()\lfit(X, y)\lpredict(X)\l}", shape="record", style="filled", fontsize="25"];
"odtlearn.FlowOCTMultipleNode.FlowOCTMultipleNode" [fillcolor="aliceblue", fontcolor="black", label="{FlowOCTMultipleNode|_lambda\lb\lp\lw\lz\lzeta\l|_define_constraints()\l_define_variables()\l}", shape="record", style="filled", fontsize="25"];
"odtlearn.FlowOCTSingleNode.FlowOCTSingleNode" [fillcolor="aliceblue", fontcolor="black", label="{FlowOCTSingleNode|_lambda\lb\lp\lw\lz\lzeta\l|_define_constraints()\l_define_variables()\l}", shape="record", style="filled", fontsize="25"];
"odtlearn.FlowOPTMultipleNode.FlowOPTMultipleNode" [fillcolor="aliceblue", fontcolor="black", label="{FlowOPTMultipleNode|b\lp\lw\lz\lzeta\l|_define_constraints()\l_define_variables()\l}", shape="record", style="filled", fontsize="25"];
"odtlearn.FlowOPTSingleNode.FlowOPTSingleNode" [fillcolor="aliceblue", fontcolor="black", label="{FlowOPTSingleNode|b\lp\lw\lz\lzeta\l|_define_constraints()\l_define_objective()\l_define_variables()\l}", shape="record", style="filled", fontsize="25"];
"odtlearn.FlowOPT.FlowOPT_DM" [fillcolor="aliceblue", fontcolor="black", label="{FlowOPT_DM|X_predict_col_names\lb_value\lipw\lp_value\lw_value\ly_hat : ndarray\l|_define_objective()\lfit(X, t, y, ipw, y_hat)\lpredict(X)\l}", shape="record", style="filled", fontsize="25"];
"odtlearn.FlowOPT.FlowOPT_DR" [fillcolor="aliceblue", fontcolor="black", label="{FlowOPT_DR|\l|_define_objective()\l}", shape="record", style="filled", fontsize="25"];
"odtlearn.FlowOPT.FlowOPT_IPW" [fillcolor="aliceblue", fontcolor="black", label="{FlowOPT_IPW|X_predict_col_names\lb_value\lipw\lp_value\lw_value\l|fit(X, t, y, ipw)\lpredict(X)\l}", shape="record", style="filled", fontsize="25"];
"odtlearn.prescriptive_formulation.PrescriptiveProblem" [fillcolor="aliceblue", fontcolor="black", label="{PrescriptiveProblem|X : DataFrame\lX_col_dtypes\lX_col_labels : ndarray\ldatapoints\llabels\lt\ltreatments : tuple\ly\l|_extract_metadata(X, y, t)\l_get_node_status(b, w, p, n)\l_make_prediction(X)\lplot_tree(...)\lprint_tree()\l}", shape="record", style="filled", fontsize="25"];
"odtlearn.problem_formulation.ProblemFormulation" [fillcolor="aliceblue", fontcolor="black", label="{ProblemFormulation|b : int\ldepth : int\lmodel\lnum_threads : NoneType\lp : int\ltime_limit : int\ltree : _Tree\lverbose : bool\lw : int\lz : int\lzeta : int\l|_create_main_problem()\l_define_constraints()\l_define_objective()\l_define_variables()\lfit()\lpredict()\l}", shape="record", style="filled", fontsize="25"];
"odtlearn.RobustOCT.RobustOCT" [fillcolor="aliceblue", fontcolor="black", label="{RobustOCT|b\lb_indices : list\lb_value\lbudget : int\lcat_features : ndarray\lclasses_ : ndarray\lcosts : DataFrame, NoneType\lepsilon : int\leta : int\lf_theta_indices : list\lgammas : DataFrame, NoneType\lmax_values\lmin_values\lmodel_name : str\lreg\lt : int\lw\lw_value\l|_define_constraints()\l_define_objective()\l_define_variables()\l_get_node_status(b, w, n)\l_make_prediction(X)\lfit(X, y, costs, budget)\lplot_tree(...)\lprint_tree()\l}", shape="record", style="filled", fontsize="25"];
"odtlearn.BendersOCT.BendersOCT" -> "odtlearn.classification_formulation.ClassificationProblem" [arrowhead="empty", arrowtail="none"];
"odtlearn.FairOCT.FairOCT" -> "odtlearn.FlowOCTMultipleNode.FlowOCTMultipleNode" [arrowhead="empty", arrowtail="none"];
"odtlearn.FlowOCT.FlowOCT" -> "odtlearn.FlowOCTSingleNode.FlowOCTSingleNode" [arrowhead="empty", arrowtail="none"];
"odtlearn.FlowOCTMultipleNode.FlowOCTMultipleNode" -> "odtlearn.classification_formulation.ClassificationProblem" [arrowhead="empty", arrowtail="none"];
"odtlearn.FlowOCTSingleNode.FlowOCTSingleNode" -> "odtlearn.classification_formulation.ClassificationProblem" [arrowhead="empty", arrowtail="none"];
"odtlearn.FlowOPT.FlowOPT_DM" -> "odtlearn.FlowOPTMultipleNode.FlowOPTMultipleNode" [arrowhead="empty", arrowtail="none"];
"odtlearn.FlowOPT.FlowOPT_DR" -> "odtlearn.FlowOPT.FlowOPT_DM" [arrowhead="empty", arrowtail="none"];
"odtlearn.FlowOPT.FlowOPT_IPW" -> "odtlearn.FlowOPTSingleNode.FlowOPTSingleNode" [arrowhead="empty", arrowtail="none"];
"odtlearn.FlowOPTMultipleNode.FlowOPTMultipleNode" -> "odtlearn.prescriptive_formulation.PrescriptiveProblem" [arrowhead="empty", arrowtail="none"];
"odtlearn.FlowOPTSingleNode.FlowOPTSingleNode" -> "odtlearn.prescriptive_formulation.PrescriptiveProblem" [arrowhead="empty", arrowtail="none"];
"odtlearn.RobustOCT.RobustOCT" -> "odtlearn.classification_formulation.ClassificationProblem" [arrowhead="empty", arrowtail="none"];
"odtlearn.classification_formulation.ClassificationProblem" -> "odtlearn.problem_formulation.ProblemFormulation" [arrowhead="empty", arrowtail="none"];
"odtlearn.prescriptive_formulation.PrescriptiveProblem" -> "odtlearn.problem_formulation.ProblemFormulation" [arrowhead="empty", arrowtail="none"];
"odtlearn.problem_formulation.ProblemFormulation" -> "abc.ABC" [arrowhead="empty", arrowtail="none"];
}
