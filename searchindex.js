Search.setIndex({"docnames": ["api", "autoapi/odtlearn/constants/index", "autoapi/odtlearn/constrained_oct/index", "autoapi/odtlearn/datasets/index", "autoapi/odtlearn/fair_oct/index", "autoapi/odtlearn/flow_oct/index", "autoapi/odtlearn/flow_oct_ms/index", "autoapi/odtlearn/flow_oct_ss/index", "autoapi/odtlearn/flow_opt/index", "autoapi/odtlearn/flow_opt_ms/index", "autoapi/odtlearn/flow_opt_ss/index", "autoapi/odtlearn/index", "autoapi/odtlearn/opt_ct/index", "autoapi/odtlearn/opt_dt/index", "autoapi/odtlearn/opt_pt/index", "autoapi/odtlearn/robust_oct/index", "autoapi/odtlearn/tests/conftest/index", "autoapi/odtlearn/tests/index", "autoapi/odtlearn/utils/Tree/index", "autoapi/odtlearn/utils/TreePlotter/index", "autoapi/odtlearn/utils/_reingold_tilford/index", "autoapi/odtlearn/utils/binarize/index", "autoapi/odtlearn/utils/callback_helpers/index", "autoapi/odtlearn/utils/callbacks/index", "autoapi/odtlearn/utils/index", "autoapi/odtlearn/utils/mip_cbc/index", "autoapi/odtlearn/utils/solver/index", "autoapi/odtlearn/utils/validation/index", "contributing", "index", "installation", "notebooks/FairOCT", "notebooks/FlowOCT", "notebooks/RobustOCT", "notebooks/index", "user_guide/adding_constraints", "user_guide/fair_optimal_classification_trees", "user_guide/index", "user_guide/optimal_classification_trees", "user_guide/optimal_prescriptive_trees", "user_guide/optimal_robust_classification_trees"], "filenames": ["api.md", "autoapi/odtlearn/constants/index.rst", "autoapi/odtlearn/constrained_oct/index.rst", "autoapi/odtlearn/datasets/index.rst", "autoapi/odtlearn/fair_oct/index.rst", "autoapi/odtlearn/flow_oct/index.rst", "autoapi/odtlearn/flow_oct_ms/index.rst", "autoapi/odtlearn/flow_oct_ss/index.rst", "autoapi/odtlearn/flow_opt/index.rst", "autoapi/odtlearn/flow_opt_ms/index.rst", "autoapi/odtlearn/flow_opt_ss/index.rst", "autoapi/odtlearn/index.rst", "autoapi/odtlearn/opt_ct/index.rst", "autoapi/odtlearn/opt_dt/index.rst", "autoapi/odtlearn/opt_pt/index.rst", "autoapi/odtlearn/robust_oct/index.rst", "autoapi/odtlearn/tests/conftest/index.rst", "autoapi/odtlearn/tests/index.rst", "autoapi/odtlearn/utils/Tree/index.rst", "autoapi/odtlearn/utils/TreePlotter/index.rst", "autoapi/odtlearn/utils/_reingold_tilford/index.rst", "autoapi/odtlearn/utils/binarize/index.rst", "autoapi/odtlearn/utils/callback_helpers/index.rst", "autoapi/odtlearn/utils/callbacks/index.rst", "autoapi/odtlearn/utils/index.rst", "autoapi/odtlearn/utils/mip_cbc/index.rst", "autoapi/odtlearn/utils/solver/index.rst", "autoapi/odtlearn/utils/validation/index.rst", "contributing.md", "index.md", "installation.md", "notebooks/FairOCT.ipynb", "notebooks/FlowOCT.ipynb", "notebooks/RobustOCT.ipynb", "notebooks/index.md", "user_guide/adding_constraints.md", "user_guide/fair_optimal_classification_trees.md", "user_guide/index.md", "user_guide/optimal_classification_trees.md", "user_guide/optimal_prescriptive_trees.md", "user_guide/optimal_robust_classification_trees.md"], "titles": ["ODTlearn API", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">odtlearn.constants</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">odtlearn.constrained_oct</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">odtlearn.datasets</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">odtlearn.fair_oct</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">odtlearn.flow_oct</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">odtlearn.flow_oct_ms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">odtlearn.flow_oct_ss</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">odtlearn.flow_opt</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">odtlearn.flow_opt_ms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">odtlearn.flow_opt_ss</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">odtlearn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">odtlearn.opt_ct</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">odtlearn.opt_dt</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">odtlearn.opt_pt</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">odtlearn.robust_oct</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">odtlearn.tests.conftest</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">odtlearn.tests</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">odtlearn.utils.Tree</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">odtlearn.utils.TreePlotter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">odtlearn.utils._reingold_tilford</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">odtlearn.utils.binarize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">odtlearn.utils.callback_helpers</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">odtlearn.utils.callbacks</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">odtlearn.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">odtlearn.utils.mip_cbc</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">odtlearn.utils.solver</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">odtlearn.utils.validation</span></code>", "How to contribute to ODTlearn", "What is ODTlearn?", "Installation Guide", "<code class=\"docutils literal notranslate\"><span class=\"pre\">FairOCT</span></code> Example", "<code class=\"docutils literal notranslate\"><span class=\"pre\">FlowOCT</span></code> Examples", "<code class=\"docutils literal notranslate\"><span class=\"pre\">RobustOCT</span></code> Examples", "Example Notebooks", "Adding side constraints to optimal classification trees", "Fair Optimal Classification Trees", "User Guide", "Optimal Classification Trees", "Optimal Prescriptive Trees", "Robust Optimal Classification Trees"], "terms": {"thi": [0, 4, 23, 25, 26, 27, 28, 29, 30, 32, 33, 35, 36, 38, 39, 40], "i": [0, 1, 3, 4, 5, 8, 11, 12, 14, 15, 22, 23, 25, 26, 28, 30, 31, 32, 33, 35, 36, 38, 39, 40], "class": [0, 3, 29, 31, 32, 35, 36, 38, 39], "function": [0, 4, 12, 14, 15, 26, 31, 33, 35, 38, 40], "refer": [0, 25], "packag": [0, 12, 14, 15, 26, 29, 30, 35, 39], "pleas": [0, 23, 25, 28, 29, 35], "exampl": [0, 3, 25, 28, 35, 36, 38, 40], "notebook": [0, 3, 29, 35, 36], "further": [0, 35], "detail": [0, 35, 40], "raw": [0, 30], "specif": [0, 23, 29, 36], "mai": [0, 23, 36, 38, 40], "enough": [0, 32], "give": [0, 36], "full": [0, 38, 40], "guidelin": 0, "us": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 38, 39], "subpackag": 0, "util": [0, 11, 32], "submodul": 0, "tree": [0, 3, 5, 8, 11, 12, 14, 15, 19, 20, 23, 24, 29, 33, 37], "treeplott": [0, 11, 24], "binar": [0, 11, 24, 38, 39], "callback_help": [0, 11, 24], "callback": [0, 11, 24, 25, 26, 32, 33], "solver": [0, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 22, 23, 24, 25, 31, 32, 33, 35, 38], "valid": [0, 11, 24, 30], "constant": [0, 11, 25, 26], "modul": 0, "content": 0, "min": [0, 1, 11, 20, 33], "max": [0, 1, 11], "minim": [0, 1, 11, 26], "maxim": [0, 1, 5, 11, 25, 26, 29, 32, 33, 35, 38, 39], "binari": [0, 1, 3, 5, 8, 11, 15, 25, 29, 31, 32, 33, 35, 36, 38, 39], "continu": [0, 1, 11, 25, 31, 32, 33], "integ": [0, 1, 5, 11, 15, 21, 23, 25, 26, 29, 31, 32, 33, 40], "constrained_oct": [0, 4, 11], "dataset": [0, 11, 27, 32, 33, 38, 39], "fair_oct": [0, 11, 31], "flow_oct": [0, 11, 32], "flow_oct_m": [0, 2, 4, 11], "flow_oct_ss": [0, 5, 11], "flow_opt": [0, 11], "flow_opt_m": [0, 8, 11], "flow_opt_ss": [0, 8, 11], "opt_ct": [0, 6, 7, 11, 15], "opt_dt": [0, 11, 12, 14], "opt_pt": [0, 9, 10, 11], "robust_oct": [0, 11, 33], "attribut": [0, 3, 12, 14, 15, 23, 36], "odtl": [0, 11], "name": [0, 5, 8, 11, 12, 14, 15, 21, 23, 25, 26, 27, 30, 35], "sourc": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 19, 20, 21, 22, 23, 25, 26, 27, 28, 30], "b": [1, 3, 11, 22, 23, 26, 31], "c": [1, 11, 25, 26, 32, 33], "constrainedoct": [2, 4, 35], "_lambda": [2, 4, 5, 6, 7, 29, 31, 35, 38], "depth": [2, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 19, 20, 23, 25, 29, 31, 33, 35, 38, 39], "time_limit": [2, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 29, 31, 32, 33, 35, 38], "num_thread": [2, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 29, 31, 32, 33, 35], "verbos": [2, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 25, 26, 29, 31, 32, 33, 35], "base": [2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 19, 23, 25, 29, 31, 33, 36, 38, 39, 40], "flowoctmultiplesink": [2, 4, 6, 35], "helper": [2, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 26, 31], "provid": [2, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 25, 29, 30, 32, 35, 36, 38, 39], "standard": [2, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 36], "wai": [2, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 28, 29, 32], "creat": [2, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 25, 26, 33, 35, 38, 39], "an": [2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 23, 25, 26, 29, 32, 33, 35, 36, 39, 40], "abc": [2, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], "inherit": [2, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 35], "prescriptive_ex_data": 3, "return": [3, 5, 8, 15, 25, 26, 27, 33, 35, 38], "tupl": [3, 25], "train": [3, 4, 8, 15, 27, 31, 32, 33, 38, 40], "test": [3, 4, 5, 8, 12, 14, 15, 29, 33, 40], "datafram": [3, 21, 27, 31, 32, 33, 39], "from": [3, 12, 14, 15, 25, 26, 27, 29, 30, 31, 32, 33, 35, 36, 38, 39, 40], "prescript": [3, 8, 29, 37], "balance_scale_data": [3, 32], "contain": [3, 23, 26, 29, 35, 40], "balanc": [3, 5, 29, 35, 38], "scale": [3, 32, 33], "data": [3, 5, 8, 15, 23, 26, 27, 29, 31, 35, 36, 38, 39, 40], "set": [3, 5, 8, 12, 14, 15, 23, 26, 27, 31, 32, 33, 35, 36, 38, 40], "uci": 3, "ml": [3, 32], "repositori": [3, 32, 33], "see": [3, 25, 31, 32, 33, 35, 36, 38, 40], "follow": [3, 25, 29, 30, 31, 32, 33, 36], "url": 3, "inform": [3, 12, 14, 15, 29, 32, 33, 35], "http": [3, 30, 32, 33, 35, 36, 38, 39, 40], "archiv": [3, 32], "ic": [3, 32], "edu": [3, 32], "flow_oct_exampl": [3, 32], "two": [3, 5, 23, 25, 28, 29, 30, 31, 32, 35, 36, 38, 39], "numpi": [3, 27, 29, 31, 32, 33], "arrai": [3, 4, 5, 8, 15, 26, 27, 31, 32, 33], "first": [3, 23, 25, 30, 31, 32, 33, 35, 38, 39], "flow": [3, 31, 32, 35], "octexampl": 3, "document": [3, 35], "The": [3, 4, 5, 8, 12, 14, 15, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 38, 39, 40], "diagram": [3, 31, 32, 35], "within": [3, 31, 32], "code": [3, 25, 31, 32, 35], "block": [3, 31, 32], "show": [3, 12, 14, 15, 31, 32, 33, 35, 38, 39], "our": [3, 5, 29, 30, 31, 32, 33, 35, 38], "ha": [3, 25, 27, 28, 31, 32, 35, 38, 39], "featur": [3, 4, 12, 14, 15, 29, 31, 32, 33, 35, 36, 40], "x1": [3, 25, 31, 32, 33], "x2": [3, 25, 31, 32, 33], "label": [3, 4, 5, 8, 12, 14, 15, 19, 20, 22, 29, 31, 32, 33, 35, 36], "1": [3, 4, 5, 8, 13, 14, 15, 19, 20, 22, 25, 26, 29, 35, 36, 38, 40], "0": [3, 4, 5, 8, 12, 14, 15, 19, 20, 23, 25, 26, 29, 33, 35, 36, 38, 40], "______0________": [3, 32, 33], "_______1_______x1": [3, 32, 33], "x": [3, 4, 5, 8, 15, 22, 23, 25, 26, 27, 30, 31, 32, 33, 38], "covari": [3, 15, 38, 39, 40], "y": [3, 4, 5, 8, 15, 25, 27, 29, 31, 32, 33], "respons": 3, "robustness_exampl": 3, "three": [3, 39], "robusttre": [3, 29], "third": 3, "cost": [3, 15, 33, 40], "vector": [3, 27, 36, 38, 39], "form": [3, 26, 29], "uncertainti": [3, 15, 33, 40], "5": [3, 19, 25, 31, 32, 33], "point": [3, 4, 5, 8, 12, 14, 15, 22, 23, 29, 33, 36, 38], "can": [3, 4, 23, 25, 26, 28, 29, 30, 32, 35, 36, 38, 39, 40], "caus": 3, "flip": 3, "need": [3, 27, 28, 30, 33, 35, 36, 38, 39, 40], "misclassifi": [3, 33], "all": [3, 5, 8, 12, 14, 15, 19, 22, 25, 29, 31, 33, 35, 36, 38], "other": [3, 23, 29, 32, 33, 35, 36, 38], "certain": [3, 39], "each": [3, 4, 5, 8, 12, 14, 15, 26, 29, 31, 33, 36, 38, 39, 40], "observ": [3, 8, 27, 29, 30, 32, 39], "example_2_data": 3, "demonstr": [3, 29, 35], "usag": 3, "oct": [3, 35], "here": [3, 28, 29, 30, 33], "imbalanc": [3, 32, 38], "posit": [3, 4, 36], "being": [3, 32, 36], "minor": [3, 32, 38], "fairness_exampl": 3, "A": [3, 5, 8, 12, 14, 15, 21, 26, 27, 29, 32, 33, 35, 36, 38, 39, 40], "simul": [3, 33], "fairoct": [3, 4, 34, 35], "visual": [3, 31, 32], "we": [3, 4, 23, 26, 27, 28, 29, 30, 31, 32, 33, 35, 38], "have": [3, 4, 23, 29, 30, 31, 32, 33, 35, 36, 38, 39], "protect": [3, 4, 31, 35, 36], "race": [3, 4, 31, 32, 36], "level": [3, 4, 31, 33, 38, 39], "w": [3, 22, 23, 31], "In": [3, 23, 29, 31, 32, 35, 36, 38, 39, 40], "ar": [3, 5, 8, 12, 14, 15, 23, 25, 26, 28, 29, 30, 31, 33, 35, 36, 38, 39, 40], "7": [3, 25, 31, 32, 33, 40], "instanc": [3, 31, 38], "among": [3, 31, 36, 38], "them": [3, 31, 36], "2": [3, 25, 30, 31, 35, 38], "also": [3, 23, 25, 28, 31, 33, 38, 39], "breakdown": [3, 31], "5w": [3, 31], "4": [3, 25, 31, 32, 33], "2w": [3, 31], "2b": [3, 31], "5b": [3, 31], "3": [3, 12, 14, 15, 19, 25, 31], "4w": [3, 31], "3w": [3, 31], "1b": [3, 31], "6b": [3, 31], "___________0_________": [3, 31], "__________1_____________x1": [3, 31], "protect_feat": [3, 4], "legit_factor": [3, 4], "legitim": [3, 4, 36], "factor": [3, 4], "robust_exampl": [3, 33], "monk": [3, 33], "": [3, 12, 14, 15, 28, 29, 31, 32, 33, 36, 38, 39, 40], "second": [3, 5, 8, 15, 23, 31, 32, 33, 35, 38], "problem": [3, 23, 25, 26, 29, 33, 35, 36, 38], "27": [3, 31, 32, 33], "fairconstrainedoct": [4, 35], "fit": [4, 5, 8, 12, 13, 14, 15, 27, 29, 31, 32, 33, 35, 39, 40], "paramet": [4, 5, 8, 12, 14, 15, 21, 26, 27, 31, 32, 33, 35, 36, 38, 39, 40], "like": [4, 5, 8, 15, 26, 27, 28, 35, 36, 39], "spars": 4, "matrix": [4, 27, 31, 32, 33, 38, 40], "shape": [4, 5, 8, 15, 26, 27, 29, 31, 32, 33, 35, 40], "n_sampl": [4, 5, 8, 15, 26], "n_featur": [4, 5, 8, 15, 26], "input": [4, 5, 8, 15, 26, 27, 33, 36, 38, 39], "sampl": [4, 5, 8, 15, 26, 29, 31, 32, 33, 35, 40], "target": [4, 15, 22, 29, 32], "valu": [4, 5, 8, 12, 14, 15, 19, 21, 23, 25, 26, 27, 31, 32, 33, 35, 36, 38, 39, 40], "classif": [4, 12, 14, 15, 29, 33, 37], "n_p": 4, "column": [4, 21, 23, 25, 27, 31, 32, 33, 38, 39], "gender": [4, 36], "etc": [4, 12, 14, 15], "one": [4, 23, 28, 32, 35, 36, 38, 39], "more": [4, 23, 33, 35, 36], "e": [4, 26, 32, 33, 36, 38, 39, 40], "g": [4, 23, 27, 36, 38], "prior": 4, "number": [4, 5, 8, 12, 14, 15, 20, 23, 25, 35, 38], "crimin": 4, "act": 4, "self": [4, 8, 15, 35], "object": [4, 5, 8, 15, 23, 25, 26, 27, 29, 31, 33, 35], "predict": [4, 5, 8, 12, 13, 14, 15, 27, 29, 31, 32, 33, 35, 38, 39], "classifi": [4, 5, 8, 15, 22, 29, 32, 33, 36, 38], "fairtre": [4, 29, 36], "ndarrai": [4, 5, 8, 15], "closest": [4, 5, 8, 15], "seen": [4, 5, 8, 15], "dure": [4, 5, 8, 15], "fairspoct": [4, 31, 35], "positive_class": [4, 31, 35], "60": [4, 5, 8, 13, 31, 32, 33, 35, 38], "obj_mod": [4, 5, 29, 31, 32, 35, 38], "acc": [4, 5, 29, 31, 32, 35, 38], "fairness_bound": [4, 31, 35, 36], "none": [4, 5, 8, 12, 13, 14, 15, 19, 20, 25, 26, 27, 29, 31, 32, 33, 35], "fals": [4, 5, 8, 12, 13, 14, 15, 19, 25, 26, 31, 32, 33, 35, 36, 38], "calc_metr": [4, 31], "statist": [4, 29, 32, 33, 35], "pariti": [4, 29, 35], "ani": [4, 12, 14, 15, 21, 26, 29, 31, 38, 39, 40], "given": [4, 5, 8, 15, 33, 35, 38, 39], "outcom": [4, 8, 27, 29, 35, 36, 39], "could": 4, "sp_dict": 4, "dictionari": [4, 12, 14, 15, 26], "kei": [4, 26], "p": [4, 23, 29, 31, 32, 33, 35, 36, 38, 39, 40], "t": [4, 8, 27, 29, 31, 33], "where": [4, 23, 25, 28, 29, 33, 36, 38, 39, 40], "faircspoct": [4, 35], "condit": [4, 29, 35], "legit_fact": 4, "csp_dict": 4, "f": [4, 32, 33, 40], "l": [4, 31, 33, 36], "fairpeoct": [4, 31, 35], "y_pred": [4, 31], "true": [4, 12, 14, 15, 19, 25, 29, 32, 35, 36, 39], "rate": [4, 36, 38], "eq_dict": 4, "t_pred": 4, "faireoppoct": 4, "abstract": [4, 13, 25, 35], "faireoddsoct": [4, 35], "fairness_typ": [4, 36], "get_sp": 4, "get_csp": 4, "get_eqodd": 4, "get_condeqodd": 4, "neg": 4, "ceq_dict": 4, "fairness_metric_summari": 4, "metric": [4, 31, 33, 35], "new_data": [4, 27, 33], "flowoct": [5, 29, 34], "flowoctsinglesink": [5, 7], "optim": [5, 8, 15, 23, 25, 26, 29, 31, 32, 33, 37], "decis": [5, 8, 15, 26, 29, 35, 36, 38], "produc": [5, 15, 33], "provabl": 5, "str": [5, 8, 15, 25, 26, 35], "string": [5, 8, 15, 26, 35], "specifi": [5, 8, 12, 14, 15, 26, 35, 36, 38], "solv": [5, 8, 15, 23, 26, 29, 32, 33, 35, 38, 40], "mip": [5, 8, 15, 23, 25, 26, 30, 35], "option": [5, 8, 12, 14, 15, 25, 30, 35, 38], "gurobi": [5, 8, 12, 14, 15, 26, 31, 32, 33, 35, 38], "cbc": [5, 8, 15, 25, 26, 35], "If": [5, 8, 12, 14, 15, 23, 28, 29, 30, 33, 35, 39], "found": [5, 8, 15, 23, 30, 31, 32, 33, 35, 40], "default": [5, 8, 12, 14, 15, 26, 35, 38], "float": [5, 8, 12, 14, 15, 25, 26, 33, 35], "regular": [5, 32, 33, 35], "take": [5, 26, 29, 33, 35, 38, 39], "between": [5, 33, 35, 36, 38, 40], "control": [5, 23, 36, 40], "complex": [5, 35], "learn": [5, 8, 29, 32, 33, 35, 36, 38, 39, 40], "should": [5, 8, 15, 21, 25, 26, 33, 35, 36, 38, 39], "accuraci": [5, 31, 33, 35, 38], "attempt": [5, 35, 38], "while": [5, 23, 35, 36], "aim": [5, 35], "better": [5, 32, 35], "gener": [5, 12, 14, 15, 23, 25, 26, 30, 31, 32, 33, 35, 40], "int": [5, 8, 12, 14, 15, 23, 25, 35], "time": [5, 8, 12, 14, 15, 28, 31, 32, 33, 35, 38, 40], "limit": [5, 8, 15, 35, 36, 38], "thread": [5, 8, 15, 25, 31, 32, 33, 35], "avail": [5, 8, 15, 25, 30, 31, 32, 33, 36, 38], "bool": [5, 8, 12, 14, 15, 25, 26], "flag": [5, 8, 15], "log": [5, 8, 15, 32, 33], "output": [5, 8, 12, 14, 15, 38, 39], "strongtre": [5, 8, 29, 38], "bendersoct": [5, 32], "bender": [5, 23, 33], "formul": [5, 30, 33, 35, 38], "optimalclassificationtre": [6, 7, 12, 15], "flowopt_ipw": [8, 39], "flowoptsinglesink": [8, 10], "prescrib": 8, "treatment": [8, 27, 29, 36, 38, 39], "oppos": 8, "method": [8, 12, 14, 15, 23, 25, 29, 30, 31, 32, 33, 35, 38, 40], "ipw": [8, 27], "run": [8, 27, 29, 30], "choic": 8, "dm": [8, 27], "dr": [8, 27], "which": [8, 23, 25, 26, 27, 29, 30, 33, 35, 38, 39, 40], "repres": [8, 29, 40], "invers": [8, 27], "propens": [8, 27], "weight": [8, 27], "direct": [8, 29, 38], "doubli": 8, "robust": [8, 15, 29, 33, 37], "respect": [8, 29, 30], "prescriptivetre": [8, 29], "upon": [8, 36, 38], "estim": [8, 39, 40], "make": [8, 27, 28, 33, 35, 36], "flowopt_dm": [8, 39], "flowoptmultiplesink": [8, 9], "y_hat": [8, 27, 39], "n_treatment": 8, "counterfactu": [8, 27, 39], "flowopt_dr": [8, 39], "optimalprescriptivetre": [9, 10, 14], "optimaldecisiontre": [12, 13, 14], "print_tre": [12, 14, 15, 29, 32, 33], "print": [12, 14, 15, 29, 31, 32, 33], "branch": [12, 14, 15, 23, 25, 29, 32, 38, 40], "threshold": [12, 14, 15, 40], "node": [12, 14, 15, 19, 23, 29, 31, 32, 33, 35, 38], "assert": [12, 14, 15], "assign": [12, 14, 15, 25, 29, 33, 39], "model": [12, 14, 15, 23, 25, 26, 27, 29, 31, 32, 33, 38, 39, 40], "determin": [12, 14, 15], "how": [12, 14, 15, 25, 29, 30, 32, 33, 35, 36, 38, 40], "plot_tre": [12, 14, 15, 31, 32, 33], "fill": [12, 14, 15, 19], "round": [12, 14, 15, 19], "precis": [12, 14, 15, 19], "ax": [12, 14, 15, 19, 31, 32, 33], "fontsiz": [12, 14, 15, 19, 32], "color_dict": [12, 14, 15, 19, 32], "leav": [12, 14, 15, 19, 32, 35], "edge_annot": [12, 14, 15, 19], "arrow_annotation_font_scal": [12, 14, 15, 19], "8": [12, 14, 15, 25, 31, 32, 33], "debug": [12, 14, 15, 19], "plot": [12, 14, 15, 32], "matplotlib": [12, 14, 15, 31, 32, 33], "It": [12, 14, 15, 31, 32, 33, 40], "doe": [12, 14, 15, 33, 40], "some": [12, 14, 15, 30, 33, 36, 40], "preprocess": [12, 14, 15, 32, 38, 39], "befor": [12, 14, 15, 25, 28], "pass": [12, 14, 15, 23, 25, 26, 27, 29], "_mpltreeexport": [12, 14, 15, 19], "sklearn": [12, 14, 15, 19, 29, 32, 33], "argument": [12, 14, 15, 26, 35, 38], "root": [12, 14, 15, 23, 29, 31, 32, 33, 38], "whether": [12, 14, 15, 26, 35, 36], "impur": [12, 14, 15], "includ": [12, 14, 15, 25, 29, 35, 36], "everi": [12, 14, 15, 23], "onli": [12, 14, 15, 21, 25, 27, 31, 32, 33, 38, 39], "top": [12, 14, 15, 26, 35], "when": [12, 14, 15, 23, 25, 26, 27, 29, 30, 31, 32, 33, 35, 36, 38, 39], "paint": [12, 14, 15], "indic": [12, 14, 15, 26, 38], "major": [12, 14, 15, 32, 38], "extrem": [12, 14, 15], "regress": [12, 14, 15], "puriti": [12, 14, 15], "multi": [12, 14, 15, 27], "draw": [12, 14, 15], "box": [12, 14, 15, 28], "corner": [12, 14, 15], "helvetica": [12, 14, 15], "font": [12, 14, 15], "instead": [12, 14, 15, 35], "roman": [12, 14, 15], "digit": [12, 14, 15], "axi": [12, 14, 15], "current": [12, 14, 15, 23, 31, 32, 33, 36], "previou": [12, 14, 15], "clear": [12, 14, 15], "size": [12, 14, 15, 33], "text": [12, 14, 15], "automat": [12, 14, 15], "figur": [12, 14, 15, 35, 38], "dict": [12, 14, 15, 26], "color": [12, 14, 15], "rrggbb": [12, 14, 15], "format": [12, 14, 15, 29, 31, 32], "chosen": [12, 14, 15], "palett": [12, 14, 15], "distanc": [14, 19, 20, 38], "robustoct": [15, 34], "1800": 15, "budget": [15, 33, 40], "against": [15, 29, 33], "distribut": [15, 29, 33, 38], "shift": [15, 20, 29], "pytest_addopt": 16, "parser": 16, "pytest_configur": 16, "config": 16, "skip_solv": 16, "request": [16, 28, 36], "mplplotter": 19, "node_dict": 19, "column_nam": 19, "max_depth": 19, "model_nam": 19, "_export": 19, "get_fill_color": 19, "node_id": [19, 20], "node_to_str": 19, "leaf": [19, 29, 32, 33, 38], "selected_featur": 19, "cutoff": [19, 25, 31, 32, 33], "export": [19, 30], "recurs": 19, "max_x": 19, "max_i": 19, "drawtre": 20, "parent": 20, "lmost_sibl": 20, "left": [20, 22, 29], "right": [20, 22, 29], "lbrother": 20, "get_lmost_s": 20, "max_ext": 20, "buchheim": 20, "third_walk": 20, "n": [20, 22, 25, 29, 33, 35, 36, 39, 40], "first_walk": 20, "v": [20, 22], "apport": 20, "default_ancestor": 20, "move_subtre": 20, "wl": 20, "wr": 20, "execute_shift": 20, "ancestor": 20, "vil": 20, "second_walk": 20, "m": [20, 25, 32], "children": 20, "df": [21, 27, 32], "categorical_col": [21, 32], "integer_col": [21, 32], "panda": [21, 29, 31, 32, 33], "categor": [21, 32, 38, 39], "There": [21, 29, 30], "na": 21, "list": [21, 25, 26, 27, 29, 32], "consist": [21, 26], "get_left_exp_integ": 22, "main_grb_obj": 22, "get_right_exp_integ": 22, "get_target_exp_integ": 22, "get_cut_integ": 22, "get_cut_express": 22, "master": [22, 23, 30], "path": [22, 29, 30], "xi": 22, "f_theta_indic": 22, "get_all_terminal_path": 22, "terminal_nod": [22, 23], "path_dict": 22, "feature_path_dict": 22, "assignment_dict": 22, "cutoff_dict": 22, "curr_nod": 22, "curr_path": 22, "curr_feature_path": 22, "curr_cutoff_path": 22, "find": [22, 28, 32, 38], "termin": [22, 30], "get_nominal_path": 22, "get": [22, 23, 26, 30, 32, 33, 36], "nomin": 22, "correctli": 22, "shortest_path_solv": 22, "terminal_path_dict": [22, 23], "terminal_features_dict": [22, 23], "terminal_assignments_dict": [22, 23], "terminal_cutoffs_dict": [22, 23], "initial_xi": [22, 23], "initial_min": [22, 23], "initial_max": [22, 23], "benders_subproblem": 23, "main_model_obj": 23, "benderscallback": 23, "obj": [23, 25, 26, 31, 32, 33], "kwarg": [23, 26], "constrsgener": [23, 26], "call": [23, 25, 26, 32, 33, 35, 38, 39], "through": [23, 26, 29, 30, 33, 35, 38, 40], "bound": [23, 26, 31, 32, 33, 35, 36], "interest": [23, 29, 35], "solut": [23, 25, 26, 31, 32, 33, 38], "sub": 23, "minimum": 23, "cut": [23, 25, 31, 32, 33], "check": [23, 25, 27], "violat": 23, "add": [23, 25, 26, 31, 32, 33], "correspond": [23, 27, 29, 33, 35, 36, 38, 39, 40], "constraint": [23, 25, 26, 30, 32, 33, 36, 37], "lazi": [23, 30, 32, 33], "proce": 23, "whenev": 23, "mean": 23, "generate_constr": 23, "npass": [23, 25], "engin": [23, 25], "after": [23, 27, 35], "analyz": 23, "variabl": [23, 25, 26, 30, 31, 32, 33], "var": [23, 25], "whose": 23, "queri": [23, 25], "ad": [23, 26, 30, 33, 36, 37], "add_cut": [23, 25], "situat": 23, "fraction": 23, "inequ": 23, "plane": [23, 31, 32, 33], "remov": [23, 31, 32, 33], "case": [23, 33, 38], "feasibl": [23, 35], "new": [23, 25, 26, 27, 29, 30, 35, 38, 39], "report": [23, 38], "To": [23, 25, 30, 33, 35, 38, 40], "your": [23, 28, 30, 33], "cuts_gener": 23, "lazy_constrs_gener": 23, "both": [23, 39, 40], "possibl": [23, 35, 38], "arg": [23, 25], "note": [23, 33], "fewer": 23, "than": [23, 32, 35, 38, 39], "origin": [23, 36, 38, 39], "due": 23, "pre": [23, 25], "process": [23, 25, 35, 36], "you": [23, 28, 29, 30, 33, 38], "want": [23, 27, 29, 35, 36, 38], "term": [23, 26, 32, 38], "altern": [23, 38], "ones": 23, "remain": [23, 35], "procedur": 23, "properti": [23, 26], "add_lazy_constr": [23, 25], "cannot": 23, "perform": [23, 29, 32, 33, 38, 40], "modif": [23, 35], "search": 23, "robust_tree_subproblem": 23, "robustbenderscallback": 23, "datapoint": [23, 39], "subproblem": 23, "python": [25, 26, 29], "interfac": 25, "coin": [25, 30], "OR": 25, "logger": 25, "warningmessag": 25, "ffi": 25, "has_cbc": 25, "os_is_64_bit": 25, "inf": [25, 26], "cut_idx": 25, "max_name_s": 25, "512": 25, "def_pumpp": 25, "30": [25, 31, 32, 33], "pathmip": 25, "char_on": 25, "char_zero": 25, "dbl_param_primal_tol": 25, "dbl_param_dual_tol": 25, "dbl_param_zero_tol": 25, "dbl_param_int_tol": 25, "dbl_param_presolve_tol": 25, "dbl_param_time_limit": 25, "dbl_param_psi": 25, "6": [25, 31, 32, 33], "dbl_param_cutoff": 25, "dbl_param_allowable_gap": 25, "dbl_param_gap_ratio": 25, "9": [25, 31, 32, 33], "dbl_param_max_secs_not_improv_f": 25, "10": [25, 30, 31, 32, 33], "int_param_pert_valu": 25, "int_param_idiot": 25, "int_param_strong_branch": 25, "int_param_cut_depth": 25, "int_param_max_nod": 25, "int_param_number_befor": 25, "int_param_fpump_it": 25, "int_param_max_sol": 25, "int_param_cut_pass_in_tre": 25, "int_param_thread": 25, "int_param_cut_pass": 25, "int_param_log_level": 25, "11": [25, 31, 32, 33], "int_param_max_saved_sol": 25, "12": [25, 31, 32, 33], "int_param_multiple_root": 25, "13": [25, 31, 32, 33], "int_param_round_int_var": 25, "14": [25, 31, 32, 33], "int_param_random_se": 25, "15": [25, 31, 32, 33], "int_param_elapsed_tim": 25, "16": [25, 31, 32, 33], "int_param_cgraph": 25, "17": [25, 31, 32], "int_param_clique_merg": 25, "18": [25, 31, 32, 33], "int_param_max_nodes_not_improv_f": 25, "19": [25, 31, 32, 33], "osi_getnumcol": 25, "osi_getcolsolut": 25, "osi_getintegertoler": 25, "osi_isinteg": 25, "osi_isprovenoptim": 25, "cbc_setintparam": 25, "cbc_setdblparam": 25, "cbc_getsolverptr": 25, "cbc_generatecut": 25, "cbc_solvelinearprogram": 25, "cbc_reset": 25, "cbc_computefeatur": 25, "cbc_nfeatur": 25, "cbc_featurenam": 25, "osicuts_new": 25, "osicuts_addrowcut": 25, "osicuts_addglobalrowcut": 25, "osicuts_sizerowcut": 25, "osicuts_nzrowcut": 25, "osicuts_idxrowcut": 25, "osicuts_coefrowcut": 25, "osicuts_rhsrowcut": 25, "osicuts_senserowcut": 25, "osicuts_delet": 25, "cbc_set_paramet": 25, "param": 25, "solvercbc": [25, 26], "sens": [25, 26], "independ": [25, 36], "api": [25, 29], "commun": 25, "add_var": [25, 26], "real": [25, 32, 38], "lb": [25, 26], "ub": [25, 26], "coltyp": 25, "update_conflict_graph": 25, "cgraph_dens": 25, "densiti": 25, "conflict": 25, "graph": 25, "e1": 25, "linexpr": [25, 26], "e2": 25, "conflicting_nod": 25, "v1": 25, "get_objective_const": 25, "get_object": 25, "set_object": [25, 26], "lin_expr": [25, 26], "relax": [25, 31, 32, 33], "get_max_second": 25, "set_max_second": 25, "max_second": 25, "get_max_solut": 25, "set_max_solut": 25, "max_solut": 25, "get_max_nod": 25, "set_max_nod": 25, "max_nod": 25, "get_verbos": 25, "set_verbos": 25, "var_set_var_typ": 25, "var_set_obj": 25, "generate_cut": 25, "cut_typ": 25, "cuttyp": 25, "max_cut": 25, "maxsiz": 25, "min_viol": 25, "0001": 25, "cutpool": 25, "clique_merg": 25, "constr": 25, "optimizationstatu": 25, "get_objective_sens": 25, "set_objective_sens": 25, "get_objective_valu": 25, "get_statu": 25, "get_log": 25, "get_objective_bound": 25, "var_get_x": 25, "assum": 25, "get_num_solut": 25, "get_objective_value_i": 25, "var_get_xi": 25, "var_get_rc": 25, "var_get_lb": 25, "var_set_lb": 25, "var_get_ub": 25, "var_set_ub": 25, "var_get_nam": 25, "idx": 25, "var_get_index": 25, "var_get_branch_prior": 25, "constr_get_index": 25, "constr_get_rh": 25, "constr_set_rh": 25, "rh": [25, 31, 32, 33], "var_get_obj": 25, "var_get_var_typ": 25, "var_set_column": 25, "var_get_column": 25, "add_constr": [25, 26, 35], "add_so": 25, "so": [25, 30, 39], "sos_typ": 25, "write": [25, 28, 29], "file_path": 25, "read": [25, 28, 29, 30, 32], "set_start": 25, "start": [25, 30], "num_col": 25, "num_int": 25, "num_row": 25, "num_nz": 25, "get_cutoff": 25, "set_cutoff": 25, "get_mip_gap_ab": 25, "set_mip_gap_ab": 25, "allowable_gap": 25, "get_mip_gap": 25, "set_mip_gap": 25, "allowable_ratio_gap": 25, "constr_get_expr": 25, "constr_get_nam": 25, "set_processing_limit": 25, "max_tim": 25, "int_max": 25, "max_sol": 25, "max_seconds_same_incumb": 25, "max_nodes_same_incumb": 25, "get_emphasi": 25, "searchemphasi": 25, "set_emphasi": 25, "emph": 25, "set_num_thread": 25, "remove_constr": 25, "remove_var": 25, "varslist": 25, "get_problem_nam": 25, "set_problem_nam": 25, "get_pump_pass": 25, "set_pump_pass": 25, "constr_get_pi": 25, "constr_get_slack": 25, "feature_valu": 25, "reset": 25, "feature_nam": 25, "modelosi": 25, "osi_ptr": 25, "mix": [25, 29, 38, 39], "program": 25, "main": [25, 38, 39], "build": [25, 30, 31, 32, 33, 40], "result": [25, 31, 32, 33, 36, 38, 39, 40], "re": 25, "varlist": 25, "constrlist": 25, "import": [25, 29, 31, 32, 33, 38], "solver_nam": [25, 26], "var_typ": 25, "statu": [25, 36], "row": [25, 31, 32, 33], "its": [25, 29, 38, 39], "linear": [25, 26], "express": [25, 26], "save": 25, "lp": [25, 32], "mp": 25, "file": [25, 30], "prioriti": 25, "constraintprior": 25, "x_1": [25, 32, 33], "x_2": [25, 33], "leq": [25, 38], "equival": [25, 36], "summat": 25, "displaystyl": 25, "sum_": 25, "x_i": 25, "cons1": 25, "xsum": 25, "rang": [25, 31, 32, 33, 38, 40], "type": [25, 26, 29, 31, 32, 33, 36], "solverosi": 25, "null": 25, "osisolverinterfac": 25, "restrict": 25, "compar": 25, "mainli": 25, "set_objective_const": 25, "const": 25, "mip_gap_ab": 25, "mip_gap": 25, "constr_set_expr": 25, "constrslist": 25, "var_set_branch_prior": 25, "grb_cbc_const_map": 26, "wrapper": 26, "interact": 26, "up": [26, 31, 32, 33], "slightli": 26, "modifi": [26, 35], "version": [26, 27, 30, 31, 32, 33], "optim_gap": [26, 32], "num_decision_var": 26, "num_integer_var": 26, "num_non_zero": 26, "num_solut": 26, "num_constraint": 26, "search_progress_log": 26, "get_var_valu": 26, "var_nam": 26, "suppli": 26, "wa": [26, 31, 32, 33], "initi": [26, 35], "callback_act": 26, "construct": [26, 35], "decisiontre": 26, "copi": [26, 33], "action": 26, "boolean": 26, "reach": [26, 29], "addit": [26, 30, 35, 36, 39], "prep_indic": 26, "prep": 26, "mimic": 26, "structur": [26, 32, 35], "vtype": 26, "element": [26, 38], "arbitrari": [26, 36], "doubl": 26, "lower": [26, 38, 39], "upper": 26, "coeffici": [26, 31, 32, 33], "accept": 26, "store": 26, "cons_expr_tupl": 26, "cons_expr": 26, "arg1": 26, "init": 26, "expr": 26, "grb": 26, "quicksum": [26, 35], "sum": [26, 29, 31, 32, 33], "store_data": 26, "For": [26, 29, 30, 33, 35, 36, 38, 39, 40], "typic": [26, 36, 39], "privat": 26, "_data_var": 26, "across": [26, 36, 38], "_data": 26, "under": 26, "check_ipw": 27, "convert": 27, "seri": 27, "check_y_hat": 27, "uniqu": [27, 29, 35], "dimension": 27, "check_i": 27, "check_columns_match": 27, "original_column": 27, "frame": [27, 38], "match": [27, 36, 40], "pd": [27, 29, 31, 32, 33], "valueerror": 27, "do": [27, 28, 30, 39], "otherwis": 27, "check_binari": 27, "check_integ": 27, "check_same_as_x": 27, "x_col_label": 27, "g_label": 27, "welcom": 28, "cover": [28, 31, 32], "differ": [28, 30, 33, 35, 36, 39, 40], "project": 28, "everyon": [28, 39], "particip": 28, "govern": [28, 36], "By": [28, 36], "expect": [28, 30, 33, 40], "uphold": 28, "doc": [28, 29], "written": 28, "markdown": 28, "built": [28, 32], "sphinx": 28, "chang": [28, 32, 33, 38, 39, 40], "small": [28, 33, 38], "fix": 28, "typo": 28, "sentenc": 28, "correct": [28, 30], "easiest": 28, "via": [28, 38], "github": [28, 30], "onlin": 28, "editor": 28, "help": [28, 29, 36, 38, 40], "larger": [28, 38], "touch": 28, "multipl": 28, "local": 28, "git": [28, 30], "submit": 28, "pull": 28, "anoth": [28, 32], "sure": 28, "info": 28, "bodi": 28, "issu": [28, 29], "post": 28, "recommend": [28, 30, 38], "stackoverflow": 28, "page": 28, "reproduc": 28, "ensur": [28, 30], "resolv": 28, "manner": 28, "interpret": [29, 38], "machin": [29, 32, 33, 36, 38, 39, 40], "routin": [29, 38], "applic": [29, 36, 38, 39, 40], "involv": [29, 38], "eman": 29, "resp": 29, "fail": 29, "thu": [29, 30, 33, 38], "rule": 29, "goal": [29, 35], "design": 29, "select": 29, "best": [29, 31, 32, 33, 38], "relev": 29, "variou": 29, "develop": [29, 38], "research": [29, 30], "out": [29, 32], "univers": [29, 32, 33], "southern": 29, "california": [29, 32, 33], "mio": [29, 30, 35, 38, 39, 40], "technologi": 29, "varieti": 29, "aghaei": [29, 32, 33, 36, 38, 39, 40], "et": [29, 36, 38, 39, 40], "al": [29, 36, 38, 39, 40], "2021": [29, 32, 36, 38, 39, 40], "incorpor": [29, 36], "notion": [29, 35, 36], "fair": [29, 35, 37], "equal": [29, 31, 35], "opportun": 29, "odd": [29, 35], "jo": [29, 36, 39], "justin": [29, 33, 40], "few": 29, "instal": 29, "guid": [29, 36], "user": [29, 32, 33, 35, 36], "overview": 29, "algorithm": [29, 32, 33, 36, 38], "review": 29, "implement": [29, 36, 39], "know": 29, "look": 29, "walk": 29, "sever": 29, "toi": [29, 32], "particular": [29, 35, 39], "complet": [29, 35, 36, 38, 39, 40], "go": 29, "section": [29, 32, 36], "peopl": [29, 36, 39], "contribut": 29, "extens": [29, 36], "don": [29, 31, 33], "worri": 29, "about": [29, 35, 39], "script": 29, "consult": 29, "np": [29, 31, 32, 33], "model_select": [29, 32, 33], "train_test_split": [29, 32, 33], "read_csv": 29, "scale_enc": 29, "csv": 29, "pop": [29, 32], "x_train": [29, 32, 33], "x_test": [29, 32, 33], "y_train": [29, 32, 33], "y_test": [29, 32, 33], "test_siz": [29, 32, 33], "33": [29, 32, 33], "random_st": [29, 32, 33], "42": [29, 32, 33], "stcl": [29, 32], "100": [29, 31, 32, 33], "test_pr": [29, 32], "g\u00f3mez": [29, 32, 33, 36, 38, 39, 40], "vayano": [29, 32, 33, 36, 38, 39, 40], "strong": [29, 32, 33, 38], "arxiv": [29, 32, 35, 36, 38, 39], "preprint": [29, 32, 36, 38, 39], "2103": [29, 32, 38], "15965": [29, 32, 38], "benson": [29, 36], "j": [29, 36], "2022": [29, 33, 36, 39, 40], "2201": [29, 35, 36], "09932": [29, 35, 36], "gomez": 29, "aaai": [29, 33, 40], "22": [29, 31, 32], "workshop": [29, 33, 40], "adversari": [29, 33, 40], "beyond": [29, 33, 40], "link": 29, "2108": [29, 39], "13628": [29, 39], "explain": 30, "download": 30, "highli": 30, "virtual": 30, "environ": [30, 40], "mani": [30, 38, 39, 40], "manag": [30, 38], "pipenv": 30, "softwar": 30, "foundat": 30, "command": 30, "pip": 30, "com": 30, "d3m": 30, "group": [30, 35, 36, 39], "egg": 30, "must": [30, 33, 36, 40], "free": 30, "academ": [30, 31, 32, 33], "64": 30, "bit": 30, "window": 30, "linux": 30, "maco": 30, "intel": 30, "hardwar": 30, "howev": [30, 32, 35, 38, 39], "seem": 30, "work": [30, 31, 32, 33], "properli": 30, "behavior": 30, "strongli": 30, "below": [30, 35, 39], "step": [30, 38, 39], "compil": 30, "coinbrew": 30, "mkdir": 30, "cd": 30, "wget": 30, "nh": 30, "githubusercont": 30, "chmod": 30, "u": 30, "bash": 30, "fetch": [30, 33], "prompt": 30, "stabl": 30, "dyld_library_path": 30, "TO": 30, "dist": 30, "lib": 30, "pmip_cbc_librari": 30, "platform_specific_shared_lib": 30, "last": 30, "critic": 30, "share": 30, "librari": 30, "libcbc": 30, "dll": 30, "dylib": 30, "libcbcsolv": 30, "persist": 30, "suggest": 30, "line": [30, 36], "zshrc": 30, "bashrc": 30, "pyplot": [31, 32, 33], "plt": [31, 32, 33], "odtlearn": [31, 32, 33, 35, 38, 39], "reshap": 31, "let": 31, "investig": [31, 32], "scenario": [31, 33], "sp": [31, 35, 36], "enforc": [31, 35, 36], "displai": 31, "fcl_wo_sp": 31, "01": [31, 32, 33], "usernam": [31, 32, 33], "licens": [31, 32, 33], "non": [31, 32, 33], "commerci": [31, 32, 33], "expir": [31, 32, 33], "2024": [31, 32, 33], "06": [31, 32, 33], "timelimit": [31, 32, 33], "nodelimit": [31, 32, 33], "1073741824": [31, 32, 33], "solutionlimit": [31, 32, 33], "intfeastol": [31, 32, 33], "1e": [31, 32, 33], "v10": [31, 32, 33], "2rc0": [31, 32, 33], "mac64": [31, 32, 33], "arm": [31, 32, 33], "cpu": [31, 32, 33], "appl": [31, 32, 33], "m1": [31, 32, 33], "pro": [31, 32, 33], "count": [31, 32, 33], "physic": [31, 32, 33], "core": [31, 32, 33], "logic": [31, 32, 33], "processor": [31, 32, 33], "1192": 31, "615": 31, "3124": 31, "nonzero": [31, 32, 33], "fingerprint": [31, 32, 33], "0xe9eb7e11": 31, "601": 31, "7e": 31, "02": [31, 32, 33], "00": [31, 32, 33], "heurist": [31, 32, 38], "8700000": 31, "presolv": [31, 32, 33], "734": [31, 32], "294": [31, 32], "458": 31, "321": [31, 32], "1450": 31, "307": 31, "305": 31, "274000e": 31, "309": 31, "iter": [31, 32, 33], "unit": [31, 32, 33], "expl": [31, 32, 33], "unexpl": [31, 32, 33], "intinf": [31, 32, 33], "incumb": [31, 32, 33], "bestbd": [31, 32, 33], "gap": [31, 32, 33, 38], "74000": 31, "38": [31, 32, 33], "87000": 31, "76": [31, 32], "h": [31, 32, 33], "7700000": 31, "21": [31, 32, 33], "76500": 31, "91": [31, 32], "77000": 31, "7800000": 31, "gomori": [31, 33], "cliqu": 31, "186": 31, "mir": [31, 32, 33], "zero": [31, 36, 38], "half": 31, "rlt": 31, "explor": [31, 32, 33], "491": 31, "simplex": [31, 32, 33], "03": [31, 33], "78": [31, 33], "77": [31, 32, 33], "87": 31, "toler": [31, 32, 33], "00e": [31, 32, 33], "978000000000e": 31, "0000": [31, 32, 33], "next": [31, 35], "calcul": [31, 35], "summari": 31, "item": 31, "785714": 31, "571429": 31, "214286": 31, "428571": 31, "7142857142857143": 31, "fig": [31, 32, 33], "subplot": [31, 32, 33], "figsiz": [31, 32, 33], "fcl_w_sp": 31, "0x0654e912": 31, "241667e": 31, "401": 31, "41667": 31, "74": 31, "8300000": 31, "51": [31, 32, 33], "78500": 31, "35": [31, 32, 33], "78000": 31, "77500": 31, "62": [31, 32, 33], "7900000": 31, "24": [31, 32, 33], "8000000": 31, "120": [31, 32], "700": 31, "79": [31, 32, 33], "880000000000e": 31, "6785714285714286": 31, "fcl_wo_p": 31, "2942": 31, "0x6c429b62": 31, "888889": 31, "833333": 31, "111111": 31, "166667": 31, "600000": 31, "375000": 31, "400000": 31, "625000": 31, "fcl_w_pe": 31, "0x244097c5": 31, "4e": [31, 32], "1181": 31, "593": 31, "61": [31, 32, 33], "8500000": 31, "961667e": 31, "61667": 31, "85000": 31, "32": [31, 32, 33], "61500": 31, "gub": 31, "85": [31, 32, 33], "485000000000e": 31, "5357142857142857": 31, "25": [31, 32, 33], "onehotencod": 32, "number_of_child_list": 32, "age_list": 32, "20": [32, 33], "40": [32, 33], "race_list": 32, "black": 32, "white": 32, "hispan": 32, "sex_list": 32, "zip": 32, "sex": 32, "num_child": 32, "ag": [32, 36, 39], "df_enc": 32, "sex_m": 32, "race_black": 32, "race_hispan": 32, "race_whit": 32, "num_child_1": 32, "num_child_2": 32, "num_child_3": 32, "num_child_4": 32, "age_10": 32, "age_20": 32, "age_30": 32, "age_40": 32, "part": 32, "studi": 32, "simpl": 32, "combin": [32, 35, 39], "intuit": 32, "thei": [32, 35, 36], "affect": 32, "singl": 32, "110": 32, "89": 32, "250": 32, "0x5e9209d1": 32, "84": 32, "102": 32, "82": [32, 33], "0000000": [32, 33], "000000e": 32, "00000": [32, 33], "04": [32, 33], "000000000000e": 32, "_solver": [32, 35], "7692307692307693": 32, "As": [32, 33, 36, 40], "abov": [32, 36], "consol": 32, "x_0": 32, "now": [32, 33, 35], "increas": [32, 33, 35, 36, 38], "achiev": [32, 35], "higher": [32, 38], "274": 32, "209": 32, "642": 32, "0x51470803": 32, "196": 32, "187": 32, "300000e": [32, 33], "300000000000e": 32, "saw": 32, "fulli": 32, "high": [32, 36, 38], "justifi": [32, 36], "prune": [32, 33], "sparser": [32, 38], "drop": 32, "92": 32, "0x3e3f455b": 32, "5e": 32, "9200000": 32, "105000e": 32, "10500": 32, "92000": 32, "8600000": 32, "86": 32, "860000000000e": 32, "9230769230769231": 32, "stcl_acc": 32, "lazyconstraint": [32, 33], "44": [32, 33], "0x012b1ab9": 32, "29": [32, 33], "36": [32, 33], "46": [32, 33], "500000e": 32, "69": [32, 33], "80000": 32, "66667": 32, "43": [32, 33], "221": 32, "sec": [32, 33], "8666666666666667": 32, "23": [32, 33], "stcl_balanc": 32, "314": 32, "237": 32, "0x3bc6df12": 32, "224": 32, "2e": [32, 33], "269": 32, "203": 32, "45": [32, 33], "34": [32, 33], "134": 32, "5000000": [32, 33], "31": [32, 33], "75000": [32, 33], "50000": [32, 33], "50": [32, 33], "5288462": 32, "41": [32, 33], "6730769": 32, "67308": 32, "673077": 32, "No": 32, "730769230769e": 32, "26": [32, 33], "just": 32, "without": [32, 38], "whole": 32, "But": [32, 33], "mode": 32, "account": [32, 33, 38], "sacrif": 32, "over": [32, 33, 40], "world": 32, "__": 32, "28": [32, 33], "625": 32, "index": [32, 35], "39": [32, 33], "v2": 32, "v3": 32, "v4": 32, "v5": 32, "dtype": 32, "200": [32, 33], "618": 32, "249": 32, "0xaeff5467": 32, "463": 32, "155": 32, "610": 32, "233": 32, "147": 32, "412": 32, "7100": 32, "concurr": 32, "primal": 32, "dual": 32, "barrier": 32, "order": [32, 39], "interrupt": 32, "180000e": 32, "418": 32, "55": [32, 33], "413": 32, "60000": 32, "53": [32, 33], "308": 32, "272": 32, "52": [32, 33], "75": 32, "483": 32, "460": 32, "533": 32, "475": 32, "54": [32, 33], "290": 32, "73": 32, "1310": 32, "970": 32, "291": 32, "40000": 32, "1528": 32, "1113": 32, "344": 32, "71": 32, "1568": 32, "1140": 32, "353": 32, "62500": 32, "408": 32, "55187": 32, "70": [32, 33], "1641": 32, "1190": 32, "354": 32, "403": 32, "00436": 32, "2163": 32, "1398": 32, "293": 32, "400": 32, "54472": 32, "2327": 32, "1443": 32, "399": 32, "64465": 32, "48": [32, 33], "2375": 32, "1361": 32, "111": 32, "296": 32, "3419": 32, "1561": 32, "299": 32, "398": 32, "14472": 32, "4454": 32, "1024": 32, "312": 32, "6323": 32, "1758": 32, "351": 32, "06250": 32, "59": 32, "367": 32, "56601": 32, "12327": 32, "3931": 32, "345": 32, "59655": 32, "80": 32, "h17827": 32, "5595": 32, "338": 32, "16497": 32, "67": 32, "25506": 32, "8599": 32, "329": 32, "85714": 32, "331": 32, "h31789": 32, "9084": 32, "315": 32, "54167": [32, 33], "57": 32, "32844": 32, "9456": 32, "324": 32, "87500": 32, "56": [32, 33], "05882": 32, "h35037": 32, "8771": 32, "316": 32, "328": 32, "02174": 32, "h36500": 32, "6760": 32, "318": 32, "327": 32, "99": [32, 33], "44613": 32, "6611": 32, "57158": 32, "4133": 32, "93": 32, "94": [32, 33], "193": 32, "236": [32, 33], "70775": 32, "3292092": 32, "97": 32, "141": 32, "180000000000e": 32, "150649": 32, "65": [32, 33], "6859903381642513": 32, "dua": [32, 33], "d": [32, 33], "graff": [32, 33], "2019": [32, 33], "irvin": [32, 33], "ca": [32, 33], "school": [32, 33], "comput": [32, 33], "scienc": [32, 33], "org": [32, 35, 36, 38, 39], "ab": [32, 35, 38], "tailor": 33, "decomposit": 33, "same": [33, 36, 38, 40], "sai": [33, 38], "either": [33, 38, 39], "robust_classifi": 33, "0x78ba3dea": 33, "2500000": 33, "72": 33, "38889": 33, "25000": 33, "225000000000e": 33, "170": 33, "schema": 33, "pai": 33, "perturb": 33, "allow": [33, 35, 38], "defin": [33, 35, 39], "proxi": 33, "infinit": 33, "\u03b5": 33, "sinc": [33, 39], "47": 33, "27513": 33, "23554": 33, "22893": 33, "21106": 33, "19909": 33, "130": 33, "05": 33, "025000000000e": 33, "257": 33, "epsilon": 33, "switch": 33, "potenti": [33, 38], "With": [33, 35, 36], "would": [33, 35, 36, 39], "decreas": 33, "worst": 33, "think": 33, "els": 33, "maximum": 33, "153": 33, "500000000000e": 33, "37": 33, "ll": 33, "benefit": [33, 36], "split": 33, "sake": 33, "comparison": 33, "consid": 33, "non_robust_classifi": 33, "300": 33, "173": 33, "0xafd32360": 33, "126": 33, "169": 33, "1072": 33, "260000e": 33, "125": 33, "55000": 33, "53640": 33, "206": 33, "151": 33, "81": 33, "124": 33, "91667": 33, "934": 33, "451": 33, "112": 33, "02237": 33, "2715": 33, "519": 33, "83": 33, "95": 33, "994": 33, "3627": 33, "70039": 33, "325000000000e": 33, "7707": 33, "feat5": 33, "feat3": 33, "feat2": 33, "probabl": [33, 36, 39, 40], "certainti": 33, "randomli": 33, "practic": 33, "guess": 33, "domain": [33, 36, 38, 40], "knowledg": [33, 40], "simplic": 33, "lambda": [33, 38], "tune": [33, 40], "q_f": 33, "random": [33, 39], "seed": 33, "normal": 33, "loc": 33, "len": 33, "snap": 33, "nextaft": 33, "float32": 33, "94967142": 33, "88617357": 33, "96476885": 33, "87658466": 33, "8765863": 33, "calibr": 33, "math": 33, "275424972886112": 33, "deepcopi": 33, "astyp": 33, "feat0": 33, "feat1": 33, "feat4": 33, "989182": 33, "173081": 33, "345825": 33, "275425": 33, "0922": 33, "092213": 33, "121": 33, "122": 33, "123": 33, "472": 33, "333": 33, "24074": 33, "2519": 33, "887": 33, "3648": 33, "758": 33, "90": 33, "1319": 33, "5135": 33, "84698": 33, "950000000000e": 33, "11149": 33, "49": 33, "accuracy_scor": 33, "6666666666666666": 33, "6587301587301587": 33, "5813953488372093": 33, "5581395348837209": 33, "measur": 33, "off": 33, "known": [33, 36, 39], "distribt": 33, "well": [33, 35, 36], "def": [33, 35], "symmetr": 33, "geometr": 33, "support": 33, "sign": 33, "binomi": 33, "obtain": [33, 38], "1000": 33, "record": 33, "non_robust_acc": 33, "robust_acc": 33, "1001": 33, "x_test_perturb": 33, "non_robust_pr": 33, "robust_pr": 33, "averag": [33, 38], "4418604651162791": 33, "5116279069767442": 33, "5660930232558059": 33, "5584186046511533": 33, "openreview": [33, 40], "net": [33, 40], "pdf": [33, 36, 39, 40], "id": [33, 40], "hbasa9ysa3": [33, 40], "leverag": [35, 38], "orient": [35, 36], "simplifi": 35, "_define_side_constraint": 35, "arc": 35, "declar": 35, "word": [35, 36], "exce": 35, "desir": [35, 36], "rather": 35, "absolut": 35, "fairconstrainedonesideoct": 35, "_add_one_sided_fairness_constraint": 35, "shown": 35, "four": 35, "approach": [35, 36, 38, 39], "lead": 35, "duplic": 35, "futur": 35, "complic": 35, "__init__": 35, "super": 35, "p_df": 35, "p_prime_df": 35, "count_p": 35, "count_p_prim": 35, "constraint_ad": 35, "_zeta": 35, "_positive_class": 35, "_tree": 35, "_fairness_bound": 35, "been": 35, "still": 35, "_define_object": 35, "omit": 35, "reader": 35, "larg": 35, "mirror": 35, "fairconstrain": 35, "fairconstrainedonesidedoct": 35, "child": 35, "faironesidespoct": 35, "requir": [35, 36, 38, 39], "interv": 35, "smaller": [35, 38, 39], "stricter": 35, "avaiabl": 35, "_obj_mod": 35, "loop": 35, "protected_featur": 35, "_p_col_label": 35, "combo": 35, "_x_p": 35, "p_prime": 35, "_add_fairness_constraint": 35, "equiti": 35, "similar": [35, 36, 38, 39], "formula": 35, "paper": [35, 36, 38, 39, 40], "recent": 36, "year": 36, "maker": 36, "begun": 36, "social": 36, "sensit": 36, "stake": 36, "frequenc": 36, "decid": 36, "who": 36, "access": 36, "credit": 36, "public": 36, "servic": 36, "polic": 36, "assist": 36, "screen": 36, "job": 36, "colleg": 36, "admiss": 36, "yet": 36, "system": 36, "discrimin": 36, "treat": 36, "individu": [36, 39], "unequ": 36, "membership": 36, "categori": 36, "These": 36, "disabl": 36, "ethnic": 36, "marit": 36, "nation": 36, "religion": 36, "sexual": 36, "satisfi": 36, "most": [36, 38, 39, 40], "common": 36, "literatur": 36, "hire": 36, "interview": 36, "someon": 36, "invit": 36, "regard": 36, "fairtreeclassifi": 36, "abl": 36, "strictli": 36, "becom": 36, "strict": 36, "introduc": 36, "showcas": 36, "pe": 36, "receiv": [36, 39], "mention": 36, "appropri": 36, "impos": 36, "meritori": 36, "choos": 36, "experienc": 36, "homeless": 36, "scarc": 36, "hous": 36, "resourc": 36, "natur": [36, 38], "vulner": 36, "risk": 36, "score": [36, 39], "csp": 36, "convict": 36, "person": [36, 39], "recidiv": 36, "releas": 36, "bail": 36, "inde": 36, "context": 36, "defend": 36, "gone": 36, "detent": 36, "One": [36, 38], "eopp": 36, "matter": 36, "admit": 36, "qualifi": 36, "unqualifi": 36, "eodd": 36, "side": 37, "popular": 38, "inher": 38, "revenu": 38, "medicin": 38, "bioinformat": 38, "crucial": 38, "exist": 38, "mathemat": [38, 40], "proof": 38, "yield": 38, "misclassif": 38, "popul": 38, "significantli": 38, "improv": 38, "tradit": 38, "much": [38, 40], "faster": 38, "unlik": 38, "strongtreeclassifi": 38, "uniform": 38, "vari": 38, "poorli": [38, 40], "occur": 38, "suicid": 38, "prevent": 38, "veri": 38, "amount": 38, "spend": 38, "onc": 38, "elaps": 38, "qualiti": 38, "far": 38, "necessari": 38, "offer": [38, 39], "novel": 38, "directli": 38, "benders_oct": 38, "becaus": [38, 39], "avoid": 38, "overfit": 38, "penal": 38, "appli": [38, 39], "encod": [38, 39], "hot": [38, 39], "slight": [38, 39], "care": [38, 39], "polici": 39, "flowopt_": 39, "imag": 39, "warfarin": 39, "dose": 39, "patient": 39, "phenotyp": 39, "past": 39, "react": 39, "drug": 39, "evalu": 39, "propos": 39, "dud\u00edk": 39, "2011": 39, "reli": 39, "reweight": 39, "histor": 39, "reliabl": 39, "unknown": 39, "execut": 39, "NOT": 39, "partit": 39, "subpopul": 39, "entir": 39, "what": 39, "happen": 39, "hand": 39, "close": 39, "trial": 39, "suffici": 39, "good": 39, "less": 39, "bias": 39, "famili": 39, "techniqu": 39, "dampen": 39, "error": 39, "brought": 39, "varianc": 39, "unsur": 39, "emploi": 39, "often": 39, "safest": 39, "advantag": 39, "miroslav": 39, "john": 39, "langford": 39, "lihong": 39, "li": 39, "proceed": 39, "28th": 39, "intern": 39, "confer": 39, "icml": 39, "collect": 40, "deploy": 40, "rare": 40, "mechan": 40, "phase": 40, "presenc": 40, "robusttreeclassifi": 40, "probabilities_to_cost": 40, "prob": 40, "entri": 40, "exchang": 40, "exclus": 40, "inclus": 40, "reason": 40, "advis": 40, "try": 40, "deriv": 40}, "objects": {"": [[11, 0, 0, "-", "odtlearn"]], "odtlearn": [[11, 1, 1, "", "ODTL"], [1, 0, 0, "-", "constants"], [2, 0, 0, "-", "constrained_oct"], [3, 0, 0, "-", "datasets"], [4, 0, 0, "-", "fair_oct"], [5, 0, 0, "-", "flow_oct"], [6, 0, 0, "-", "flow_oct_ms"], [7, 0, 0, "-", "flow_oct_ss"], [8, 0, 0, "-", "flow_opt"], [9, 0, 0, "-", "flow_opt_ms"], [10, 0, 0, "-", "flow_opt_ss"], [11, 3, 1, "", "name"], [12, 0, 0, "-", "opt_ct"], [13, 0, 0, "-", "opt_dt"], [14, 0, 0, "-", "opt_pt"], [15, 0, 0, "-", "robust_oct"], [17, 0, 0, "-", "tests"], [24, 0, 0, "-", "utils"]], "odtlearn.ODTL": [[11, 2, 1, "", "BINARY"], [11, 2, 1, "", "CONTINUOUS"], [11, 2, 1, "", "INTEGER"], [11, 2, 1, "", "MAX"], [11, 2, 1, "", "MAXIMIZE"], [11, 2, 1, "", "MIN"], [11, 2, 1, "", "MINIMIZE"]], "odtlearn.constants": [[1, 3, 1, "", "BINARY"], [1, 3, 1, "", "CONTINUOUS"], [1, 3, 1, "", "INTEGER"], [1, 3, 1, "", "MAX"], [1, 3, 1, "", "MAXIMIZE"], [1, 3, 1, "", "MIN"], [1, 3, 1, "", "MINIMIZE"]], "odtlearn.constrained_oct": [[2, 1, 1, "", "ConstrainedOCT"]], "odtlearn.datasets": [[3, 4, 1, "", "balance_scale_data"], [3, 4, 1, "", "example_2_data"], [3, 4, 1, "", "fairness_example"], [3, 4, 1, "", "flow_oct_example"], [3, 4, 1, "", "prescriptive_ex_data"], [3, 4, 1, "", "robust_example"], [3, 4, 1, "", "robustness_example"]], "odtlearn.fair_oct": [[4, 1, 1, "", "FairCSPOCT"], [4, 1, 1, "", "FairConstrainedOCT"], [4, 1, 1, "", "FairEOddsOCT"], [4, 1, 1, "", "FairEOppOCT"], [4, 1, 1, "", "FairOCT"], [4, 1, 1, "", "FairPEOCT"], [4, 1, 1, "", "FairSPOCT"]], "odtlearn.fair_oct.FairCSPOCT": [[4, 5, 1, "", "calc_metric"]], "odtlearn.fair_oct.FairConstrainedOCT": [[4, 5, 1, "", "fit"], [4, 5, 1, "", "predict"]], "odtlearn.fair_oct.FairEOppOCT": [[4, 5, 1, "", "calc_metric"]], "odtlearn.fair_oct.FairOCT": [[4, 5, 1, "", "fairness_metric_summary"], [4, 5, 1, "", "fit"], [4, 5, 1, "", "get_CSP"], [4, 5, 1, "", "get_CondEqOdds"], [4, 5, 1, "", "get_EqOdds"], [4, 5, 1, "", "get_SP"], [4, 5, 1, "", "predict"]], "odtlearn.fair_oct.FairPEOCT": [[4, 5, 1, "", "calc_metric"]], "odtlearn.fair_oct.FairSPOCT": [[4, 5, 1, "", "calc_metric"]], "odtlearn.flow_oct": [[5, 1, 1, "", "BendersOCT"], [5, 1, 1, "", "FlowOCT"]], "odtlearn.flow_oct.BendersOCT": [[5, 5, 1, "", "fit"], [5, 5, 1, "", "predict"]], "odtlearn.flow_oct.FlowOCT": [[5, 5, 1, "", "fit"], [5, 5, 1, "", "predict"]], "odtlearn.flow_oct_ms": [[6, 1, 1, "", "FlowOCTMultipleSink"]], "odtlearn.flow_oct_ss": [[7, 1, 1, "", "FlowOCTSingleSink"]], "odtlearn.flow_opt": [[8, 1, 1, "", "FlowOPT_DM"], [8, 1, 1, "", "FlowOPT_DR"], [8, 1, 1, "", "FlowOPT_IPW"]], "odtlearn.flow_opt.FlowOPT_DM": [[8, 5, 1, "", "fit"], [8, 5, 1, "", "predict"]], "odtlearn.flow_opt.FlowOPT_DR": [[8, 5, 1, "", "fit"], [8, 5, 1, "", "predict"]], "odtlearn.flow_opt.FlowOPT_IPW": [[8, 5, 1, "", "fit"], [8, 5, 1, "", "predict"]], "odtlearn.flow_opt_ms": [[9, 1, 1, "", "FlowOPTMultipleSink"]], "odtlearn.flow_opt_ss": [[10, 1, 1, "", "FlowOPTSingleSink"]], "odtlearn.opt_ct": [[12, 1, 1, "", "OptimalClassificationTree"]], "odtlearn.opt_ct.OptimalClassificationTree": [[12, 5, 1, "", "plot_tree"], [12, 5, 1, "", "print_tree"]], "odtlearn.opt_dt": [[13, 1, 1, "", "OptimalDecisionTree"]], "odtlearn.opt_dt.OptimalDecisionTree": [[13, 5, 1, "", "fit"], [13, 5, 1, "", "predict"]], "odtlearn.opt_pt": [[14, 1, 1, "", "OptimalPrescriptiveTree"]], "odtlearn.opt_pt.OptimalPrescriptiveTree": [[14, 5, 1, "", "plot_tree"], [14, 5, 1, "", "print_tree"]], "odtlearn.robust_oct": [[15, 1, 1, "", "RobustOCT"]], "odtlearn.robust_oct.RobustOCT": [[15, 5, 1, "", "fit"], [15, 5, 1, "", "plot_tree"], [15, 5, 1, "", "predict"], [15, 5, 1, "", "print_tree"]], "odtlearn.tests": [[16, 0, 0, "-", "conftest"]], "odtlearn.tests.conftest": [[16, 4, 1, "", "pytest_addoption"], [16, 4, 1, "", "pytest_configure"], [16, 4, 1, "", "skip_solver"]], "odtlearn.utils": [[18, 0, 0, "-", "Tree"], [19, 0, 0, "-", "TreePlotter"], [20, 0, 0, "-", "_reingold_tilford"], [21, 0, 0, "-", "binarize"], [22, 0, 0, "-", "callback_helpers"], [23, 0, 0, "-", "callbacks"], [25, 0, 0, "-", "mip_cbc"], [26, 0, 0, "-", "solver"], [27, 0, 0, "-", "validation"]], "odtlearn.utils.TreePlotter": [[19, 1, 1, "", "MPLPlotter"]], "odtlearn.utils.TreePlotter.MPLPlotter": [[19, 5, 1, "", "export"], [19, 5, 1, "", "get_fill_color"], [19, 5, 1, "", "node_to_str"], [19, 5, 1, "", "recurse"]], "odtlearn.utils._reingold_tilford": [[20, 1, 1, "", "DrawTree"], [20, 1, 1, "", "Tree"], [20, 4, 1, "", "ancestor"], [20, 4, 1, "", "apportion"], [20, 4, 1, "", "buchheim"], [20, 4, 1, "", "execute_shifts"], [20, 4, 1, "", "first_walk"], [20, 4, 1, "", "move_subtree"], [20, 4, 1, "", "second_walk"], [20, 4, 1, "", "third_walk"]], "odtlearn.utils._reingold_tilford.DrawTree": [[20, 5, 1, "", "get_lmost_sibling"], [20, 5, 1, "", "lbrother"], [20, 5, 1, "", "left"], [20, 2, 1, "", "lmost_sibling"], [20, 5, 1, "", "max_extents"], [20, 5, 1, "", "right"]], "odtlearn.utils.binarize": [[21, 4, 1, "", "binarize"]], "odtlearn.utils.callback_helpers": [[22, 4, 1, "", "get_all_terminal_paths"], [22, 4, 1, "", "get_cut_expression"], [22, 4, 1, "", "get_cut_integer"], [22, 4, 1, "", "get_left_exp_integer"], [22, 4, 1, "", "get_nominal_path"], [22, 4, 1, "", "get_right_exp_integer"], [22, 4, 1, "", "get_target_exp_integer"], [22, 4, 1, "", "shortest_path_solver"]], "odtlearn.utils.callbacks": [[23, 1, 1, "", "BendersCallback"], [23, 1, 1, "", "RobustBendersCallback"], [23, 4, 1, "", "benders_subproblem"], [23, 4, 1, "", "robust_tree_subproblem"]], "odtlearn.utils.callbacks.BendersCallback": [[23, 5, 1, "", "generate_constrs"]], "odtlearn.utils.callbacks.RobustBendersCallback": [[23, 5, 1, "", "generate_constrs"]], "odtlearn.utils.mip_cbc": [[25, 3, 1, "", "CHAR_ONE"], [25, 3, 1, "", "CHAR_ZERO"], [25, 3, 1, "", "Cbc_computeFeatures"], [25, 3, 1, "", "Cbc_featureName"], [25, 3, 1, "", "Cbc_generateCuts"], [25, 3, 1, "", "Cbc_getSolverPtr"], [25, 3, 1, "", "Cbc_nFeatures"], [25, 3, 1, "", "Cbc_reset"], [25, 3, 1, "", "Cbc_setDblParam"], [25, 3, 1, "", "Cbc_setIntParam"], [25, 3, 1, "", "Cbc_solveLinearProgram"], [25, 3, 1, "", "DBL_PARAM_ALLOWABLE_GAP"], [25, 3, 1, "", "DBL_PARAM_CUTOFF"], [25, 3, 1, "", "DBL_PARAM_DUAL_TOL"], [25, 3, 1, "", "DBL_PARAM_GAP_RATIO"], [25, 3, 1, "", "DBL_PARAM_INT_TOL"], [25, 3, 1, "", "DBL_PARAM_MAX_SECS_NOT_IMPROV_FS"], [25, 3, 1, "", "DBL_PARAM_PRESOLVE_TOL"], [25, 3, 1, "", "DBL_PARAM_PRIMAL_TOL"], [25, 3, 1, "", "DBL_PARAM_PSI"], [25, 3, 1, "", "DBL_PARAM_TIME_LIMIT"], [25, 3, 1, "", "DBL_PARAM_ZERO_TOL"], [25, 3, 1, "", "DEF_PUMPP"], [25, 3, 1, "", "INF"], [25, 3, 1, "", "INT_PARAM_CGRAPH"], [25, 3, 1, "", "INT_PARAM_CLIQUE_MERGING"], [25, 3, 1, "", "INT_PARAM_CUT_DEPTH"], [25, 3, 1, "", "INT_PARAM_CUT_PASS"], [25, 3, 1, "", "INT_PARAM_CUT_PASS_IN_TREE"], [25, 3, 1, "", "INT_PARAM_ELAPSED_TIME"], [25, 3, 1, "", "INT_PARAM_FPUMP_ITS"], [25, 3, 1, "", "INT_PARAM_IDIOT"], [25, 3, 1, "", "INT_PARAM_LOG_LEVEL"], [25, 3, 1, "", "INT_PARAM_MAX_NODES"], [25, 3, 1, "", "INT_PARAM_MAX_NODES_NOT_IMPROV_FS"], [25, 3, 1, "", "INT_PARAM_MAX_SAVED_SOLS"], [25, 3, 1, "", "INT_PARAM_MAX_SOLS"], [25, 3, 1, "", "INT_PARAM_MULTIPLE_ROOTS"], [25, 3, 1, "", "INT_PARAM_NUMBER_BEFORE"], [25, 3, 1, "", "INT_PARAM_PERT_VALUE"], [25, 3, 1, "", "INT_PARAM_RANDOM_SEED"], [25, 3, 1, "", "INT_PARAM_ROUND_INT_VARS"], [25, 3, 1, "", "INT_PARAM_STRONG_BRANCHING"], [25, 3, 1, "", "INT_PARAM_THREADS"], [25, 3, 1, "", "MAX_NAME_SIZE"], [25, 1, 1, "", "ModelOsi"], [25, 3, 1, "", "OsiCuts_addGlobalRowCut"], [25, 3, 1, "", "OsiCuts_addRowCut"], [25, 3, 1, "", "OsiCuts_coefRowCut"], [25, 3, 1, "", "OsiCuts_delete"], [25, 3, 1, "", "OsiCuts_idxRowCut"], [25, 3, 1, "", "OsiCuts_new"], [25, 3, 1, "", "OsiCuts_nzRowCut"], [25, 3, 1, "", "OsiCuts_rhsRowCut"], [25, 3, 1, "", "OsiCuts_senseRowCut"], [25, 3, 1, "", "OsiCuts_sizeRowCuts"], [25, 3, 1, "", "Osi_getColSolution"], [25, 3, 1, "", "Osi_getIntegerTolerance"], [25, 3, 1, "", "Osi_getNumCols"], [25, 3, 1, "", "Osi_isInteger"], [25, 3, 1, "", "Osi_isProvenOptimal"], [25, 1, 1, "", "SolverCbc"], [25, 1, 1, "", "SolverOsi"], [25, 4, 1, "", "cbc_set_parameter"], [25, 3, 1, "", "cut_idx"], [25, 4, 1, "", "feature_names"], [25, 3, 1, "", "ffi"], [25, 3, 1, "", "has_cbc"], [25, 3, 1, "", "logger"], [25, 3, 1, "", "os_is_64_bit"], [25, 3, 1, "", "pathmip"], [25, 3, 1, "", "warningMessages"]], "odtlearn.utils.mip_cbc.ModelOsi": [[25, 5, 1, "", "add_constr"]], "odtlearn.utils.mip_cbc.SolverCbc": [[25, 5, 1, "", "add_constr"], [25, 5, 1, "", "add_cut"], [25, 5, 1, "", "add_lazy_constr"], [25, 5, 1, "", "add_sos"], [25, 5, 1, "", "add_var"], [25, 5, 1, "", "cgraph_density"], [25, 5, 1, "", "clique_merge"], [25, 5, 1, "", "conflicting"], [25, 5, 1, "", "conflicting_nodes"], [25, 5, 1, "", "constr_get_expr"], [25, 5, 1, "", "constr_get_index"], [25, 5, 1, "", "constr_get_name"], [25, 5, 1, "", "constr_get_pi"], [25, 5, 1, "", "constr_get_rhs"], [25, 5, 1, "", "constr_get_slack"], [25, 5, 1, "", "constr_set_rhs"], [25, 5, 1, "", "feature_values"], [25, 5, 1, "", "generate_cuts"], [25, 5, 1, "", "get_cutoff"], [25, 5, 1, "", "get_emphasis"], [25, 5, 1, "", "get_log"], [25, 5, 1, "", "get_max_nodes"], [25, 5, 1, "", "get_max_seconds"], [25, 5, 1, "", "get_max_solutions"], [25, 5, 1, "", "get_mip_gap"], [25, 5, 1, "", "get_mip_gap_abs"], [25, 5, 1, "", "get_num_solutions"], [25, 5, 1, "", "get_objective"], [25, 5, 1, "", "get_objective_bound"], [25, 5, 1, "", "get_objective_const"], [25, 5, 1, "", "get_objective_sense"], [25, 5, 1, "", "get_objective_value"], [25, 5, 1, "", "get_objective_value_i"], [25, 5, 1, "", "get_problem_name"], [25, 5, 1, "", "get_pump_passes"], [25, 5, 1, "", "get_status"], [25, 5, 1, "", "get_verbose"], [25, 5, 1, "", "num_cols"], [25, 5, 1, "", "num_int"], [25, 5, 1, "", "num_nz"], [25, 5, 1, "", "num_rows"], [25, 5, 1, "", "optimize"], [25, 5, 1, "", "read"], [25, 5, 1, "", "relax"], [25, 5, 1, "", "remove_constrs"], [25, 5, 1, "", "remove_vars"], [25, 5, 1, "", "reset"], [25, 5, 1, "", "set_cutoff"], [25, 5, 1, "", "set_emphasis"], [25, 5, 1, "", "set_max_nodes"], [25, 5, 1, "", "set_max_seconds"], [25, 5, 1, "", "set_max_solutions"], [25, 5, 1, "", "set_mip_gap"], [25, 5, 1, "", "set_mip_gap_abs"], [25, 5, 1, "", "set_num_threads"], [25, 5, 1, "", "set_objective"], [25, 5, 1, "", "set_objective_sense"], [25, 5, 1, "", "set_problem_name"], [25, 5, 1, "", "set_processing_limits"], [25, 5, 1, "", "set_pump_passes"], [25, 5, 1, "", "set_start"], [25, 5, 1, "", "set_verbose"], [25, 5, 1, "", "update_conflict_graph"], [25, 5, 1, "", "var_get_branch_priority"], [25, 5, 1, "", "var_get_column"], [25, 5, 1, "", "var_get_index"], [25, 5, 1, "", "var_get_lb"], [25, 5, 1, "", "var_get_name"], [25, 5, 1, "", "var_get_obj"], [25, 5, 1, "", "var_get_rc"], [25, 5, 1, "", "var_get_ub"], [25, 5, 1, "", "var_get_var_type"], [25, 5, 1, "", "var_get_x"], [25, 5, 1, "", "var_get_xi"], [25, 5, 1, "", "var_set_column"], [25, 5, 1, "", "var_set_lb"], [25, 5, 1, "", "var_set_obj"], [25, 5, 1, "", "var_set_ub"], [25, 5, 1, "", "var_set_var_type"], [25, 5, 1, "", "write"]], "odtlearn.utils.mip_cbc.SolverOsi": [[25, 5, 1, "", "add_constr"], [25, 5, 1, "", "add_cut"], [25, 5, 1, "", "add_lazy_constr"], [25, 5, 1, "", "add_var"], [25, 5, 1, "", "constr_get_expr"], [25, 5, 1, "", "constr_get_index"], [25, 5, 1, "", "constr_get_name"], [25, 5, 1, "", "constr_get_pi"], [25, 5, 1, "", "constr_get_slack"], [25, 5, 1, "", "constr_set_expr"], [25, 5, 1, "", "get_cutoff"], [25, 5, 1, "", "get_emphasis"], [25, 5, 1, "", "get_log"], [25, 5, 1, "", "get_max_nodes"], [25, 5, 1, "", "get_max_seconds"], [25, 5, 1, "", "get_max_solutions"], [25, 5, 1, "", "get_mip_gap"], [25, 5, 1, "", "get_mip_gap_abs"], [25, 5, 1, "", "get_num_solutions"], [25, 5, 1, "", "get_objective"], [25, 5, 1, "", "get_objective_bound"], [25, 5, 1, "", "get_objective_const"], [25, 5, 1, "", "get_objective_sense"], [25, 5, 1, "", "get_objective_value"], [25, 5, 1, "", "get_objective_value_i"], [25, 5, 1, "", "get_problem_name"], [25, 5, 1, "", "get_pump_passes"], [25, 5, 1, "", "get_status"], [25, 5, 1, "", "get_verbose"], [25, 5, 1, "", "num_cols"], [25, 5, 1, "", "num_int"], [25, 5, 1, "", "num_nz"], [25, 5, 1, "", "num_rows"], [25, 5, 1, "", "optimize"], [25, 5, 1, "", "read"], [25, 5, 1, "", "relax"], [25, 5, 1, "", "remove_constrs"], [25, 5, 1, "", "remove_vars"], [25, 5, 1, "", "set_cutoff"], [25, 5, 1, "", "set_emphasis"], [25, 5, 1, "", "set_max_nodes"], [25, 5, 1, "", "set_max_seconds"], [25, 5, 1, "", "set_max_solutions"], [25, 5, 1, "", "set_mip_gap"], [25, 5, 1, "", "set_mip_gap_abs"], [25, 5, 1, "", "set_num_threads"], [25, 5, 1, "", "set_objective"], [25, 5, 1, "", "set_objective_const"], [25, 5, 1, "", "set_objective_sense"], [25, 5, 1, "", "set_problem_name"], [25, 5, 1, "", "set_processing_limits"], [25, 5, 1, "", "set_pump_passes"], [25, 5, 1, "", "set_start"], [25, 5, 1, "", "set_verbose"], [25, 5, 1, "", "var_get_branch_priority"], [25, 5, 1, "", "var_get_column"], [25, 5, 1, "", "var_get_index"], [25, 5, 1, "", "var_get_lb"], [25, 5, 1, "", "var_get_name"], [25, 5, 1, "", "var_get_obj"], [25, 5, 1, "", "var_get_rc"], [25, 5, 1, "", "var_get_ub"], [25, 5, 1, "", "var_get_var_type"], [25, 5, 1, "", "var_get_x"], [25, 5, 1, "", "var_get_xi"], [25, 5, 1, "", "var_set_branch_priority"], [25, 5, 1, "", "var_set_column"], [25, 5, 1, "", "var_set_lb"], [25, 5, 1, "", "var_set_obj"], [25, 5, 1, "", "var_set_ub"], [25, 5, 1, "", "var_set_var_type"], [25, 5, 1, "", "write"]], "odtlearn.utils.solver": [[26, 3, 1, "", "GRB_CBC_CONST_MAP"], [26, 1, 1, "", "Solver"]], "odtlearn.utils.solver.Solver": [[26, 5, 1, "", "add_constr"], [26, 5, 1, "", "add_constrs"], [26, 5, 1, "", "add_vars"], [26, 5, 1, "", "get_var_value"], [26, 5, 1, "", "lin_expr"], [26, 6, 1, "", "num_constraints"], [26, 6, 1, "", "num_decision_vars"], [26, 6, 1, "", "num_integer_vars"], [26, 6, 1, "", "num_non_zero"], [26, 6, 1, "", "num_solutions"], [26, 6, 1, "", "optim_gap"], [26, 5, 1, "", "optimize"], [26, 5, 1, "", "prep_indices"], [26, 5, 1, "", "quicksum"], [26, 6, 1, "", "search_progress_log"], [26, 5, 1, "", "set_objective"], [26, 5, 1, "", "store_data"]], "odtlearn.utils.validation": [[27, 4, 1, "", "check_binary"], [27, 4, 1, "", "check_columns_match"], [27, 4, 1, "", "check_integer"], [27, 4, 1, "", "check_ipw"], [27, 4, 1, "", "check_same_as_X"], [27, 4, 1, "", "check_y"], [27, 4, 1, "", "check_y_hat"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:attribute", "3": "py:data", "4": "py:function", "5": "py:method", "6": "py:property"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "attribute", "Python attribute"], "3": ["py", "data", "Python data"], "4": ["py", "function", "Python function"], "5": ["py", "method", "Python method"], "6": ["py", "property", "Python property"]}, "titleterms": {"odtlearn": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30], "api": 0, "constant": 1, "modul": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 19, 20, 21, 22, 23, 25, 26, 27], "content": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 19, 20, 21, 22, 23, 25, 26, 27], "constrained_oct": 2, "class": [2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 19, 20, 23, 25, 26], "dataset": 3, "function": [3, 16, 20, 21, 22, 23, 25, 27, 32, 39], "fair_oct": 4, "return": 4, "flow_oct": 5, "flow_oct_m": 6, "flow_oct_ss": 7, "flow_opt": 8, "flow_opt_m": 9, "flow_opt_ss": 10, "subpackag": 11, "submodul": [11, 24], "packag": 11, "attribut": [11, 25, 26], "opt_ct": 12, "opt_dt": 13, "opt_pt": 14, "robust_oct": 15, "test": [16, 17], "conftest": 16, "util": [18, 19, 20, 21, 22, 23, 24, 25, 26, 27], "tree": [18, 32, 35, 36, 38, 39, 40], "treeplott": 19, "_reingold_tilford": 20, "binar": [21, 32], "callback_help": 22, "callback": 23, "mip_cbc": 25, "solver": 26, "valid": 27, "how": 28, "contribut": 28, "code": 28, "conduct": 28, "improv": 28, "document": [28, 29], "file": 28, "bug": 28, "report": 28, "what": 29, "i": 29, "resourc": 29, "get": 29, "start": 29, "structur": 29, "usag": 29, "exampl": [29, 31, 32, 33, 34], "refer": [29, 32, 33, 36, 38, 39, 40], "instal": 30, "guid": [30, 37], "python": 30, "obtain": 30, "gurobi": 30, "licens": 30, "cbc": 30, "binari": 30, "fairoct": 31, "evalu": 31, "statist": [31, 36], "pariti": [31, 36], "without": [31, 33], "fair": [31, 36], "constraint": [31, 35], "fairbound": 31, "0": [31, 32], "1": [31, 32, 33, 39], "pe": 31, "04": 31, "flowoct": 32, "vari": 32, "depth": 32, "_lambda": 32, "2": [32, 33, 39], "posit": 32, "differ": 32, "object": [32, 38, 39], "classif": [32, 35, 36, 38, 40], "accuraci": 32, "balanc": 32, "3": [32, 33, 39], "uci": [32, 33], "data": [32, 33], "robustoct": 33, "synthet": 33, "specifi": [33, 40], "shift": [33, 40], "notebook": 34, "ad": 35, "side": 35, "optim": [35, 36, 38, 39, 40], "metric": 36, "condit": 36, "predict": 36, "equal": 36, "opportun": 36, "odd": 36, "user": 37, "choos": 38, "an": 38, "speed": 38, "up": 38, "comput": 38, "bender": 38, "decomposit": 38, "regular": 38, "handl": [38, 39], "integ": [38, 39], "featur": [38, 39], "prescript": 39, "choic": 39, "invers": 39, "propens": 39, "weight": 39, "ipw": 39, "direct": 39, "method": 39, "dm": 39, "doubli": 39, "robust": [39, 40], "dr": 39, "distribut": 40}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx.ext.viewcode": 1, "nbsphinx": 4, "sphinx": 58}, "alltitles": {"ODTlearn API": [[0, "odtlearn-api"]], "odtlearn.constants": [[1, "module-odtlearn.constants"]], "Module Contents": [[1, "module-contents"], [2, "module-contents"], [3, "module-contents"], [4, "module-contents"], [5, "module-contents"], [6, "module-contents"], [7, "module-contents"], [8, "module-contents"], [9, "module-contents"], [10, "module-contents"], [12, "module-contents"], [13, "module-contents"], [14, "module-contents"], [15, "module-contents"], [16, "module-contents"], [19, "module-contents"], [20, "module-contents"], [21, "module-contents"], [22, "module-contents"], [23, "module-contents"], [25, "module-contents"], [26, "module-contents"], [27, "module-contents"]], "odtlearn.constrained_oct": [[2, "module-odtlearn.constrained_oct"]], "Classes": [[2, "classes"], [4, "classes"], [5, "classes"], [6, "classes"], [7, "classes"], [8, "classes"], [9, "classes"], [10, "classes"], [11, "classes"], [12, "classes"], [13, "classes"], [14, "classes"], [15, "classes"], [19, "classes"], [20, "classes"], [23, "classes"], [25, "classes"], [26, "classes"]], "odtlearn.datasets": [[3, "module-odtlearn.datasets"]], "Functions": [[3, "functions"], [16, "functions"], [20, "functions"], [21, "functions"], [22, "functions"], [23, "functions"], [25, "functions"], [27, "functions"]], "odtlearn.fair_oct": [[4, "module-odtlearn.fair_oct"]], "Returns": [[4, "returns"]], "odtlearn.flow_oct": [[5, "module-odtlearn.flow_oct"]], "odtlearn.flow_oct_ms": [[6, "module-odtlearn.flow_oct_ms"]], "odtlearn.flow_oct_ss": [[7, "module-odtlearn.flow_oct_ss"]], "odtlearn.flow_opt": [[8, "module-odtlearn.flow_opt"]], "odtlearn.flow_opt_ms": [[9, "module-odtlearn.flow_opt_ms"]], "odtlearn.flow_opt_ss": [[10, "module-odtlearn.flow_opt_ss"]], "odtlearn": [[11, "module-odtlearn"]], "Subpackages": [[11, "subpackages"]], "Submodules": [[11, "submodules"], [24, "submodules"]], "Package Contents": [[11, "package-contents"]], "Attributes": [[11, "attributes"], [25, "attributes"], [26, "attributes"]], "odtlearn.opt_ct": [[12, "module-odtlearn.opt_ct"]], "odtlearn.opt_dt": [[13, "module-odtlearn.opt_dt"]], "odtlearn.opt_pt": [[14, "module-odtlearn.opt_pt"]], "odtlearn.robust_oct": [[15, "module-odtlearn.robust_oct"]], "odtlearn.tests.conftest": [[16, "module-odtlearn.tests.conftest"]], "odtlearn.tests": [[17, "module-odtlearn.tests"]], "odtlearn.utils.Tree": [[18, "module-odtlearn.utils.Tree"]], "odtlearn.utils.TreePlotter": [[19, "module-odtlearn.utils.TreePlotter"]], "odtlearn.utils._reingold_tilford": [[20, "module-odtlearn.utils._reingold_tilford"]], "odtlearn.utils.binarize": [[21, "module-odtlearn.utils.binarize"]], "odtlearn.utils.callback_helpers": [[22, "module-odtlearn.utils.callback_helpers"]], "odtlearn.utils.callbacks": [[23, "module-odtlearn.utils.callbacks"]], "odtlearn.utils": [[24, "module-odtlearn.utils"]], "odtlearn.utils.mip_cbc": [[25, "module-odtlearn.utils.mip_cbc"]], "odtlearn.utils.solver": [[26, "module-odtlearn.utils.solver"]], "odtlearn.utils.validation": [[27, "module-odtlearn.utils.validation"]], "How to contribute to ODTlearn": [[28, "how-to-contribute-to-odtlearn"]], "Code of Conduct": [[28, "code-of-conduct"]], "Improve the documentation": [[28, "improve-the-documentation"]], "File a bug report": [[28, "file-a-bug-report"]], "What is ODTlearn?": [[29, "what-is-odtlearn"]], "Resources for Getting Started": [[29, "resources-for-getting-started"]], "Documentation Structure": [[29, "documentation-structure"]], "Usage Example": [[29, "usage-example"]], "References": [[29, "references"], [32, "References"], [33, "References"], [36, "references"], [38, "references"], [39, "references"], [40, "references"]], "Installation Guide": [[30, "installation-guide"]], "Install Python": [[30, "install-python"]], "Install ODTlearn": [[30, "install-odtlearn"]], "Obtain Gurobi License": [[30, "obtain-gurobi-license"]], "CBC Binaries": [[30, "cbc-binaries"]], "FairOCT Example": [[31, "FairOCT-Example"]], "Evaluating Statistical Parity without Fairness Constraint": [[31, "Evaluating-Statistical-Parity-without-Fairness-Constraint"]], "Evaluating Statistical Parity with Fairbound=0.1": [[31, "Evaluating-Statistical-Parity-with-Fairbound=0.1"]], "Evaluating PE Without Fairness Constraint": [[31, "Evaluating-PE-Without-Fairness-Constraint"]], "Evaluating PE with Fairbound=0.04": [[31, "Evaluating-PE-with-Fairbound=0.04"]], "FlowOCT Examples": [[32, "FlowOCT-Examples"]], "Example 0: Binarization": [[32, "Example-0:-Binarization"]], "Example 1: Varying depth and _lambda": [[32, "Example-1:-Varying-depth-and-_lambda"]], "Tree with depth = 1": [[32, "Tree-with-depth-=-1"]], "Tree with depth = 2": [[32, "Tree-with-depth-=-2"]], "Tree with depth=2 and Positive _lambda": [[32, "Tree-with-depth=2-and-Positive-_lambda"]], "Example 2: Different Objective Functions": [[32, "Example-2:-Different-Objective-Functions"]], "Tree with classification accuracy objective": [[32, "Tree-with-classification-accuracy-objective"]], "Tree with Balanced Classification Accuracy Objective": [[32, "Tree-with-Balanced-Classification-Accuracy-Objective"]], "Example 3: UCI Data Example": [[32, "Example-3:-UCI-Data-Example"]], "RobustOCT Examples": [[33, "RobustOCT-Examples"]], "Example 1: Synthetic Data Without Specified Shifts": [[33, "Example-1:-Synthetic-Data-Without-Specified-Shifts"]], "Example 2: synthetic data with specified shifts": [[33, "Example-2:-synthetic-data-with-specified-shifts"]], "Example 3: UCI data example": [[33, "Example-3:-UCI-data-example"]], "Example Notebooks": [[34, "example-notebooks"]], "Adding side constraints to optimal classification trees": [[35, "adding-side-constraints-to-optimal-classification-trees"]], "Fair Optimal Classification Trees": [[36, "fair-optimal-classification-trees"]], "Fairness Metrics": [[36, "fairness-metrics"]], "Statistical Parity": [[36, "statistical-parity"]], "Conditional Statistical Parity": [[36, "conditional-statistical-parity"]], "Predictive Equality": [[36, "predictive-equality"]], "Equal Opportunity": [[36, "equal-opportunity"]], "Equalized Odds": [[36, "equalized-odds"]], "User Guide": [[37, "user-guide"]], "Optimal Classification Trees": [[38, "optimal-classification-trees"]], "Choosing an Objective to Optimize": [[38, "choosing-an-objective-to-optimize"]], "Optimality": [[38, "optimality"]], "Speeding up Computation: Benders\u2019 Decomposition": [[38, "speeding-up-computation-benders-decomposition"]], "Regularization": [[38, "regularization"]], "Handling Integer Features": [[38, "handling-integer-features"], [39, "handling-integer-features"]], "Optimal Prescriptive Trees": [[39, "optimal-prescriptive-trees"]], "Objective Function Choices": [[39, "objective-function-choices"]], "1. Inverse Propensity Weighting (IPW)": [[39, "inverse-propensity-weighting-ipw"]], "2. Direct Method (DM)": [[39, "direct-method-dm"]], "3. Doubly Robust Method (DR)": [[39, "doubly-robust-method-dr"]], "Robust Optimal Classification Trees": [[40, "robust-optimal-classification-trees"]], "Specifying the Distribution Shift": [[40, "specifying-the-distribution-shift"]]}, "indexentries": {"binary (in module odtlearn.constants)": [[1, "odtlearn.constants.BINARY"]], "continuous (in module odtlearn.constants)": [[1, "odtlearn.constants.CONTINUOUS"]], "integer (in module odtlearn.constants)": [[1, "odtlearn.constants.INTEGER"]], "max (in module odtlearn.constants)": [[1, "odtlearn.constants.MAX"]], "maximize (in module odtlearn.constants)": [[1, "odtlearn.constants.MAXIMIZE"]], "min (in module odtlearn.constants)": [[1, "odtlearn.constants.MIN"]], "minimize (in module odtlearn.constants)": [[1, "odtlearn.constants.MINIMIZE"]], "module": [[1, "module-odtlearn.constants"], [2, "module-odtlearn.constrained_oct"], [3, "module-odtlearn.datasets"], [4, "module-odtlearn.fair_oct"], [5, "module-odtlearn.flow_oct"], [6, "module-odtlearn.flow_oct_ms"], [7, "module-odtlearn.flow_oct_ss"], [8, "module-odtlearn.flow_opt"], [9, "module-odtlearn.flow_opt_ms"], [10, "module-odtlearn.flow_opt_ss"], [11, "module-odtlearn"], [12, "module-odtlearn.opt_ct"], [13, "module-odtlearn.opt_dt"], [14, "module-odtlearn.opt_pt"], [15, "module-odtlearn.robust_oct"], [16, "module-odtlearn.tests.conftest"], [17, "module-odtlearn.tests"], [18, "module-odtlearn.utils.Tree"], [19, "module-odtlearn.utils.TreePlotter"], [20, "module-odtlearn.utils._reingold_tilford"], [21, "module-odtlearn.utils.binarize"], [22, "module-odtlearn.utils.callback_helpers"], [23, "module-odtlearn.utils.callbacks"], [24, "module-odtlearn.utils"], [25, "module-odtlearn.utils.mip_cbc"], [26, "module-odtlearn.utils.solver"], [27, "module-odtlearn.utils.validation"]], "odtlearn.constants": [[1, "module-odtlearn.constants"]], "constrainedoct (class in odtlearn.constrained_oct)": [[2, "odtlearn.constrained_oct.ConstrainedOCT"]], "odtlearn.constrained_oct": [[2, "module-odtlearn.constrained_oct"]], "balance_scale_data() (in module odtlearn.datasets)": [[3, "odtlearn.datasets.balance_scale_data"]], "example_2_data() (in module odtlearn.datasets)": [[3, "odtlearn.datasets.example_2_data"]], "fairness_example() (in module odtlearn.datasets)": [[3, "odtlearn.datasets.fairness_example"]], "flow_oct_example() (in module odtlearn.datasets)": [[3, "odtlearn.datasets.flow_oct_example"]], "odtlearn.datasets": [[3, "module-odtlearn.datasets"]], "prescriptive_ex_data() (in module odtlearn.datasets)": [[3, "odtlearn.datasets.prescriptive_ex_data"]], "robust_example() (in module odtlearn.datasets)": [[3, "odtlearn.datasets.robust_example"]], "robustness_example() (in module odtlearn.datasets)": [[3, "odtlearn.datasets.robustness_example"]], "faircspoct (class in odtlearn.fair_oct)": [[4, "odtlearn.fair_oct.FairCSPOCT"]], "fairconstrainedoct (class in odtlearn.fair_oct)": [[4, "odtlearn.fair_oct.FairConstrainedOCT"]], "faireoddsoct (class in odtlearn.fair_oct)": [[4, "odtlearn.fair_oct.FairEOddsOCT"]], "faireoppoct (class in odtlearn.fair_oct)": [[4, "odtlearn.fair_oct.FairEOppOCT"]], "fairoct (class in odtlearn.fair_oct)": [[4, "odtlearn.fair_oct.FairOCT"]], "fairpeoct (class in odtlearn.fair_oct)": [[4, "odtlearn.fair_oct.FairPEOCT"]], "fairspoct (class in odtlearn.fair_oct)": [[4, "odtlearn.fair_oct.FairSPOCT"]], "calc_metric() (odtlearn.fair_oct.faircspoct method)": [[4, "odtlearn.fair_oct.FairCSPOCT.calc_metric"]], "calc_metric() (odtlearn.fair_oct.faireoppoct method)": [[4, "odtlearn.fair_oct.FairEOppOCT.calc_metric"]], "calc_metric() (odtlearn.fair_oct.fairpeoct method)": [[4, "odtlearn.fair_oct.FairPEOCT.calc_metric"]], "calc_metric() (odtlearn.fair_oct.fairspoct method)": [[4, "odtlearn.fair_oct.FairSPOCT.calc_metric"]], "fairness_metric_summary() (odtlearn.fair_oct.fairoct method)": [[4, "odtlearn.fair_oct.FairOCT.fairness_metric_summary"]], "fit() (odtlearn.fair_oct.fairconstrainedoct method)": [[4, "odtlearn.fair_oct.FairConstrainedOCT.fit"]], "fit() (odtlearn.fair_oct.fairoct method)": [[4, "odtlearn.fair_oct.FairOCT.fit"]], "get_csp() (odtlearn.fair_oct.fairoct method)": [[4, "odtlearn.fair_oct.FairOCT.get_CSP"]], "get_condeqodds() (odtlearn.fair_oct.fairoct method)": [[4, "odtlearn.fair_oct.FairOCT.get_CondEqOdds"]], "get_eqodds() (odtlearn.fair_oct.fairoct method)": [[4, "odtlearn.fair_oct.FairOCT.get_EqOdds"]], "get_sp() (odtlearn.fair_oct.fairoct method)": [[4, "odtlearn.fair_oct.FairOCT.get_SP"]], "odtlearn.fair_oct": [[4, "module-odtlearn.fair_oct"]], "predict() (odtlearn.fair_oct.fairconstrainedoct method)": [[4, "odtlearn.fair_oct.FairConstrainedOCT.predict"]], "predict() (odtlearn.fair_oct.fairoct method)": [[4, "odtlearn.fair_oct.FairOCT.predict"]], "bendersoct (class in odtlearn.flow_oct)": [[5, "odtlearn.flow_oct.BendersOCT"]], "flowoct (class in odtlearn.flow_oct)": [[5, "odtlearn.flow_oct.FlowOCT"]], "fit() (odtlearn.flow_oct.bendersoct method)": [[5, "odtlearn.flow_oct.BendersOCT.fit"]], "fit() (odtlearn.flow_oct.flowoct method)": [[5, "odtlearn.flow_oct.FlowOCT.fit"]], "odtlearn.flow_oct": [[5, "module-odtlearn.flow_oct"]], "predict() (odtlearn.flow_oct.bendersoct method)": [[5, "odtlearn.flow_oct.BendersOCT.predict"]], "predict() (odtlearn.flow_oct.flowoct method)": [[5, "odtlearn.flow_oct.FlowOCT.predict"]], "flowoctmultiplesink (class in odtlearn.flow_oct_ms)": [[6, "odtlearn.flow_oct_ms.FlowOCTMultipleSink"]], "odtlearn.flow_oct_ms": [[6, "module-odtlearn.flow_oct_ms"]], "flowoctsinglesink (class in odtlearn.flow_oct_ss)": [[7, "odtlearn.flow_oct_ss.FlowOCTSingleSink"]], "odtlearn.flow_oct_ss": [[7, "module-odtlearn.flow_oct_ss"]], "flowopt_dm (class in odtlearn.flow_opt)": [[8, "odtlearn.flow_opt.FlowOPT_DM"]], "flowopt_dr (class in odtlearn.flow_opt)": [[8, "odtlearn.flow_opt.FlowOPT_DR"]], "flowopt_ipw (class in odtlearn.flow_opt)": [[8, "odtlearn.flow_opt.FlowOPT_IPW"]], "fit() (odtlearn.flow_opt.flowopt_dm method)": [[8, "odtlearn.flow_opt.FlowOPT_DM.fit"]], "fit() (odtlearn.flow_opt.flowopt_dr method)": [[8, "odtlearn.flow_opt.FlowOPT_DR.fit"]], "fit() (odtlearn.flow_opt.flowopt_ipw method)": [[8, "odtlearn.flow_opt.FlowOPT_IPW.fit"]], "odtlearn.flow_opt": [[8, "module-odtlearn.flow_opt"]], "predict() (odtlearn.flow_opt.flowopt_dm method)": [[8, "odtlearn.flow_opt.FlowOPT_DM.predict"]], "predict() (odtlearn.flow_opt.flowopt_dr method)": [[8, "odtlearn.flow_opt.FlowOPT_DR.predict"]], "predict() (odtlearn.flow_opt.flowopt_ipw method)": [[8, "odtlearn.flow_opt.FlowOPT_IPW.predict"]], "flowoptmultiplesink (class in odtlearn.flow_opt_ms)": [[9, "odtlearn.flow_opt_ms.FlowOPTMultipleSink"]], "odtlearn.flow_opt_ms": [[9, "module-odtlearn.flow_opt_ms"]], "flowoptsinglesink (class in odtlearn.flow_opt_ss)": [[10, "odtlearn.flow_opt_ss.FlowOPTSingleSink"]], "odtlearn.flow_opt_ss": [[10, "module-odtlearn.flow_opt_ss"]], "binary (odtlearn.odtl attribute)": [[11, "odtlearn.ODTL.BINARY"]], "continuous (odtlearn.odtl attribute)": [[11, "odtlearn.ODTL.CONTINUOUS"]], "integer (odtlearn.odtl attribute)": [[11, "odtlearn.ODTL.INTEGER"]], "max (odtlearn.odtl attribute)": [[11, "odtlearn.ODTL.MAX"]], "maximize (odtlearn.odtl attribute)": [[11, "odtlearn.ODTL.MAXIMIZE"]], "min (odtlearn.odtl attribute)": [[11, "odtlearn.ODTL.MIN"]], "minimize (odtlearn.odtl attribute)": [[11, "odtlearn.ODTL.MINIMIZE"]], "odtl (class in odtlearn)": [[11, "odtlearn.ODTL"]], "name (in module odtlearn)": [[11, "odtlearn.name"]], "odtlearn": [[11, "module-odtlearn"]], "optimalclassificationtree (class in odtlearn.opt_ct)": [[12, "odtlearn.opt_ct.OptimalClassificationTree"]], "odtlearn.opt_ct": [[12, "module-odtlearn.opt_ct"]], "plot_tree() (odtlearn.opt_ct.optimalclassificationtree method)": [[12, "odtlearn.opt_ct.OptimalClassificationTree.plot_tree"]], "print_tree() (odtlearn.opt_ct.optimalclassificationtree method)": [[12, "odtlearn.opt_ct.OptimalClassificationTree.print_tree"]], "optimaldecisiontree (class in odtlearn.opt_dt)": [[13, "odtlearn.opt_dt.OptimalDecisionTree"]], "fit() (odtlearn.opt_dt.optimaldecisiontree method)": [[13, "odtlearn.opt_dt.OptimalDecisionTree.fit"]], "odtlearn.opt_dt": [[13, "module-odtlearn.opt_dt"]], "predict() (odtlearn.opt_dt.optimaldecisiontree method)": [[13, "odtlearn.opt_dt.OptimalDecisionTree.predict"]], "optimalprescriptivetree (class in odtlearn.opt_pt)": [[14, "odtlearn.opt_pt.OptimalPrescriptiveTree"]], "odtlearn.opt_pt": [[14, "module-odtlearn.opt_pt"]], "plot_tree() (odtlearn.opt_pt.optimalprescriptivetree method)": [[14, "odtlearn.opt_pt.OptimalPrescriptiveTree.plot_tree"]], "print_tree() (odtlearn.opt_pt.optimalprescriptivetree method)": [[14, "odtlearn.opt_pt.OptimalPrescriptiveTree.print_tree"]], "robustoct (class in odtlearn.robust_oct)": [[15, "odtlearn.robust_oct.RobustOCT"]], "fit() (odtlearn.robust_oct.robustoct method)": [[15, "odtlearn.robust_oct.RobustOCT.fit"]], "odtlearn.robust_oct": [[15, "module-odtlearn.robust_oct"]], "plot_tree() (odtlearn.robust_oct.robustoct method)": [[15, "odtlearn.robust_oct.RobustOCT.plot_tree"]], "predict() (odtlearn.robust_oct.robustoct method)": [[15, "odtlearn.robust_oct.RobustOCT.predict"]], "print_tree() (odtlearn.robust_oct.robustoct method)": [[15, "odtlearn.robust_oct.RobustOCT.print_tree"]], "odtlearn.tests.conftest": [[16, "module-odtlearn.tests.conftest"]], "pytest_addoption() (in module odtlearn.tests.conftest)": [[16, "odtlearn.tests.conftest.pytest_addoption"]], "pytest_configure() (in module odtlearn.tests.conftest)": [[16, "odtlearn.tests.conftest.pytest_configure"]], "skip_solver() (in module odtlearn.tests.conftest)": [[16, "odtlearn.tests.conftest.skip_solver"]], "odtlearn.tests": [[17, "module-odtlearn.tests"]], "odtlearn.utils.tree": [[18, "module-odtlearn.utils.Tree"]], "mplplotter (class in odtlearn.utils.treeplotter)": [[19, "odtlearn.utils.TreePlotter.MPLPlotter"]], "export() (odtlearn.utils.treeplotter.mplplotter method)": [[19, "odtlearn.utils.TreePlotter.MPLPlotter.export"]], "get_fill_color() (odtlearn.utils.treeplotter.mplplotter method)": [[19, "odtlearn.utils.TreePlotter.MPLPlotter.get_fill_color"]], "node_to_str() (odtlearn.utils.treeplotter.mplplotter method)": [[19, "odtlearn.utils.TreePlotter.MPLPlotter.node_to_str"]], "odtlearn.utils.treeplotter": [[19, "module-odtlearn.utils.TreePlotter"]], "recurse() (odtlearn.utils.treeplotter.mplplotter method)": [[19, "odtlearn.utils.TreePlotter.MPLPlotter.recurse"]], "drawtree (class in odtlearn.utils._reingold_tilford)": [[20, "odtlearn.utils._reingold_tilford.DrawTree"]], "tree (class in odtlearn.utils._reingold_tilford)": [[20, "odtlearn.utils._reingold_tilford.Tree"]], "ancestor() (in module odtlearn.utils._reingold_tilford)": [[20, "odtlearn.utils._reingold_tilford.ancestor"]], "apportion() (in module odtlearn.utils._reingold_tilford)": [[20, "odtlearn.utils._reingold_tilford.apportion"]], "buchheim() (in module odtlearn.utils._reingold_tilford)": [[20, "odtlearn.utils._reingold_tilford.buchheim"]], "execute_shifts() (in module odtlearn.utils._reingold_tilford)": [[20, "odtlearn.utils._reingold_tilford.execute_shifts"]], "first_walk() (in module odtlearn.utils._reingold_tilford)": [[20, "odtlearn.utils._reingold_tilford.first_walk"]], "get_lmost_sibling() (odtlearn.utils._reingold_tilford.drawtree method)": [[20, "odtlearn.utils._reingold_tilford.DrawTree.get_lmost_sibling"]], "lbrother() (odtlearn.utils._reingold_tilford.drawtree method)": [[20, "odtlearn.utils._reingold_tilford.DrawTree.lbrother"]], "left() (odtlearn.utils._reingold_tilford.drawtree method)": [[20, "odtlearn.utils._reingold_tilford.DrawTree.left"]], "lmost_sibling (odtlearn.utils._reingold_tilford.drawtree attribute)": [[20, "odtlearn.utils._reingold_tilford.DrawTree.lmost_sibling"]], "max_extents() (odtlearn.utils._reingold_tilford.drawtree method)": [[20, "odtlearn.utils._reingold_tilford.DrawTree.max_extents"]], "move_subtree() (in module odtlearn.utils._reingold_tilford)": [[20, "odtlearn.utils._reingold_tilford.move_subtree"]], "odtlearn.utils._reingold_tilford": [[20, "module-odtlearn.utils._reingold_tilford"]], "right() (odtlearn.utils._reingold_tilford.drawtree method)": [[20, "odtlearn.utils._reingold_tilford.DrawTree.right"]], "second_walk() (in module odtlearn.utils._reingold_tilford)": [[20, "odtlearn.utils._reingold_tilford.second_walk"]], "third_walk() (in module odtlearn.utils._reingold_tilford)": [[20, "odtlearn.utils._reingold_tilford.third_walk"]], "binarize() (in module odtlearn.utils.binarize)": [[21, "odtlearn.utils.binarize.binarize"]], "odtlearn.utils.binarize": [[21, "module-odtlearn.utils.binarize"]], "get_all_terminal_paths() (in module odtlearn.utils.callback_helpers)": [[22, "odtlearn.utils.callback_helpers.get_all_terminal_paths"]], "get_cut_expression() (in module odtlearn.utils.callback_helpers)": [[22, "odtlearn.utils.callback_helpers.get_cut_expression"]], "get_cut_integer() (in module odtlearn.utils.callback_helpers)": [[22, "odtlearn.utils.callback_helpers.get_cut_integer"]], "get_left_exp_integer() (in module odtlearn.utils.callback_helpers)": [[22, "odtlearn.utils.callback_helpers.get_left_exp_integer"]], "get_nominal_path() (in module odtlearn.utils.callback_helpers)": [[22, "odtlearn.utils.callback_helpers.get_nominal_path"]], "get_right_exp_integer() (in module odtlearn.utils.callback_helpers)": [[22, "odtlearn.utils.callback_helpers.get_right_exp_integer"]], "get_target_exp_integer() (in module odtlearn.utils.callback_helpers)": [[22, "odtlearn.utils.callback_helpers.get_target_exp_integer"]], "odtlearn.utils.callback_helpers": [[22, "module-odtlearn.utils.callback_helpers"]], "shortest_path_solver() (in module odtlearn.utils.callback_helpers)": [[22, "odtlearn.utils.callback_helpers.shortest_path_solver"]], "benderscallback (class in odtlearn.utils.callbacks)": [[23, "odtlearn.utils.callbacks.BendersCallback"]], "robustbenderscallback (class in odtlearn.utils.callbacks)": [[23, "odtlearn.utils.callbacks.RobustBendersCallback"]], "benders_subproblem() (in module odtlearn.utils.callbacks)": [[23, "odtlearn.utils.callbacks.benders_subproblem"]], "generate_constrs() (odtlearn.utils.callbacks.benderscallback method)": [[23, "odtlearn.utils.callbacks.BendersCallback.generate_constrs"]], "generate_constrs() (odtlearn.utils.callbacks.robustbenderscallback method)": [[23, "odtlearn.utils.callbacks.RobustBendersCallback.generate_constrs"]], "odtlearn.utils.callbacks": [[23, "module-odtlearn.utils.callbacks"]], "robust_tree_subproblem() (in module odtlearn.utils.callbacks)": [[23, "odtlearn.utils.callbacks.robust_tree_subproblem"]], "odtlearn.utils": [[24, "module-odtlearn.utils"]], "char_one (in module odtlearn.utils.mip_cbc)": [[25, "odtlearn.utils.mip_cbc.CHAR_ONE"]], "char_zero (in module odtlearn.utils.mip_cbc)": [[25, "odtlearn.utils.mip_cbc.CHAR_ZERO"]], "cbc_computefeatures (in module odtlearn.utils.mip_cbc)": [[25, "odtlearn.utils.mip_cbc.Cbc_computeFeatures"]], "cbc_featurename (in module odtlearn.utils.mip_cbc)": [[25, "odtlearn.utils.mip_cbc.Cbc_featureName"]], "cbc_generatecuts (in module odtlearn.utils.mip_cbc)": [[25, "odtlearn.utils.mip_cbc.Cbc_generateCuts"]], "cbc_getsolverptr (in module odtlearn.utils.mip_cbc)": [[25, "odtlearn.utils.mip_cbc.Cbc_getSolverPtr"]], "cbc_nfeatures (in module odtlearn.utils.mip_cbc)": [[25, "odtlearn.utils.mip_cbc.Cbc_nFeatures"]], "cbc_reset (in module odtlearn.utils.mip_cbc)": [[25, "odtlearn.utils.mip_cbc.Cbc_reset"]], "cbc_setdblparam (in module odtlearn.utils.mip_cbc)": [[25, "odtlearn.utils.mip_cbc.Cbc_setDblParam"]], "cbc_setintparam (in module odtlearn.utils.mip_cbc)": [[25, "odtlearn.utils.mip_cbc.Cbc_setIntParam"]], "cbc_solvelinearprogram (in module odtlearn.utils.mip_cbc)": [[25, "odtlearn.utils.mip_cbc.Cbc_solveLinearProgram"]], "dbl_param_allowable_gap (in module odtlearn.utils.mip_cbc)": [[25, "odtlearn.utils.mip_cbc.DBL_PARAM_ALLOWABLE_GAP"]], "dbl_param_cutoff (in module odtlearn.utils.mip_cbc)": [[25, "odtlearn.utils.mip_cbc.DBL_PARAM_CUTOFF"]], "dbl_param_dual_tol (in module odtlearn.utils.mip_cbc)": [[25, "odtlearn.utils.mip_cbc.DBL_PARAM_DUAL_TOL"]], "dbl_param_gap_ratio (in module odtlearn.utils.mip_cbc)": [[25, "odtlearn.utils.mip_cbc.DBL_PARAM_GAP_RATIO"]], "dbl_param_int_tol (in module odtlearn.utils.mip_cbc)": [[25, "odtlearn.utils.mip_cbc.DBL_PARAM_INT_TOL"]], "dbl_param_max_secs_not_improv_fs (in module odtlearn.utils.mip_cbc)": [[25, "odtlearn.utils.mip_cbc.DBL_PARAM_MAX_SECS_NOT_IMPROV_FS"]], "dbl_param_presolve_tol (in module odtlearn.utils.mip_cbc)": [[25, "odtlearn.utils.mip_cbc.DBL_PARAM_PRESOLVE_TOL"]], "dbl_param_primal_tol (in module odtlearn.utils.mip_cbc)": [[25, "odtlearn.utils.mip_cbc.DBL_PARAM_PRIMAL_TOL"]], "dbl_param_psi (in module odtlearn.utils.mip_cbc)": [[25, "odtlearn.utils.mip_cbc.DBL_PARAM_PSI"]], "dbl_param_time_limit (in module odtlearn.utils.mip_cbc)": [[25, "odtlearn.utils.mip_cbc.DBL_PARAM_TIME_LIMIT"]], "dbl_param_zero_tol (in module odtlearn.utils.mip_cbc)": [[25, "odtlearn.utils.mip_cbc.DBL_PARAM_ZERO_TOL"]], "def_pumpp (in module odtlearn.utils.mip_cbc)": [[25, "odtlearn.utils.mip_cbc.DEF_PUMPP"]], "inf (in module odtlearn.utils.mip_cbc)": [[25, "odtlearn.utils.mip_cbc.INF"]], "int_param_cgraph (in module odtlearn.utils.mip_cbc)": [[25, "odtlearn.utils.mip_cbc.INT_PARAM_CGRAPH"]], "int_param_clique_merging (in module odtlearn.utils.mip_cbc)": [[25, "odtlearn.utils.mip_cbc.INT_PARAM_CLIQUE_MERGING"]], "int_param_cut_depth (in module odtlearn.utils.mip_cbc)": [[25, "odtlearn.utils.mip_cbc.INT_PARAM_CUT_DEPTH"]], "int_param_cut_pass (in module odtlearn.utils.mip_cbc)": [[25, "odtlearn.utils.mip_cbc.INT_PARAM_CUT_PASS"]], "int_param_cut_pass_in_tree (in module odtlearn.utils.mip_cbc)": [[25, "odtlearn.utils.mip_cbc.INT_PARAM_CUT_PASS_IN_TREE"]], "int_param_elapsed_time (in module odtlearn.utils.mip_cbc)": [[25, "odtlearn.utils.mip_cbc.INT_PARAM_ELAPSED_TIME"]], "int_param_fpump_its (in module odtlearn.utils.mip_cbc)": [[25, "odtlearn.utils.mip_cbc.INT_PARAM_FPUMP_ITS"]], "int_param_idiot (in module odtlearn.utils.mip_cbc)": [[25, "odtlearn.utils.mip_cbc.INT_PARAM_IDIOT"]], "int_param_log_level (in module odtlearn.utils.mip_cbc)": [[25, "odtlearn.utils.mip_cbc.INT_PARAM_LOG_LEVEL"]], "int_param_max_nodes (in module odtlearn.utils.mip_cbc)": [[25, "odtlearn.utils.mip_cbc.INT_PARAM_MAX_NODES"]], "int_param_max_nodes_not_improv_fs (in module odtlearn.utils.mip_cbc)": [[25, "odtlearn.utils.mip_cbc.INT_PARAM_MAX_NODES_NOT_IMPROV_FS"]], "int_param_max_saved_sols (in module odtlearn.utils.mip_cbc)": [[25, "odtlearn.utils.mip_cbc.INT_PARAM_MAX_SAVED_SOLS"]], "int_param_max_sols (in module odtlearn.utils.mip_cbc)": [[25, "odtlearn.utils.mip_cbc.INT_PARAM_MAX_SOLS"]], "int_param_multiple_roots (in module odtlearn.utils.mip_cbc)": [[25, "odtlearn.utils.mip_cbc.INT_PARAM_MULTIPLE_ROOTS"]], "int_param_number_before (in module odtlearn.utils.mip_cbc)": [[25, "odtlearn.utils.mip_cbc.INT_PARAM_NUMBER_BEFORE"]], "int_param_pert_value (in module odtlearn.utils.mip_cbc)": [[25, "odtlearn.utils.mip_cbc.INT_PARAM_PERT_VALUE"]], "int_param_random_seed (in module odtlearn.utils.mip_cbc)": [[25, "odtlearn.utils.mip_cbc.INT_PARAM_RANDOM_SEED"]], "int_param_round_int_vars (in module odtlearn.utils.mip_cbc)": [[25, "odtlearn.utils.mip_cbc.INT_PARAM_ROUND_INT_VARS"]], "int_param_strong_branching (in module odtlearn.utils.mip_cbc)": [[25, "odtlearn.utils.mip_cbc.INT_PARAM_STRONG_BRANCHING"]], "int_param_threads (in module odtlearn.utils.mip_cbc)": [[25, "odtlearn.utils.mip_cbc.INT_PARAM_THREADS"]], "max_name_size (in module odtlearn.utils.mip_cbc)": [[25, "odtlearn.utils.mip_cbc.MAX_NAME_SIZE"]], "modelosi (class in odtlearn.utils.mip_cbc)": [[25, "odtlearn.utils.mip_cbc.ModelOsi"]], "osicuts_addglobalrowcut (in module odtlearn.utils.mip_cbc)": [[25, "odtlearn.utils.mip_cbc.OsiCuts_addGlobalRowCut"]], "osicuts_addrowcut (in module odtlearn.utils.mip_cbc)": [[25, "odtlearn.utils.mip_cbc.OsiCuts_addRowCut"]], "osicuts_coefrowcut (in module odtlearn.utils.mip_cbc)": [[25, "odtlearn.utils.mip_cbc.OsiCuts_coefRowCut"]], "osicuts_delete (in module odtlearn.utils.mip_cbc)": [[25, "odtlearn.utils.mip_cbc.OsiCuts_delete"]], "osicuts_idxrowcut (in module odtlearn.utils.mip_cbc)": [[25, "odtlearn.utils.mip_cbc.OsiCuts_idxRowCut"]], "osicuts_new (in module odtlearn.utils.mip_cbc)": [[25, "odtlearn.utils.mip_cbc.OsiCuts_new"]], "osicuts_nzrowcut (in module odtlearn.utils.mip_cbc)": [[25, "odtlearn.utils.mip_cbc.OsiCuts_nzRowCut"]], "osicuts_rhsrowcut (in module odtlearn.utils.mip_cbc)": [[25, "odtlearn.utils.mip_cbc.OsiCuts_rhsRowCut"]], "osicuts_senserowcut (in module odtlearn.utils.mip_cbc)": [[25, "odtlearn.utils.mip_cbc.OsiCuts_senseRowCut"]], "osicuts_sizerowcuts (in module odtlearn.utils.mip_cbc)": [[25, "odtlearn.utils.mip_cbc.OsiCuts_sizeRowCuts"]], "osi_getcolsolution (in module odtlearn.utils.mip_cbc)": [[25, "odtlearn.utils.mip_cbc.Osi_getColSolution"]], "osi_getintegertolerance (in module odtlearn.utils.mip_cbc)": [[25, "odtlearn.utils.mip_cbc.Osi_getIntegerTolerance"]], "osi_getnumcols (in module odtlearn.utils.mip_cbc)": [[25, "odtlearn.utils.mip_cbc.Osi_getNumCols"]], "osi_isinteger (in module odtlearn.utils.mip_cbc)": [[25, "odtlearn.utils.mip_cbc.Osi_isInteger"]], "osi_isprovenoptimal (in module odtlearn.utils.mip_cbc)": [[25, "odtlearn.utils.mip_cbc.Osi_isProvenOptimal"]], "solvercbc (class in odtlearn.utils.mip_cbc)": [[25, "odtlearn.utils.mip_cbc.SolverCbc"]], "solverosi (class in odtlearn.utils.mip_cbc)": [[25, "odtlearn.utils.mip_cbc.SolverOsi"]], "add_constr() (odtlearn.utils.mip_cbc.modelosi method)": [[25, "odtlearn.utils.mip_cbc.ModelOsi.add_constr"]], "add_constr() (odtlearn.utils.mip_cbc.solvercbc method)": [[25, "odtlearn.utils.mip_cbc.SolverCbc.add_constr"]], "add_constr() (odtlearn.utils.mip_cbc.solverosi method)": [[25, "odtlearn.utils.mip_cbc.SolverOsi.add_constr"]], "add_cut() (odtlearn.utils.mip_cbc.solvercbc method)": [[25, "odtlearn.utils.mip_cbc.SolverCbc.add_cut"]], "add_cut() (odtlearn.utils.mip_cbc.solverosi method)": [[25, "odtlearn.utils.mip_cbc.SolverOsi.add_cut"]], "add_lazy_constr() (odtlearn.utils.mip_cbc.solvercbc method)": [[25, "odtlearn.utils.mip_cbc.SolverCbc.add_lazy_constr"]], "add_lazy_constr() (odtlearn.utils.mip_cbc.solverosi method)": [[25, "odtlearn.utils.mip_cbc.SolverOsi.add_lazy_constr"]], "add_sos() (odtlearn.utils.mip_cbc.solvercbc method)": [[25, "odtlearn.utils.mip_cbc.SolverCbc.add_sos"]], "add_var() (odtlearn.utils.mip_cbc.solvercbc method)": [[25, "odtlearn.utils.mip_cbc.SolverCbc.add_var"]], "add_var() (odtlearn.utils.mip_cbc.solverosi method)": [[25, "odtlearn.utils.mip_cbc.SolverOsi.add_var"]], "cbc_set_parameter() (in module odtlearn.utils.mip_cbc)": [[25, "odtlearn.utils.mip_cbc.cbc_set_parameter"]], "cgraph_density() (odtlearn.utils.mip_cbc.solvercbc method)": [[25, "odtlearn.utils.mip_cbc.SolverCbc.cgraph_density"]], "clique_merge() (odtlearn.utils.mip_cbc.solvercbc method)": [[25, "odtlearn.utils.mip_cbc.SolverCbc.clique_merge"]], "conflicting() (odtlearn.utils.mip_cbc.solvercbc method)": [[25, "odtlearn.utils.mip_cbc.SolverCbc.conflicting"]], "conflicting_nodes() (odtlearn.utils.mip_cbc.solvercbc method)": [[25, "odtlearn.utils.mip_cbc.SolverCbc.conflicting_nodes"]], "constr_get_expr() (odtlearn.utils.mip_cbc.solvercbc method)": [[25, "odtlearn.utils.mip_cbc.SolverCbc.constr_get_expr"]], "constr_get_expr() (odtlearn.utils.mip_cbc.solverosi method)": [[25, "odtlearn.utils.mip_cbc.SolverOsi.constr_get_expr"]], "constr_get_index() (odtlearn.utils.mip_cbc.solvercbc method)": [[25, "odtlearn.utils.mip_cbc.SolverCbc.constr_get_index"]], "constr_get_index() (odtlearn.utils.mip_cbc.solverosi method)": [[25, "odtlearn.utils.mip_cbc.SolverOsi.constr_get_index"]], "constr_get_name() (odtlearn.utils.mip_cbc.solvercbc method)": [[25, "odtlearn.utils.mip_cbc.SolverCbc.constr_get_name"]], "constr_get_name() (odtlearn.utils.mip_cbc.solverosi method)": [[25, "odtlearn.utils.mip_cbc.SolverOsi.constr_get_name"]], "constr_get_pi() (odtlearn.utils.mip_cbc.solvercbc method)": [[25, "odtlearn.utils.mip_cbc.SolverCbc.constr_get_pi"]], "constr_get_pi() (odtlearn.utils.mip_cbc.solverosi method)": [[25, "odtlearn.utils.mip_cbc.SolverOsi.constr_get_pi"]], "constr_get_rhs() (odtlearn.utils.mip_cbc.solvercbc method)": [[25, "odtlearn.utils.mip_cbc.SolverCbc.constr_get_rhs"]], "constr_get_slack() (odtlearn.utils.mip_cbc.solvercbc method)": [[25, "odtlearn.utils.mip_cbc.SolverCbc.constr_get_slack"]], "constr_get_slack() (odtlearn.utils.mip_cbc.solverosi method)": [[25, "odtlearn.utils.mip_cbc.SolverOsi.constr_get_slack"]], "constr_set_expr() (odtlearn.utils.mip_cbc.solverosi method)": [[25, "odtlearn.utils.mip_cbc.SolverOsi.constr_set_expr"]], "constr_set_rhs() (odtlearn.utils.mip_cbc.solvercbc method)": [[25, "odtlearn.utils.mip_cbc.SolverCbc.constr_set_rhs"]], "cut_idx (in module odtlearn.utils.mip_cbc)": [[25, "odtlearn.utils.mip_cbc.cut_idx"]], "feature_names() (in module odtlearn.utils.mip_cbc)": [[25, "odtlearn.utils.mip_cbc.feature_names"]], "feature_values() (odtlearn.utils.mip_cbc.solvercbc method)": [[25, "odtlearn.utils.mip_cbc.SolverCbc.feature_values"]], "ffi (in module odtlearn.utils.mip_cbc)": [[25, "odtlearn.utils.mip_cbc.ffi"]], "generate_cuts() (odtlearn.utils.mip_cbc.solvercbc method)": [[25, "odtlearn.utils.mip_cbc.SolverCbc.generate_cuts"]], "get_cutoff() (odtlearn.utils.mip_cbc.solvercbc method)": [[25, "odtlearn.utils.mip_cbc.SolverCbc.get_cutoff"]], "get_cutoff() (odtlearn.utils.mip_cbc.solverosi method)": [[25, "odtlearn.utils.mip_cbc.SolverOsi.get_cutoff"]], "get_emphasis() (odtlearn.utils.mip_cbc.solvercbc method)": [[25, "odtlearn.utils.mip_cbc.SolverCbc.get_emphasis"]], "get_emphasis() (odtlearn.utils.mip_cbc.solverosi method)": [[25, "odtlearn.utils.mip_cbc.SolverOsi.get_emphasis"]], "get_log() (odtlearn.utils.mip_cbc.solvercbc method)": [[25, "odtlearn.utils.mip_cbc.SolverCbc.get_log"]], "get_log() (odtlearn.utils.mip_cbc.solverosi method)": [[25, "odtlearn.utils.mip_cbc.SolverOsi.get_log"]], "get_max_nodes() (odtlearn.utils.mip_cbc.solvercbc method)": [[25, "odtlearn.utils.mip_cbc.SolverCbc.get_max_nodes"]], "get_max_nodes() (odtlearn.utils.mip_cbc.solverosi method)": [[25, "odtlearn.utils.mip_cbc.SolverOsi.get_max_nodes"]], "get_max_seconds() (odtlearn.utils.mip_cbc.solvercbc method)": [[25, "odtlearn.utils.mip_cbc.SolverCbc.get_max_seconds"]], "get_max_seconds() (odtlearn.utils.mip_cbc.solverosi method)": [[25, "odtlearn.utils.mip_cbc.SolverOsi.get_max_seconds"]], "get_max_solutions() (odtlearn.utils.mip_cbc.solvercbc method)": [[25, "odtlearn.utils.mip_cbc.SolverCbc.get_max_solutions"]], "get_max_solutions() (odtlearn.utils.mip_cbc.solverosi method)": [[25, "odtlearn.utils.mip_cbc.SolverOsi.get_max_solutions"]], "get_mip_gap() (odtlearn.utils.mip_cbc.solvercbc method)": [[25, "odtlearn.utils.mip_cbc.SolverCbc.get_mip_gap"]], "get_mip_gap() (odtlearn.utils.mip_cbc.solverosi method)": [[25, "odtlearn.utils.mip_cbc.SolverOsi.get_mip_gap"]], "get_mip_gap_abs() (odtlearn.utils.mip_cbc.solvercbc method)": [[25, "odtlearn.utils.mip_cbc.SolverCbc.get_mip_gap_abs"]], "get_mip_gap_abs() (odtlearn.utils.mip_cbc.solverosi method)": [[25, "odtlearn.utils.mip_cbc.SolverOsi.get_mip_gap_abs"]], "get_num_solutions() (odtlearn.utils.mip_cbc.solvercbc method)": [[25, "odtlearn.utils.mip_cbc.SolverCbc.get_num_solutions"]], "get_num_solutions() (odtlearn.utils.mip_cbc.solverosi method)": [[25, "odtlearn.utils.mip_cbc.SolverOsi.get_num_solutions"]], "get_objective() (odtlearn.utils.mip_cbc.solvercbc method)": [[25, "odtlearn.utils.mip_cbc.SolverCbc.get_objective"]], "get_objective() (odtlearn.utils.mip_cbc.solverosi method)": [[25, "odtlearn.utils.mip_cbc.SolverOsi.get_objective"]], "get_objective_bound() (odtlearn.utils.mip_cbc.solvercbc method)": [[25, "odtlearn.utils.mip_cbc.SolverCbc.get_objective_bound"]], "get_objective_bound() (odtlearn.utils.mip_cbc.solverosi method)": [[25, "odtlearn.utils.mip_cbc.SolverOsi.get_objective_bound"]], "get_objective_const() (odtlearn.utils.mip_cbc.solvercbc method)": [[25, "odtlearn.utils.mip_cbc.SolverCbc.get_objective_const"]], "get_objective_const() (odtlearn.utils.mip_cbc.solverosi method)": [[25, "odtlearn.utils.mip_cbc.SolverOsi.get_objective_const"]], "get_objective_sense() (odtlearn.utils.mip_cbc.solvercbc method)": [[25, "odtlearn.utils.mip_cbc.SolverCbc.get_objective_sense"]], "get_objective_sense() (odtlearn.utils.mip_cbc.solverosi method)": [[25, "odtlearn.utils.mip_cbc.SolverOsi.get_objective_sense"]], "get_objective_value() (odtlearn.utils.mip_cbc.solvercbc method)": [[25, "odtlearn.utils.mip_cbc.SolverCbc.get_objective_value"]], "get_objective_value() (odtlearn.utils.mip_cbc.solverosi method)": [[25, "odtlearn.utils.mip_cbc.SolverOsi.get_objective_value"]], "get_objective_value_i() (odtlearn.utils.mip_cbc.solvercbc method)": [[25, "odtlearn.utils.mip_cbc.SolverCbc.get_objective_value_i"]], "get_objective_value_i() (odtlearn.utils.mip_cbc.solverosi method)": [[25, "odtlearn.utils.mip_cbc.SolverOsi.get_objective_value_i"]], "get_problem_name() (odtlearn.utils.mip_cbc.solvercbc method)": [[25, "odtlearn.utils.mip_cbc.SolverCbc.get_problem_name"]], "get_problem_name() (odtlearn.utils.mip_cbc.solverosi method)": [[25, "odtlearn.utils.mip_cbc.SolverOsi.get_problem_name"]], "get_pump_passes() (odtlearn.utils.mip_cbc.solvercbc method)": [[25, "odtlearn.utils.mip_cbc.SolverCbc.get_pump_passes"]], "get_pump_passes() (odtlearn.utils.mip_cbc.solverosi method)": [[25, "odtlearn.utils.mip_cbc.SolverOsi.get_pump_passes"]], "get_status() (odtlearn.utils.mip_cbc.solvercbc method)": [[25, "odtlearn.utils.mip_cbc.SolverCbc.get_status"]], "get_status() (odtlearn.utils.mip_cbc.solverosi method)": [[25, "odtlearn.utils.mip_cbc.SolverOsi.get_status"]], "get_verbose() (odtlearn.utils.mip_cbc.solvercbc method)": [[25, "odtlearn.utils.mip_cbc.SolverCbc.get_verbose"]], "get_verbose() (odtlearn.utils.mip_cbc.solverosi method)": [[25, "odtlearn.utils.mip_cbc.SolverOsi.get_verbose"]], "has_cbc (in module odtlearn.utils.mip_cbc)": [[25, "odtlearn.utils.mip_cbc.has_cbc"]], "logger (in module odtlearn.utils.mip_cbc)": [[25, "odtlearn.utils.mip_cbc.logger"]], "num_cols() (odtlearn.utils.mip_cbc.solvercbc method)": [[25, "odtlearn.utils.mip_cbc.SolverCbc.num_cols"]], "num_cols() (odtlearn.utils.mip_cbc.solverosi method)": [[25, "odtlearn.utils.mip_cbc.SolverOsi.num_cols"]], "num_int() (odtlearn.utils.mip_cbc.solvercbc method)": [[25, "odtlearn.utils.mip_cbc.SolverCbc.num_int"]], "num_int() (odtlearn.utils.mip_cbc.solverosi method)": [[25, "odtlearn.utils.mip_cbc.SolverOsi.num_int"]], "num_nz() (odtlearn.utils.mip_cbc.solvercbc method)": [[25, "odtlearn.utils.mip_cbc.SolverCbc.num_nz"]], "num_nz() (odtlearn.utils.mip_cbc.solverosi method)": [[25, "odtlearn.utils.mip_cbc.SolverOsi.num_nz"]], "num_rows() (odtlearn.utils.mip_cbc.solvercbc method)": [[25, "odtlearn.utils.mip_cbc.SolverCbc.num_rows"]], "num_rows() (odtlearn.utils.mip_cbc.solverosi method)": [[25, "odtlearn.utils.mip_cbc.SolverOsi.num_rows"]], "odtlearn.utils.mip_cbc": [[25, "module-odtlearn.utils.mip_cbc"]], "optimize() (odtlearn.utils.mip_cbc.solvercbc method)": [[25, "odtlearn.utils.mip_cbc.SolverCbc.optimize"]], "optimize() (odtlearn.utils.mip_cbc.solverosi method)": [[25, "odtlearn.utils.mip_cbc.SolverOsi.optimize"]], "os_is_64_bit (in module odtlearn.utils.mip_cbc)": [[25, "odtlearn.utils.mip_cbc.os_is_64_bit"]], "pathmip (in module odtlearn.utils.mip_cbc)": [[25, "odtlearn.utils.mip_cbc.pathmip"]], "read() (odtlearn.utils.mip_cbc.solvercbc method)": [[25, "odtlearn.utils.mip_cbc.SolverCbc.read"]], "read() (odtlearn.utils.mip_cbc.solverosi method)": [[25, "odtlearn.utils.mip_cbc.SolverOsi.read"]], "relax() (odtlearn.utils.mip_cbc.solvercbc method)": [[25, "odtlearn.utils.mip_cbc.SolverCbc.relax"]], "relax() (odtlearn.utils.mip_cbc.solverosi method)": [[25, "odtlearn.utils.mip_cbc.SolverOsi.relax"]], "remove_constrs() (odtlearn.utils.mip_cbc.solvercbc method)": [[25, "odtlearn.utils.mip_cbc.SolverCbc.remove_constrs"]], "remove_constrs() (odtlearn.utils.mip_cbc.solverosi method)": [[25, "odtlearn.utils.mip_cbc.SolverOsi.remove_constrs"]], "remove_vars() (odtlearn.utils.mip_cbc.solvercbc method)": [[25, "odtlearn.utils.mip_cbc.SolverCbc.remove_vars"]], "remove_vars() (odtlearn.utils.mip_cbc.solverosi method)": [[25, "odtlearn.utils.mip_cbc.SolverOsi.remove_vars"]], "reset() (odtlearn.utils.mip_cbc.solvercbc method)": [[25, "odtlearn.utils.mip_cbc.SolverCbc.reset"]], "set_cutoff() (odtlearn.utils.mip_cbc.solvercbc method)": [[25, "odtlearn.utils.mip_cbc.SolverCbc.set_cutoff"]], "set_cutoff() (odtlearn.utils.mip_cbc.solverosi method)": [[25, "odtlearn.utils.mip_cbc.SolverOsi.set_cutoff"]], "set_emphasis() (odtlearn.utils.mip_cbc.solvercbc method)": [[25, "odtlearn.utils.mip_cbc.SolverCbc.set_emphasis"]], "set_emphasis() (odtlearn.utils.mip_cbc.solverosi method)": [[25, "odtlearn.utils.mip_cbc.SolverOsi.set_emphasis"]], "set_max_nodes() (odtlearn.utils.mip_cbc.solvercbc method)": [[25, "odtlearn.utils.mip_cbc.SolverCbc.set_max_nodes"]], "set_max_nodes() (odtlearn.utils.mip_cbc.solverosi method)": [[25, "odtlearn.utils.mip_cbc.SolverOsi.set_max_nodes"]], "set_max_seconds() (odtlearn.utils.mip_cbc.solvercbc method)": [[25, "odtlearn.utils.mip_cbc.SolverCbc.set_max_seconds"]], "set_max_seconds() (odtlearn.utils.mip_cbc.solverosi method)": [[25, "odtlearn.utils.mip_cbc.SolverOsi.set_max_seconds"]], "set_max_solutions() (odtlearn.utils.mip_cbc.solvercbc method)": [[25, "odtlearn.utils.mip_cbc.SolverCbc.set_max_solutions"]], "set_max_solutions() (odtlearn.utils.mip_cbc.solverosi method)": [[25, "odtlearn.utils.mip_cbc.SolverOsi.set_max_solutions"]], "set_mip_gap() (odtlearn.utils.mip_cbc.solvercbc method)": [[25, "odtlearn.utils.mip_cbc.SolverCbc.set_mip_gap"]], "set_mip_gap() (odtlearn.utils.mip_cbc.solverosi method)": [[25, "odtlearn.utils.mip_cbc.SolverOsi.set_mip_gap"]], "set_mip_gap_abs() (odtlearn.utils.mip_cbc.solvercbc method)": [[25, "odtlearn.utils.mip_cbc.SolverCbc.set_mip_gap_abs"]], "set_mip_gap_abs() (odtlearn.utils.mip_cbc.solverosi method)": [[25, "odtlearn.utils.mip_cbc.SolverOsi.set_mip_gap_abs"]], "set_num_threads() (odtlearn.utils.mip_cbc.solvercbc method)": [[25, "odtlearn.utils.mip_cbc.SolverCbc.set_num_threads"]], "set_num_threads() (odtlearn.utils.mip_cbc.solverosi method)": [[25, "odtlearn.utils.mip_cbc.SolverOsi.set_num_threads"]], "set_objective() (odtlearn.utils.mip_cbc.solvercbc method)": [[25, "odtlearn.utils.mip_cbc.SolverCbc.set_objective"]], "set_objective() (odtlearn.utils.mip_cbc.solverosi method)": [[25, "odtlearn.utils.mip_cbc.SolverOsi.set_objective"]], "set_objective_const() (odtlearn.utils.mip_cbc.solverosi method)": [[25, "odtlearn.utils.mip_cbc.SolverOsi.set_objective_const"]], "set_objective_sense() (odtlearn.utils.mip_cbc.solvercbc method)": [[25, "odtlearn.utils.mip_cbc.SolverCbc.set_objective_sense"]], "set_objective_sense() (odtlearn.utils.mip_cbc.solverosi method)": [[25, "odtlearn.utils.mip_cbc.SolverOsi.set_objective_sense"]], "set_problem_name() (odtlearn.utils.mip_cbc.solvercbc method)": [[25, "odtlearn.utils.mip_cbc.SolverCbc.set_problem_name"]], "set_problem_name() (odtlearn.utils.mip_cbc.solverosi method)": [[25, "odtlearn.utils.mip_cbc.SolverOsi.set_problem_name"]], "set_processing_limits() (odtlearn.utils.mip_cbc.solvercbc method)": [[25, "odtlearn.utils.mip_cbc.SolverCbc.set_processing_limits"]], "set_processing_limits() (odtlearn.utils.mip_cbc.solverosi method)": [[25, "odtlearn.utils.mip_cbc.SolverOsi.set_processing_limits"]], "set_pump_passes() (odtlearn.utils.mip_cbc.solvercbc method)": [[25, "odtlearn.utils.mip_cbc.SolverCbc.set_pump_passes"]], "set_pump_passes() (odtlearn.utils.mip_cbc.solverosi method)": [[25, "odtlearn.utils.mip_cbc.SolverOsi.set_pump_passes"]], "set_start() (odtlearn.utils.mip_cbc.solvercbc method)": [[25, "odtlearn.utils.mip_cbc.SolverCbc.set_start"]], "set_start() (odtlearn.utils.mip_cbc.solverosi method)": [[25, "odtlearn.utils.mip_cbc.SolverOsi.set_start"]], "set_verbose() (odtlearn.utils.mip_cbc.solvercbc method)": [[25, "odtlearn.utils.mip_cbc.SolverCbc.set_verbose"]], "set_verbose() (odtlearn.utils.mip_cbc.solverosi method)": [[25, "odtlearn.utils.mip_cbc.SolverOsi.set_verbose"]], "update_conflict_graph() (odtlearn.utils.mip_cbc.solvercbc method)": [[25, "odtlearn.utils.mip_cbc.SolverCbc.update_conflict_graph"]], "var_get_branch_priority() (odtlearn.utils.mip_cbc.solvercbc method)": [[25, "odtlearn.utils.mip_cbc.SolverCbc.var_get_branch_priority"]], "var_get_branch_priority() (odtlearn.utils.mip_cbc.solverosi method)": [[25, "odtlearn.utils.mip_cbc.SolverOsi.var_get_branch_priority"]], "var_get_column() (odtlearn.utils.mip_cbc.solvercbc method)": [[25, "odtlearn.utils.mip_cbc.SolverCbc.var_get_column"]], "var_get_column() (odtlearn.utils.mip_cbc.solverosi method)": [[25, "odtlearn.utils.mip_cbc.SolverOsi.var_get_column"]], "var_get_index() (odtlearn.utils.mip_cbc.solvercbc method)": [[25, "odtlearn.utils.mip_cbc.SolverCbc.var_get_index"]], "var_get_index() (odtlearn.utils.mip_cbc.solverosi method)": [[25, "odtlearn.utils.mip_cbc.SolverOsi.var_get_index"]], "var_get_lb() (odtlearn.utils.mip_cbc.solvercbc method)": [[25, "odtlearn.utils.mip_cbc.SolverCbc.var_get_lb"]], "var_get_lb() (odtlearn.utils.mip_cbc.solverosi method)": [[25, "odtlearn.utils.mip_cbc.SolverOsi.var_get_lb"]], "var_get_name() (odtlearn.utils.mip_cbc.solvercbc method)": [[25, "odtlearn.utils.mip_cbc.SolverCbc.var_get_name"]], "var_get_name() (odtlearn.utils.mip_cbc.solverosi method)": [[25, "odtlearn.utils.mip_cbc.SolverOsi.var_get_name"]], "var_get_obj() (odtlearn.utils.mip_cbc.solvercbc method)": [[25, "odtlearn.utils.mip_cbc.SolverCbc.var_get_obj"]], "var_get_obj() (odtlearn.utils.mip_cbc.solverosi method)": [[25, "odtlearn.utils.mip_cbc.SolverOsi.var_get_obj"]], "var_get_rc() (odtlearn.utils.mip_cbc.solvercbc method)": [[25, "odtlearn.utils.mip_cbc.SolverCbc.var_get_rc"]], "var_get_rc() (odtlearn.utils.mip_cbc.solverosi method)": [[25, "odtlearn.utils.mip_cbc.SolverOsi.var_get_rc"]], "var_get_ub() (odtlearn.utils.mip_cbc.solvercbc method)": [[25, "odtlearn.utils.mip_cbc.SolverCbc.var_get_ub"]], "var_get_ub() (odtlearn.utils.mip_cbc.solverosi method)": [[25, "odtlearn.utils.mip_cbc.SolverOsi.var_get_ub"]], "var_get_var_type() (odtlearn.utils.mip_cbc.solvercbc method)": [[25, "odtlearn.utils.mip_cbc.SolverCbc.var_get_var_type"]], "var_get_var_type() (odtlearn.utils.mip_cbc.solverosi method)": [[25, "odtlearn.utils.mip_cbc.SolverOsi.var_get_var_type"]], "var_get_x() (odtlearn.utils.mip_cbc.solvercbc method)": [[25, "odtlearn.utils.mip_cbc.SolverCbc.var_get_x"]], "var_get_x() (odtlearn.utils.mip_cbc.solverosi method)": [[25, "odtlearn.utils.mip_cbc.SolverOsi.var_get_x"]], "var_get_xi() (odtlearn.utils.mip_cbc.solvercbc method)": [[25, "odtlearn.utils.mip_cbc.SolverCbc.var_get_xi"]], "var_get_xi() (odtlearn.utils.mip_cbc.solverosi method)": [[25, "odtlearn.utils.mip_cbc.SolverOsi.var_get_xi"]], "var_set_branch_priority() (odtlearn.utils.mip_cbc.solverosi method)": [[25, "odtlearn.utils.mip_cbc.SolverOsi.var_set_branch_priority"]], "var_set_column() (odtlearn.utils.mip_cbc.solvercbc method)": [[25, "odtlearn.utils.mip_cbc.SolverCbc.var_set_column"]], "var_set_column() (odtlearn.utils.mip_cbc.solverosi method)": [[25, "odtlearn.utils.mip_cbc.SolverOsi.var_set_column"]], "var_set_lb() (odtlearn.utils.mip_cbc.solvercbc method)": [[25, "odtlearn.utils.mip_cbc.SolverCbc.var_set_lb"]], "var_set_lb() (odtlearn.utils.mip_cbc.solverosi method)": [[25, "odtlearn.utils.mip_cbc.SolverOsi.var_set_lb"]], "var_set_obj() (odtlearn.utils.mip_cbc.solvercbc method)": [[25, "odtlearn.utils.mip_cbc.SolverCbc.var_set_obj"]], "var_set_obj() (odtlearn.utils.mip_cbc.solverosi method)": [[25, "odtlearn.utils.mip_cbc.SolverOsi.var_set_obj"]], "var_set_ub() (odtlearn.utils.mip_cbc.solvercbc method)": [[25, "odtlearn.utils.mip_cbc.SolverCbc.var_set_ub"]], "var_set_ub() (odtlearn.utils.mip_cbc.solverosi method)": [[25, "odtlearn.utils.mip_cbc.SolverOsi.var_set_ub"]], "var_set_var_type() (odtlearn.utils.mip_cbc.solvercbc method)": [[25, "odtlearn.utils.mip_cbc.SolverCbc.var_set_var_type"]], "var_set_var_type() (odtlearn.utils.mip_cbc.solverosi method)": [[25, "odtlearn.utils.mip_cbc.SolverOsi.var_set_var_type"]], "warningmessages (in module odtlearn.utils.mip_cbc)": [[25, "odtlearn.utils.mip_cbc.warningMessages"]], "write() (odtlearn.utils.mip_cbc.solvercbc method)": [[25, "odtlearn.utils.mip_cbc.SolverCbc.write"]], "write() (odtlearn.utils.mip_cbc.solverosi method)": [[25, "odtlearn.utils.mip_cbc.SolverOsi.write"]], "grb_cbc_const_map (in module odtlearn.utils.solver)": [[26, "odtlearn.utils.solver.GRB_CBC_CONST_MAP"]], "solver (class in odtlearn.utils.solver)": [[26, "odtlearn.utils.solver.Solver"]], "add_constr() (odtlearn.utils.solver.solver method)": [[26, "odtlearn.utils.solver.Solver.add_constr"]], "add_constrs() (odtlearn.utils.solver.solver method)": [[26, "odtlearn.utils.solver.Solver.add_constrs"]], "add_vars() (odtlearn.utils.solver.solver method)": [[26, "odtlearn.utils.solver.Solver.add_vars"]], "get_var_value() (odtlearn.utils.solver.solver method)": [[26, "odtlearn.utils.solver.Solver.get_var_value"]], "lin_expr() (odtlearn.utils.solver.solver method)": [[26, "odtlearn.utils.solver.Solver.lin_expr"]], "num_constraints (odtlearn.utils.solver.solver property)": [[26, "odtlearn.utils.solver.Solver.num_constraints"]], "num_decision_vars (odtlearn.utils.solver.solver property)": [[26, "odtlearn.utils.solver.Solver.num_decision_vars"]], "num_integer_vars (odtlearn.utils.solver.solver property)": [[26, "odtlearn.utils.solver.Solver.num_integer_vars"]], "num_non_zero (odtlearn.utils.solver.solver property)": [[26, "odtlearn.utils.solver.Solver.num_non_zero"]], "num_solutions (odtlearn.utils.solver.solver property)": [[26, "odtlearn.utils.solver.Solver.num_solutions"]], "odtlearn.utils.solver": [[26, "module-odtlearn.utils.solver"]], "optim_gap (odtlearn.utils.solver.solver property)": [[26, "odtlearn.utils.solver.Solver.optim_gap"]], "optimize() (odtlearn.utils.solver.solver method)": [[26, "odtlearn.utils.solver.Solver.optimize"]], "prep_indices() (odtlearn.utils.solver.solver method)": [[26, "odtlearn.utils.solver.Solver.prep_indices"]], "quicksum() (odtlearn.utils.solver.solver method)": [[26, "odtlearn.utils.solver.Solver.quicksum"]], "search_progress_log (odtlearn.utils.solver.solver property)": [[26, "odtlearn.utils.solver.Solver.search_progress_log"]], "set_objective() (odtlearn.utils.solver.solver method)": [[26, "odtlearn.utils.solver.Solver.set_objective"]], "store_data() (odtlearn.utils.solver.solver method)": [[26, "odtlearn.utils.solver.Solver.store_data"]], "check_binary() (in module odtlearn.utils.validation)": [[27, "odtlearn.utils.validation.check_binary"]], "check_columns_match() (in module odtlearn.utils.validation)": [[27, "odtlearn.utils.validation.check_columns_match"]], "check_integer() (in module odtlearn.utils.validation)": [[27, "odtlearn.utils.validation.check_integer"]], "check_ipw() (in module odtlearn.utils.validation)": [[27, "odtlearn.utils.validation.check_ipw"]], "check_same_as_x() (in module odtlearn.utils.validation)": [[27, "odtlearn.utils.validation.check_same_as_X"]], "check_y() (in module odtlearn.utils.validation)": [[27, "odtlearn.utils.validation.check_y"]], "check_y_hat() (in module odtlearn.utils.validation)": [[27, "odtlearn.utils.validation.check_y_hat"]], "odtlearn.utils.validation": [[27, "module-odtlearn.utils.validation"]]}})