Search.setIndex({"docnames": ["api", "autoapi/odtlearn/constrained_oct/index", "autoapi/odtlearn/datasets/index", "autoapi/odtlearn/fair_oct/index", "autoapi/odtlearn/flow_oct/index", "autoapi/odtlearn/flow_oct_ms/index", "autoapi/odtlearn/flow_oct_ss/index", "autoapi/odtlearn/flow_opt/index", "autoapi/odtlearn/flow_opt_ms/index", "autoapi/odtlearn/flow_opt_ss/index", "autoapi/odtlearn/index", "autoapi/odtlearn/opt_ct/index", "autoapi/odtlearn/opt_dt/index", "autoapi/odtlearn/opt_pt/index", "autoapi/odtlearn/robust_oct/index", "autoapi/odtlearn/tests/conftest/index", "autoapi/odtlearn/tests/index", "autoapi/odtlearn/utils/Tree/index", "autoapi/odtlearn/utils/TreePlotter/index", "autoapi/odtlearn/utils/_reingold_tilford/index", "autoapi/odtlearn/utils/binarize/index", "autoapi/odtlearn/utils/callback_helpers/index", "autoapi/odtlearn/utils/callbacks/index", "autoapi/odtlearn/utils/index", "autoapi/odtlearn/utils/mip_cbc/index", "autoapi/odtlearn/utils/solver/index", "autoapi/odtlearn/utils/validation/index", "contributing", "index", "installation", "notebooks/FairOCT", "notebooks/FlowOCT", "notebooks/RobustOCT", "notebooks/index", "user_guide/adding_constraints", "user_guide/fair_optimal_classification_trees", "user_guide/index", "user_guide/optimal_classification_trees", "user_guide/optimal_prescriptive_trees", "user_guide/optimal_robust_classification_trees"], "filenames": ["api.md", "autoapi/odtlearn/constrained_oct/index.rst", "autoapi/odtlearn/datasets/index.rst", "autoapi/odtlearn/fair_oct/index.rst", "autoapi/odtlearn/flow_oct/index.rst", "autoapi/odtlearn/flow_oct_ms/index.rst", "autoapi/odtlearn/flow_oct_ss/index.rst", "autoapi/odtlearn/flow_opt/index.rst", "autoapi/odtlearn/flow_opt_ms/index.rst", "autoapi/odtlearn/flow_opt_ss/index.rst", "autoapi/odtlearn/index.rst", "autoapi/odtlearn/opt_ct/index.rst", "autoapi/odtlearn/opt_dt/index.rst", "autoapi/odtlearn/opt_pt/index.rst", "autoapi/odtlearn/robust_oct/index.rst", "autoapi/odtlearn/tests/conftest/index.rst", "autoapi/odtlearn/tests/index.rst", "autoapi/odtlearn/utils/Tree/index.rst", "autoapi/odtlearn/utils/TreePlotter/index.rst", "autoapi/odtlearn/utils/_reingold_tilford/index.rst", "autoapi/odtlearn/utils/binarize/index.rst", "autoapi/odtlearn/utils/callback_helpers/index.rst", "autoapi/odtlearn/utils/callbacks/index.rst", "autoapi/odtlearn/utils/index.rst", "autoapi/odtlearn/utils/mip_cbc/index.rst", "autoapi/odtlearn/utils/solver/index.rst", "autoapi/odtlearn/utils/validation/index.rst", "contributing.md", "index.md", "installation.md", "notebooks/FairOCT.ipynb", "notebooks/FlowOCT.ipynb", "notebooks/RobustOCT.ipynb", "notebooks/index.md", "user_guide/adding_constraints.md", "user_guide/fair_optimal_classification_trees.md", "user_guide/index.md", "user_guide/optimal_classification_trees.md", "user_guide/optimal_prescriptive_trees.md", "user_guide/optimal_robust_classification_trees.md"], "titles": ["ODTlearn API", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">odtlearn.constrained_oct</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">odtlearn.datasets</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">odtlearn.fair_oct</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">odtlearn.flow_oct</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">odtlearn.flow_oct_ms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">odtlearn.flow_oct_ss</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">odtlearn.flow_opt</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">odtlearn.flow_opt_ms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">odtlearn.flow_opt_ss</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">odtlearn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">odtlearn.opt_ct</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">odtlearn.opt_dt</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">odtlearn.opt_pt</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">odtlearn.robust_oct</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">odtlearn.tests.conftest</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">odtlearn.tests</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">odtlearn.utils.Tree</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">odtlearn.utils.TreePlotter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">odtlearn.utils._reingold_tilford</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">odtlearn.utils.binarize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">odtlearn.utils.callback_helpers</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">odtlearn.utils.callbacks</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">odtlearn.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">odtlearn.utils.mip_cbc</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">odtlearn.utils.solver</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">odtlearn.utils.validation</span></code>", "How to contribute to ODTlearn", "What is ODTlearn?", "Installation Guide", "Fair Optimal Classification Trees", "<code class=\"docutils literal notranslate\"><span class=\"pre\">FlowOCT</span></code> Examples", "<code class=\"docutils literal notranslate\"><span class=\"pre\">RobustOCT</span></code> Examples", "Example Notebooks", "Adding side constraints to optimal classification trees", "Fair Optimal Classification Trees", "User Guide", "Optimal Classification Trees", "Optimal Prescriptive Trees", "Robust Optimal Classification Trees"], "terms": {"The": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 18, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 37, 38, 39], "softwar": [0, 29], "architectur": 0, "i": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 18, 21, 22, 24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 37, 38, 39], "motiv": 0, "optim": [0, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 18, 21, 22, 24, 25, 28, 31, 32, 33, 36], "decis": [0, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 18, 21, 22, 25, 28, 30, 31, 34, 35, 37], "tree": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 18, 19, 21, 22, 23, 28, 32, 33, 36], "literatur": [0, 35], "which": [0, 1, 3, 4, 7, 14, 22, 24, 25, 28, 29, 30, 31, 32, 34, 37, 38, 39], "research": [0, 28, 29], "have": [0, 2, 3, 4, 7, 14, 20, 22, 28, 29, 30, 31, 32, 34, 35, 38], "recent": [0, 35], "propos": [0, 38], "numer": [0, 3], "new": [0, 3, 4, 7, 14, 24, 25, 26, 28, 29, 31, 34, 37, 38], "problem": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 13, 14, 21, 22, 24, 25, 28, 30, 32, 34, 35, 37], "class": [0, 2, 21, 28, 30, 31, 34, 35, 37, 38], "reformul": 0, "strategi": [0, 20], "solut": [0, 4, 12, 22, 24, 25, 30, 31, 32, 37], "approach": [0, 4, 7, 34, 35, 37, 38], "With": [0, 32, 34, 35], "thi": [0, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 20, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 37, 38, 39], "mind": 0, "we": [0, 2, 3, 22, 25, 27, 28, 29, 30, 31, 32, 34, 37], "creat": [0, 4, 7, 24, 25, 30, 31, 32, 34, 37, 38], "structur": [0, 3, 4, 5, 6, 8, 9, 11, 13, 14, 25, 26, 30, 31, 34], "our": [0, 2, 3, 28, 29, 30, 31, 32, 34, 37], "packag": [0, 25, 28, 29, 30, 34, 38], "emphas": 0, "thei": [0, 30, 31, 34, 35], "ar": [0, 1, 2, 3, 4, 5, 6, 7, 11, 12, 14, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 37, 38, 39], "easi": [0, 31], "maintain": [0, 37], "extend": [0, 3, 4, 5, 6, 7, 8, 9, 11, 13], "follow": [0, 2, 3, 4, 7, 12, 14, 20, 22, 24, 28, 29, 30, 31, 32, 35, 37], "figur": [0, 11, 13, 14, 34, 37], "show": [0, 2, 3, 11, 12, 13, 14, 30, 31, 32, 34, 37, 38], "inherit": [0, 4, 7, 8, 9, 34], "diagram": [0, 2, 31, 34], "deriv": [0, 3, 5, 6, 8, 9, 39], "from": [0, 2, 3, 4, 7, 8, 9, 11, 12, 13, 14, 20, 22, 24, 25, 26, 28, 29, 30, 31, 32, 34, 35, 37, 38, 39], "abstract": [0, 3, 8, 12, 24, 34], "base": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 18, 20, 22, 24, 26, 28, 30, 32, 35, 37, 38, 39], "optimaldecisiontre": [0, 11, 12, 13], "provid": [0, 3, 4, 5, 6, 7, 8, 24, 28, 29, 30, 31, 34, 35, 37, 38], "standard": [0, 4, 35], "interfac": [0, 7, 24, 30], "two": [0, 2, 3, 24, 27, 28, 29, 30, 31, 34, 35, 38], "type": [0, 3, 13, 18, 20, 24, 25, 28, 30, 31, 32, 35, 37], "current": [0, 4, 5, 6, 11, 12, 13, 14, 21, 22, 30, 31, 32, 35], "support": [0, 3, 4, 5, 6, 11, 12, 32], "classif": [0, 1, 3, 4, 5, 6, 11, 14, 28, 32, 33, 36], "prescript": [0, 2, 7, 8, 9, 11, 13, 28, 36], "while": [0, 3, 4, 14, 22, 30, 34, 35, 37], "keep": 0, "implement": [0, 3, 4, 7, 8, 9, 12, 28, 30, 35, 37, 38], "detail": [0, 34, 39], "separ": 0, "one": [0, 3, 4, 5, 6, 8, 9, 20, 27, 30, 31, 34, 35, 37, 38], "anoth": [0, 27, 30, 31], "optimalclassificationtre": [0, 5, 6, 11, 14], "optimalprescriptivetre": [0, 7, 8, 9, 13], "specifi": [0, 1, 3, 4, 5, 6, 7, 8, 11, 12, 13, 14, 18, 25, 30, 31, 34, 35, 37], "specif": [0, 3, 4, 5, 6, 7, 8, 9, 22, 28, 30, 35, 37], "method": [0, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 18, 20, 22, 24, 28, 29, 30, 31, 32, 34, 37, 39], "travers": [0, 3, 4, 7, 14, 21], "visual": [0, 2, 3, 7, 9, 11, 13, 14, 31], "prevent": [0, 30, 37], "unnecessari": 0, "code": [0, 2, 24, 31, 34], "duplic": [0, 34], "within": [0, 2, 3, 14, 31, 37], "each": [0, 2, 3, 4, 5, 6, 7, 8, 9, 11, 13, 14, 18, 20, 21, 22, 25, 28, 30, 31, 32, 35, 37, 38, 39], "child": [0, 34], "next": [0, 30, 34], "children": [0, 19], "variabl": [0, 4, 5, 6, 8, 9, 11, 12, 13, 18, 21, 22, 24, 25, 29, 30, 31, 32], "constraint": [0, 1, 3, 4, 5, 6, 8, 9, 12, 21, 22, 24, 25, 29, 30, 31, 32, 35, 36], "object": [0, 3, 4, 5, 6, 7, 8, 9, 12, 14, 18, 20, 21, 22, 24, 25, 28, 30, 32, 34], "function": [0, 3, 4, 5, 6, 7, 8, 12, 25, 30, 32, 34, 37, 39], "necessari": [0, 31, 37], "construct": [0, 25, 34], "interest": [0, 22, 28, 34], "variat": 0, "mio": [0, 1, 3, 4, 28, 29, 34, 37, 38, 39], "formul": [0, 4, 5, 6, 8, 9, 11, 12, 13, 29, 32, 34, 37], "ensur": [0, 4, 5, 6, 8, 9, 22, 27, 29, 30], "ani": [0, 3, 4, 11, 12, 13, 14, 20, 21, 22, 25, 26, 28, 31, 37, 38, 39], "chang": [0, 27, 31, 32, 38, 39], "do": [0, 27, 29, 31, 38], "affect": [0, 30, 31], "other": [0, 2, 26, 28, 30, 31, 32, 34, 35, 37], "final": 0, "leaf": [0, 3, 4, 6, 7, 9, 11, 13, 14, 18, 28, 31, 32, 37], "node": [0, 3, 4, 5, 6, 7, 8, 9, 11, 13, 14, 18, 21, 22, 28, 30, 31, 32, 34, 37], "user": [0, 3, 4, 5, 6, 7, 28, 30, 31, 32, 34, 35, 37], "face": [0, 4, 7], "fit": [0, 1, 3, 4, 7, 8, 9, 11, 12, 13, 14, 20, 28, 30, 31, 32, 34, 37, 38, 39], "predict": [0, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 21, 22, 26, 28, 30, 31, 32, 34, 37, 38], "meant": 0, "encourag": [0, 30], "practition": 0, "build": [0, 24, 29, 30, 31, 32, 39], "upon": [0, 7, 35, 37], "augment": 0, "more": [0, 3, 7, 30, 31, 32, 34, 35, 37], "featur": [0, 2, 3, 4, 7, 11, 13, 14, 18, 20, 21, 22, 28, 30, 31, 32, 34, 35, 39], "e": [0, 1, 3, 5, 6, 8, 9, 25, 30, 31, 32, 35, 37, 38, 39], "g": [0, 1, 3, 22, 26, 30, 35, 37], "differ": [0, 3, 4, 5, 7, 8, 14, 26, 27, 29, 30, 32, 34, 35, 38, 39], "addit": [0, 7, 25, 29, 34, 35, 38], "even": [0, 30, 37], "altogeth": 0, "an": [0, 2, 3, 4, 7, 12, 14, 22, 24, 25, 26, 28, 30, 31, 32, 34, 35, 38, 39], "exampl": [0, 2, 3, 4, 7, 20, 24, 26, 27, 30, 34, 35, 37, 39], "how": [0, 24, 28, 29, 30, 31, 32, 34, 35, 37, 39], "guid": [0, 28, 35], "notebook": [0, 2, 28, 30, 34, 35], "usag": [0, 2, 7], "inform": [0, 2, 11, 13, 14, 18, 28, 31, 32, 34], "about": [0, 18, 28, 34, 38], "subpackag": 0, "util": [0, 7, 10, 30, 31, 37], "submodul": 0, "constrained_oct": [0, 3, 10], "modul": 0, "content": 0, "dataset": [0, 10, 31, 32, 37, 38], "fair_oct": [0, 10, 30], "flow_oct": [0, 10, 31], "flow_oct_m": [0, 1, 3, 10], "flow_oct_ss": [0, 4, 10], "flow_opt": [0, 10], "flow_opt_m": [0, 7, 10], "flow_opt_ss": [0, 7, 10], "opt_ct": [0, 5, 6, 10, 14], "opt_dt": [0, 10, 11, 13], "opt_pt": [0, 8, 9, 10], "robust_oct": [0, 10, 32], "attribut": [0, 2, 3, 5, 6, 7, 8, 9, 11, 12, 13, 14, 18, 20, 30, 35], "odtl": [0, 10], "name": [0, 1, 3, 10, 11, 12, 13, 14, 18, 20, 24, 25, 26, 29, 30, 34], "constrainedoct": [1, 3, 34], "solver": [1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 21, 22, 23, 24, 30, 31, 32, 34, 37], "str": [1, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 18, 20, 22, 24, 25, 26, 34], "_lambda": [1, 3, 4, 5, 6, 28, 30, 34, 37], "float": [1, 3, 4, 5, 6, 7, 11, 12, 13, 14, 18, 22, 24, 25, 32, 34], "depth": [1, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 18, 19, 22, 24, 28, 30, 32, 34, 37, 38], "int": [1, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 18, 20, 21, 22, 24, 34], "time_limit": [1, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 28, 30, 31, 32, 34, 37], "num_thread": [1, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 28, 30, 31, 32, 34], "none": [1, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 18, 19, 20, 22, 24, 25, 26, 28, 30, 31, 32, 34], "verbos": [1, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 24, 25, 28, 30, 31, 32, 34], "bool": [1, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 18, 21, 22, 24, 25, 26], "sourc": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 18, 19, 20, 21, 22, 24, 25, 26, 27, 29, 30], "flowoctmultiplesink": [1, 3, 5, 34], "A": [1, 2, 3, 5, 6, 7, 8, 9, 11, 12, 13, 14, 18, 20, 21, 22, 25, 26, 28, 30, 31, 32, 34, 35, 37, 38, 39], "parent": [1, 19], "incorpor": [1, 4, 28, 35], "side": [1, 3, 21, 36], "when": [1, 3, 4, 11, 13, 14, 22, 24, 25, 28, 29, 30, 31, 32, 34, 35, 37, 38], "fair": [1, 3, 28, 33, 34, 36], "etc": [1, 3, 11, 13, 14, 31], "paramet": [1, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 18, 20, 21, 22, 25, 26, 30, 31, 32, 34, 35, 37, 38, 39], "string": [1, 3, 14, 18, 25, 34], "us": [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 18, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 37, 38], "solv": [1, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 21, 22, 25, 28, 30, 31, 32, 34, 37, 39], "mip": [1, 3, 4, 5, 6, 9, 11, 12, 13, 14, 21, 22, 24, 25, 29, 34], "option": [1, 3, 4, 5, 6, 7, 11, 12, 13, 14, 18, 20, 21, 22, 24, 29, 34, 37], "gurobi": [1, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 21, 25, 30, 31, 32, 34], "cbc": [1, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 24, 25, 30, 34], "If": [1, 3, 4, 5, 6, 7, 8, 11, 12, 13, 14, 18, 22, 26, 27, 28, 29, 30, 31, 32, 34, 38], "binari": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 14, 21, 22, 24, 26, 28, 30, 31, 32, 34, 35, 37, 38], "found": [1, 3, 7, 12, 14, 22, 26, 29, 30, 31, 32, 34, 39], "default": [1, 3, 4, 5, 6, 7, 8, 11, 12, 13, 14, 18, 20, 22, 25, 26, 30, 31, 34, 37], "positive_class": [1, 3, 30, 34], "valu": [1, 3, 4, 7, 11, 12, 13, 14, 18, 20, 21, 22, 24, 25, 26, 30, 31, 32, 34, 35, 37, 38, 39], "label": [1, 2, 3, 4, 5, 11, 12, 13, 14, 18, 19, 21, 22, 26, 28, 30, 31, 32, 34, 35], "correspond": [1, 3, 4, 7, 14, 22, 28, 30, 32, 34, 35, 37, 38, 39], "desir": [1, 3, 30, 31, 34, 35], "outcom": [1, 3, 7, 28, 30, 34, 35, 38], "1": [1, 2, 3, 4, 7, 8, 11, 12, 13, 14, 18, 19, 20, 21, 24, 25, 26, 28, 30, 34, 35, 37, 39], "60": [1, 3, 4, 7, 8, 12, 30, 31, 32, 34, 37], "given": [1, 3, 4, 7, 8, 11, 12, 13, 14, 18, 21, 22, 30, 32, 34, 37, 38], "time": [1, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 27, 30, 31, 32, 34, 37, 39], "limit": [1, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 30, 34, 35, 37], "second": [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 30, 31, 32, 34, 37], "number": [1, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 18, 19, 20, 22, 24, 26, 30, 31, 34, 37], "thread": [1, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 24, 30, 31, 32, 34], "should": [1, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 20, 24, 25, 30, 32, 34, 35, 37, 38], "all": [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 18, 20, 21, 24, 26, 28, 30, 31, 32, 34, 35, 37], "avaiabl": [1, 3, 34], "prescriptive_ex_data": 2, "return": [2, 3, 4, 7, 11, 13, 14, 18, 20, 21, 22, 24, 25, 26, 32, 34, 37], "tupl": [2, 12, 21, 22, 24], "train": [2, 3, 4, 7, 11, 12, 13, 14, 30, 31, 32, 37, 39], "test": [2, 11, 13, 14, 26, 28, 30, 32, 39], "datafram": [2, 3, 4, 7, 13, 20, 21, 22, 26, 30, 31, 32, 38], "balance_scale_data": [2, 31], "contain": [2, 3, 4, 7, 11, 13, 14, 18, 21, 22, 25, 26, 28, 30, 31, 34, 39], "balanc": [2, 3, 4, 28, 30, 34, 37], "scale": [2, 4, 11, 12, 13, 14, 18, 31, 32], "data": [2, 3, 4, 7, 11, 12, 13, 14, 20, 21, 22, 25, 26, 28, 30, 34, 35, 37, 38, 39], "set": [2, 3, 4, 7, 11, 12, 13, 14, 25, 30, 31, 32, 34, 35, 37, 39], "uci": 2, "ml": [2, 31], "repositori": [2, 31, 32], "see": [2, 24, 31, 32, 34, 35, 37, 39], "url": 2, "http": [2, 29, 31, 32, 34, 35, 37, 38, 39], "archiv": [2, 31], "ic": [2, 31], "edu": [2, 31], "flow_oct_exampl": [2, 31], "numpi": [2, 3, 4, 7, 11, 13, 22, 26, 28, 30, 31, 32], "arrai": [2, 3, 4, 7, 14, 20, 25, 26, 31, 32], "first": [2, 11, 13, 14, 24, 29, 31, 32, 34, 37, 38], "flow": [2, 4, 5, 6, 8, 9, 31, 34], "octexampl": 2, "document": [2, 34], "block": [2, 31], "ha": [2, 3, 4, 7, 11, 12, 13, 14, 24, 26, 27, 30, 31, 34, 37, 38], "x1": [2, 24, 31, 32], "x2": [2, 24, 31, 32], "0": [2, 3, 4, 7, 11, 12, 13, 14, 18, 19, 20, 22, 24, 25, 26, 28, 30, 32, 34, 35, 37, 39], "______0________": [2, 31, 32], "_______1_______x1": [2, 31, 32], "x": [2, 3, 4, 7, 8, 11, 12, 13, 14, 20, 21, 22, 24, 25, 26, 29, 30, 31, 32, 37], "covari": [2, 7, 37, 38, 39], "y": [2, 3, 4, 7, 8, 11, 12, 13, 14, 20, 24, 26, 28, 30, 31, 32, 37], "respons": 2, "robustness_exampl": 2, "three": [2, 4, 37, 38], "robusttre": [2, 28], "third": 2, "cost": [2, 12, 14, 21, 22, 31, 32, 37, 39], "vector": [2, 30, 35, 37, 38], "form": [2, 25, 28], "uncertainti": [2, 14, 32, 39], "5": [2, 7, 11, 13, 18, 20, 24, 26, 30, 31, 32, 37], "point": [2, 11, 13, 14, 20, 22, 28, 32, 35, 37], "can": [2, 3, 4, 7, 8, 9, 13, 18, 20, 24, 25, 27, 28, 29, 30, 31, 34, 35, 37, 38, 39], "caus": 2, "flip": 2, "need": [2, 27, 29, 31, 32, 34, 35, 38, 39], "misclassifi": [2, 31, 32, 37], "certain": [2, 30, 31, 37, 38], "observ": [2, 7, 28, 29, 30, 31, 38], "example_2_data": 2, "demonstr": [2, 28, 30, 31, 34], "oct": [2, 34], "here": [2, 27, 28, 29, 30, 32, 37], "imbalanc": [2, 31, 37], "posit": [2, 3, 30, 35], "being": [2, 12, 21, 30, 31, 35], "minor": [2, 31, 37], "fairness_exampl": 2, "simul": [2, 30, 32], "fairoct": [2, 3, 30, 34], "protect": [2, 3, 30, 34, 35], "race": [2, 3, 31, 35, 37], "level": [2, 3, 11, 13, 30, 32, 37, 38], "b": [2, 10, 12, 20, 21, 22, 25, 26, 30], "w": [2, 21, 22], "In": [2, 4, 28, 30, 31, 34, 35, 37, 38, 39], "7": [2, 7, 20, 24, 26, 30, 31, 32, 39], "instanc": [2, 4, 7, 30, 37], "among": [2, 35, 37], "them": [2, 4, 35], "2": [2, 3, 4, 7, 12, 20, 24, 26, 29, 30, 34, 37], "also": [2, 3, 4, 24, 27, 30, 32, 37, 38], "breakdown": 2, "5w": 2, "4": [2, 3, 7, 20, 24, 26, 30, 32, 37], "2w": 2, "2b": 2, "5b": 2, "3": [2, 3, 7, 11, 13, 14, 18, 20, 24, 26, 30], "4w": 2, "3w": 2, "1b": 2, "6b": 2, "___________0_________": 2, "__________1_____________x1": 2, "protect_feat": [2, 3, 30], "legit_factor": [2, 3, 30], "legitim": [2, 3, 30, 35], "factor": [2, 3, 7, 30], "robust_exampl": [2, 32], "monk": [2, 32], "": [2, 11, 12, 13, 14, 27, 28, 30, 31, 32, 35, 37, 38, 39], "27": [2, 30, 31, 32], "fairconstrainedoct": [3, 34], "obj_mod": [3, 4, 28, 30, 31, 34, 37], "fairness_bound": [3, 30, 34, 35], "constrain": [3, 30], "framework": 3, "It": [3, 4, 7, 8, 9, 11, 13, 14, 20, 22, 26, 30, 31, 32, 37, 39], "includ": [3, 4, 5, 6, 8, 9, 11, 13, 14, 24, 28, 30, 31, 34, 35], "ad": [3, 7, 25, 29, 32, 35, 36], "extract": 3, "metadata": 3, "input": [3, 4, 7, 8, 13, 14, 20, 21, 22, 25, 26, 31, 32, 35, 37, 38], "defin": [3, 4, 5, 6, 7, 8, 9, 32, 34, 38], "regular": [3, 4, 5, 6, 30, 31, 32, 34], "must": [3, 4, 12, 29, 32, 35, 39], "interv": [3, 34], "acc": [3, 4, 28, 30, 31, 34, 37], "custom": [3, 4, 30, 37], "mode": [3, 4, 31], "accuraci": [3, 4, 30, 32, 34, 37], "weight": [3, 4, 5, 6, 7, 8, 9, 26, 30, 37], "bound": [3, 12, 18, 22, 25, 31, 32, 34, 35], "smaller": [3, 4, 30, 34, 37, 38], "stricter": [3, 34], "enforc": [3, 30, 34, 35], "maximum": [3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 18, 21, 22, 30, 32], "avail": [3, 4, 5, 6, 7, 8, 11, 12, 14, 24, 29, 30, 31, 32, 35, 37], "whether": [3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 18, 22, 25, 26, 30, 34, 35], "displai": [3, 11, 13, 14, 18, 30], "output": [3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 20, 30, 37, 38], "dure": [3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 30, 31, 37], "process": [3, 4, 5, 6, 7, 8, 9, 11, 13, 14, 21, 22, 24, 30, 31, 34, 35, 37], "note": [3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 26, 30, 31, 32], "instanti": [3, 4, 5, 6, 8, 9, 12], "directli": [3, 4, 5, 6, 7, 8, 9, 12, 31], "instead": [3, 5, 6, 8, 9, 11, 13, 14, 34], "fairspoct": [3, 34], "faircspoct": [3, 30, 34], "fairpeoct": [3, 30, 34], "faireoppoct": [3, 30], "faireoddsoct": [3, 30, 34], "expect": [3, 7, 27, 29, 30, 32, 39], "target": [3, 4, 13, 14, 18, 21, 22, 26, 28, 30, 31], "applic": [3, 28, 30, 35, 37, 38, 39], "same": [3, 4, 11, 13, 14, 20, 26, 31, 32, 35, 37, 39], "column": [3, 7, 11, 13, 14, 20, 24, 26, 30, 31, 32, 37, 38], "model": [3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 18, 21, 22, 24, 25, 28, 30, 31, 32, 37, 38, 39], "_obj_mod": [3, 34], "learn": [3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 20, 28, 31, 32, 34, 35, 37, 38, 39], "either": [3, 7, 8, 9, 11, 13, 26, 32, 37, 38], "_positive_class": [3, 34], "_fairness_bound": [3, 34], "_protect_feat_col_label": 3, "list": [3, 11, 13, 14, 18, 20, 21, 22, 24, 25, 26, 28, 31], "_protect_feat_col_dtyp": 3, "dtype": [3, 31], "_add_fairness_constraint": [3, 34], "p_df": [3, 34], "p_prime_df": [3, 34], "add": [3, 4, 22, 24, 25, 30, 31, 32], "group": [3, 29, 30, 34, 35, 38], "_extract_metadata": 3, "_define_object": [3, 4, 7, 8, 12, 34], "ndarrai": [3, 4, 7, 11, 13, 14, 26], "like": [3, 4, 7, 14, 20, 25, 26, 27, 30, 31, 34, 35, 38], "shape": [3, 4, 7, 14, 20, 25, 26, 28, 31, 32, 34, 39], "n_sampl": [3, 4, 7, 14, 20, 25, 26, 30], "n_featur": [3, 4, 7, 14, 20, 25, 26, 30], "sampl": [3, 4, 7, 8, 14, 20, 25, 26, 28, 31, 32, 34, 37, 39], "n_protected_featur": 3, "gender": [3, 30, 35], "prior": [3, 12], "crimin": 3, "act": 3, "equal": [3, 4, 12, 28, 30, 31, 34], "automat": [3, 4, 11, 13, 14, 18], "calcul": [3, 4, 30, 34], "self": [3, 4, 7, 14, 20, 34], "rais": [3, 4, 7, 11, 12, 13, 14, 26, 31], "valueerror": [3, 4, 7, 14, 26], "non": [3, 4, 7, 12, 14, 26, 30, 31, 32], "inconsist": [3, 4, 7, 14, 26], "doesn": [3, 4, 7], "t": [3, 4, 7, 8, 13, 22, 26, 28, 32], "match": [3, 4, 26, 35, 39], "assertionerror": [3, 7, 26], "rang": [3, 7, 24, 26, 30, 31, 32, 37, 39], "mix": [3, 4, 9, 11, 12, 13, 14, 24, 28, 37, 38], "integ": [3, 4, 7, 9, 10, 11, 12, 13, 14, 20, 22, 24, 25, 26, 28, 30, 31, 32, 39], "consid": [3, 12, 14, 30, 32], "up": [3, 4, 7, 14, 25, 30, 31, 32], "store": [3, 4, 7, 12, 14, 21, 25], "result": [3, 4, 7, 14, 24, 26, 30, 31, 32, 35, 37, 38, 39], "appli": [3, 4, 7, 30, 37, 38], "metric": [3, 32, 34], "subclass": [3, 8, 12], "statist": [3, 28, 31, 32, 34], "pariti": [3, 28, 34], "condit": [3, 28, 30, 34], "opportun": [3, 28, 30], "aim": [3, 4, 7, 22, 34], "maxim": [3, 4, 7, 10, 24, 25, 28, 31, 32, 34, 37, 38], "depend": [3, 4, 30], "satisfi": [3, 22, 30, 35], "behavior": [3, 4, 29], "initi": [3, 4, 21, 22, 25, 31, 34], "ignor": [3, 4, 20], "import": [3, 4, 7, 20, 24, 26, 28, 30, 31, 32, 37], "warn": [3, 4], "issu": [3, 4, 27, 28], "np": [3, 4, 7, 26, 28, 30, 31, 32, 37], "panda": [3, 4, 7, 13, 20, 22, 26, 28, 30, 31, 32], "core": [3, 4, 7, 20, 22, 26, 30, 31, 32], "frame": [3, 4, 7, 20, 22, 26, 37], "make": [3, 4, 7, 8, 9, 11, 12, 13, 14, 27, 30, 31, 32, 34, 35], "y_pred": [3, 4, 14], "notfittederror": [3, 4, 7, 11, 12, 13, 14], "been": [3, 4, 7, 11, 12, 13, 14, 34], "yet": [3, 4, 7, 11, 12, 13, 14, 35], "than": [3, 4, 7, 14, 26, 30, 31, 34, 37, 38], "classifi": [3, 4, 14, 21, 28, 31, 32, 35, 37], "branch": [3, 4, 5, 6, 7, 8, 9, 11, 13, 14, 21, 22, 24, 28, 30, 31, 37, 39], "until": [3, 4, 7, 14], "reach": [3, 4, 5, 6, 7, 8, 9, 14, 25, 28], "made": 3, "were": [3, 4], "impos": [3, 35], "howev": [3, 29, 30, 31, 34, 37, 38], "guarante": 3, "onli": [3, 4, 5, 6, 11, 12, 13, 14, 20, 24, 30, 31, 32, 37, 38], "hold": 3, "distribut": [3, 14, 28, 31, 32, 37], "properti": [3, 12, 30, 31], "mai": [3, 30, 31, 35, 37, 39], "preserv": 3, "x_train": [3, 4, 7, 28, 30, 31, 32], "y_train": [3, 4, 7, 28, 30, 31, 32], "clf": [3, 4, 37], "x_test": [3, 4, 7, 28, 30, 31, 32], "print": [3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 18, 26, 28, 30, 31, 32], "fals": [3, 4, 5, 6, 7, 8, 11, 12, 13, 14, 18, 24, 25, 26, 30, 31, 32, 34, 35], "requir": [3, 30, 31, 34, 35, 37, 38], "sp": [3, 34, 35], "between": [3, 5, 6, 7, 8, 11, 12, 13, 30, 32, 34, 35, 37, 39], "calc_metr": [3, 30], "seri": [3, 4, 7, 13, 26], "sp_dict": 3, "dict": [3, 5, 6, 8, 9, 11, 13, 14, 18, 20, 21, 22, 25], "dictionari": [3, 5, 6, 8, 9, 11, 13, 14, 18, 20, 21, 22, 25], "kei": [3, 5, 6, 8, 9, 25, 30], "p": [3, 22, 28, 30, 31, 32, 34, 35, 37, 38, 39], "where": [3, 7, 22, 24, 27, 28, 31, 32, 35, 37, 38, 39], "measur": [3, 32], "rate": [3, 30, 35, 37], "across": [3, 25, 30, 35, 37], "csp": [3, 35], "csp_dict": 3, "f": [3, 30, 31, 32, 39], "l": [3, 30, 32, 35], "equiti": [3, 34], "pe": [3, 35], "attempt": [3, 34, 37], "better": [3, 4, 31, 34], "gener": [3, 4, 18, 22, 24, 25, 29, 30, 31, 32, 34, 39], "true": [3, 7, 11, 12, 13, 14, 18, 21, 24, 26, 28, 30, 31, 34, 35, 38], "eq_dict": 3, "t_pred": [3, 7], "eopp": [3, 35], "oddt": 3, "eodd": [3, 35], "fairness_typ": [3, 35], "criteria": 3, "step": [3, 29, 37, 38], "odd": [3, 28, 30, 34], "want": [3, 28, 31, 34, 35], "get_sp": 3, "n_p": 3, "could": 3, "get_csp": 3, "legit_fact": 3, "get_eqodd": 3, "get_condeqodd": 3, "neg": 3, "ceq_dict": 3, "fairness_metric_summari": 3, "new_data": [3, 26, 31, 32], "summar": 3, "cpe": 3, "call": [3, 4, 22, 24, 25, 31, 32, 34, 37, 38], "obtain": [3, 7, 32, 37], "summari": 3, "check": [3, 22, 24, 26, 30], "error": [3, 26, 31, 38], "combin": [3, 7, 30, 31, 34, 38], "select": [3, 4, 28, 30], "protect_feat_train": 3, "legit_factor_train": 3, "male": [3, 30], "752475": 3, "247525": 3, "femal": [3, 30], "742574": 3, "257426": 3, "flowoct": [4, 5, 6, 28, 33, 37], "flowoctsinglesink": [4, 6], "produc": [4, 14, 32], "provabl": 4, "control": [4, 5, 6, 30, 35, 37, 39], "complex": [4, 5, 6, 30, 34], "singl": [4, 6, 9, 31], "sink": [4, 5, 6, 8, 9, 22], "basic": [4, 5, 6, 8], "out": [4, 28, 31], "allow": [4, 5, 6, 8, 9, 30, 32, 34, 37], "pass": [4, 22, 24, 25, 28, 30], "own": [4, 30], "preprocess": [4, 31, 37, 38], "main": [4, 21, 22, 24, 30, 37, 38], "take": [4, 22, 25, 28, 30, 32, 34, 38], "term": [4, 7, 25, 31, 37], "those": [4, 31], "categor": [4, 20, 30, 31, 37, 38], "hot": [4, 20, 31, 37, 38], "encod": [4, 20, 30, 31, 37, 38], "befor": [4, 24, 27], "bendersoct": [4, 21, 22, 37], "bender": [4, 21, 22, 32], "decomposit": [4, 32], "techniqu": [4, 38], "larg": [4, 34], "decompos": 4, "subproblem": [4, 21, 22], "context": [4, 30, 35], "master": [4, 21, 22, 29], "multipl": [4, 5, 8, 27, 31, 37], "datapoint": [4, 5, 6, 7, 8, 9, 13, 21, 22, 38], "focus": [4, 30], "fix": [4, 27], "iter": [4, 30, 31, 32], "converg": 4, "_define_vari": [4, 5, 6, 8, 9, 12], "_define_constraint": [4, 5, 6, 8, 9, 12], "proper": [4, 5, 6, 8, 9], "link": [4, 28], "cut": [4, 21, 22, 24, 30, 31, 32], "algorithm": [4, 28, 30, 31, 32, 35, 37], "faster": [4, 37], "compar": [4, 24, 30, 31], "especi": 4, "larger": [4, 27, 30, 37], "common": [5, 6, 8, 35], "idea": [5, 6, 8, 9], "behind": [5, 6], "through": [5, 6, 8, 9, 22, 25, 28, 29, 31, 32, 34, 37, 39], "leav": [5, 8, 11, 13, 14, 18, 31, 34], "characterist": [5, 6, 8, 9], "_b": [5, 6, 8, 9], "_p": [5, 6, 8, 9], "_w": [5, 6, 8, 9], "_zeta": [5, 6, 8, 34], "_z": [5, 6, 8, 9], "arc": [5, 6, 8, 34], "These": [5, 6, 8, 9, 30, 35], "valid": [5, 6, 8, 9, 10, 12, 23, 29, 30], "its": [5, 6, 11, 13, 14, 22, 24, 26, 28, 37, 38], "repres": [5, 6, 7, 8, 9, 11, 13, 14, 21, 22, 28, 30, 31, 39], "continu": [5, 6, 8, 9, 10, 24, 30, 31, 32, 37], "_tree_struc_vari": [5, 6, 8, 9], "relat": [5, 6, 8, 9, 30], "_flow_vari": [5, 6, 8, 9], "_tree_structure_constraint": [5, 6, 8, 9], "_flow_constraint": [5, 6, 8, 9], "_arc_constraint": [5, 6, 8], "incom": [6, 30, 31], "flowopt_ipw": [7, 9, 38], "flowoptsinglesink": [7, 9], "invers": [7, 26], "probabl": [7, 26, 30, 32, 35, 38, 39], "ipw": [7, 26], "300": [7, 13, 32], "friendli": 7, "account": [7, 22, 31, 32, 37], "potenti": [7, 14, 26, 30, 31, 32, 37], "confound": 7, "estim": [7, 12, 38, 39], "causal": 7, "effect": [7, 30, 31], "treatment": [7, 8, 9, 11, 13, 26, 28, 30, 35, 37, 38], "comput": [7, 12, 31, 32], "propens": 7, "score": [7, 35, 38], "receiv": [7, 30, 35, 38], "_ipw": 7, "overrid": 7, "accept": [7, 25, 30], "argument": [7, 18, 25, 30, 34, 37], "sum": [7, 25, 28, 31, 32], "product": 7, "assign": [7, 21, 22, 24, 28, 32, 38], "print_tre": [7, 9, 11, 13, 14, 28, 31, 32], "plot_tre": [7, 9, 11, 13, 14, 30, 31, 32], "opt_tre": 7, "600": 7, "x_new": 7, "plot": [7, 11, 12, 13, 14, 18, 30, 31], "outsid": 7, "8": [7, 11, 12, 13, 14, 24, 26, 30, 31, 32], "9": [7, 20, 24, 30, 31, 32], "6": [7, 24, 26, 30, 31, 32], "opt": 7, "recommend": [7, 8, 9, 13, 27, 29, 30, 37], "t_train": 7, "ipw_train": 7, "flowopt_dm": [7, 8, 38], "flowoptmultiplesink": [7, 8], "direct": [7, 28, 37], "dm": 7, "counterfactu": [7, 26, 38], "y_hat": [7, 26, 38], "individu": [7, 35, 38], "under": [7, 25], "scenario": [7, 30, 31, 32, 37], "python": [7, 12, 24, 25, 28], "n_treatment": [7, 26], "2d": 7, "row": [7, 24, 30, 31, 32], "correct": [7, 27, 29], "y_hat_train": 7, "flowopt_dr": [7, 8, 38], "doubli": 7, "robust": [7, 14, 22, 28, 32, 36], "dr": 7, "both": [7, 30, 31, 38, 39], "along": [7, 21, 22], "plu": 7, "adjust": [7, 11, 13, 18, 30], "handl": 8, "kwarg": [8, 11, 13, 22, 25], "program": [9, 11, 12, 13, 24], "treeplott": [10, 23], "binar": [10, 23, 30, 37, 38], "callback_help": [10, 23], "callback": [10, 23, 24, 25, 31, 32], "min": [10, 19, 32], "max": 10, "minim": [10, 22, 25], "c": [10, 20, 24, 25, 26, 31, 32], "b_valu": [11, 13], "w_valu": [11, 13], "p_valu": [11, 13], "prune": [11, 13, 31, 32], "matplotlib": [11, 12, 13, 14, 18, 30, 31, 32], "text": [11, 13, 14], "represent": [11, 13, 14, 18], "threshold": [11, 13, 14, 21, 39], "assert": [11, 14], "manner": [11, 13, 14, 27], "index": [11, 13, 14, 21, 22, 26, 31, 34], "intern": [11, 13, 14, 38], "fill": [11, 13, 14, 18], "round": [11, 13, 14, 18], "precis": [11, 13, 14, 18], "ax": [11, 12, 13, 14, 18, 30, 31, 32], "fontsiz": [11, 13, 14, 18, 31], "color_dict": [11, 13, 14, 18, 31], "edge_annot": [11, 13, 14, 18], "arrow_annotation_font_scal": [11, 13, 14, 18], "debug": [11, 13, 14, 18], "distanc": [11, 13, 18, 19, 30, 37], "feature_nam": [11, 13, 14, 24, 30], "root": [11, 13, 14, 18, 22, 28, 30, 31, 32, 37], "impur": [11, 13, 14], "everi": [11, 13, 14, 22], "top": [11, 13, 14, 25, 34], "paint": [11, 13, 14], "indic": [11, 13, 14, 22, 25, 30, 37], "major": [11, 13, 14, 31, 37], "draw": [11, 13, 14], "box": [11, 13, 14, 18, 27], "corner": [11, 13, 14, 18], "helvetica": [11, 13, 14], "font": [11, 12, 13, 14, 18], "roman": [11, 13, 14], "digit": [11, 13, 14], "axi": [11, 12, 13, 14, 18, 30], "previou": [11, 12, 13, 14, 30], "clear": [11, 12, 13, 14], "size": [11, 12, 13, 14, 18, 30, 31, 32], "determin": [11, 13, 14, 30], "color": [11, 12, 13, 14, 18], "annot": [11, 13, 14, 18], "edg": [11, 13, 14, 18, 22], "arrow": [11, 13, 14, 18], "order": [11, 13, 14, 30, 31, 38], "abc": 12, "cannot": 12, "solver_nam": [12, 24, 25], "optim_gap": [12, 30, 31], "gap": [12, 30, 31, 32, 37], "best": [12, 21, 28, 30, 31, 32, 37], "objective_valu": 12, "wa": [12, 25, 30, 31, 32], "objective_bound": 12, "num_decision_var": 12, "num_integer_var": 12, "num_non_zero": 12, "zero": [12, 30, 35, 37], "matrix": [12, 30, 31, 32, 37, 39], "num_solut": [12, 30, 31], "num_constraint": 12, "search_progress_log": 12, "progresslog": 12, "log": [12, 14, 30, 31, 32], "improv": [12, 37], "store_search_progress_log": 12, "search": 12, "progress": [12, 30], "boolean": [12, 22, 25], "As": [12, 31, 32, 35, 39], "disabl": [12, 35], "enabl": [12, 37], "analyz": 12, "over": [12, 31, 32, 37, 39], "plot_search_progress": 12, "titl": 12, "xlabel": 12, "ylabel": 12, "lw": 12, "alpha": 12, "legend_loc": 12, "legend_fonts": 12, "grid": 12, "color_ub": 12, "color_lb": 12, "r": 12, "log_scal": 12, "lower": [12, 25, 30, 37, 38], "upper": [12, 25], "line": [12, 29, 35], "width": [12, 20], "blend": 12, "transpar": 12, "opaqu": 12, "locat": 12, "legend": 12, "attributeerror": 12, "record": [12, 32], "_x": 13, "_x_col_label": 13, "_x_col_dtyp": 13, "_y": 13, "_t": 13, "_label": 13, "uniqu": [13, 26, 28, 34], "_treatment": 13, "_datapoint": 13, "robustoct": [14, 21, 33], "1800": 14, "budget": [14, 32, 39], "against": [14, 26, 28, 32], "shift": [14, 19, 28], "flag": [14, 21], "adversari": [14, 28, 32, 39], "perturb": [14, 21, 22, 32], "extrem": 14, "regress": 14, "puriti": 14, "multi": 14, "rrggbb": 14, "format": [14, 18, 28, 31], "chosen": [14, 30], "sklearn": [14, 18, 20, 28, 30, 31, 32], "palett": 14, "mplplotter": [14, 18], "pytest_addopt": 15, "parser": 15, "pytest_configur": 15, "config": 15, "skip_solv": 15, "request": [15, 27, 35], "node_dict": 18, "column_nam": 18, "max_depth": 18, "model_nam": 18, "_export": 18, "_mpltreeexport": 18, "decim": 18, "place": 18, "cutoff": [18, 21, 22, 24, 31, 32], "class_nam": 18, "color_opt": 18, "charact": 18, "special": 18, "bbox_arg": 18, "arrow_arg": 18, "style": 18, "get_fill_color": 18, "node_id": [18, 19], "node_to_str": 18, "selected_featur": 18, "convert": [18, 26], "export": [18, 29], "recurs": 18, "max_x": 18, "max_i": 18, "drawtre": 19, "lmost_sibl": 19, "left": [19, 21, 22, 28], "right": [19, 21, 22, 28], "lbrother": 19, "get_lmost_s": 19, "max_ext": 19, "buchheim": 19, "third_walk": 19, "n": [19, 21, 24, 28, 30, 32, 34, 35, 38, 39], "first_walk": 19, "v": [19, 21, 22], "apport": 19, "default_ancestor": 19, "move_subtre": 19, "wl": 19, "wr": 19, "execute_shift": 19, "ancestor": 19, "vil": 19, "second_walk": 19, "m": [19, 24, 31], "categorical_col": [20, 31, 37], "integer_col": [20, 31, 37], "real_col": [20, 30, 31, 37], "n_bin": [20, 31, 37], "bin_strategi": 20, "uniform": [20, 37], "baseestim": 20, "transformermixin": 20, "transform": [20, 30, 31], "real": [20, 24, 30, 31, 37], "scikit": [20, 31], "paradigm": [20, 31], "pipelin": [20, 31], "discret": [20, 31, 37], "bin": [20, 31, 37], "quantil": 20, "ident": 20, "pd": [20, 26, 28, 30, 31, 32], "df": [20, 26, 30, 31, 37], "cat": 20, "x_bin": 20, "fit_transform": [20, 30, 31], "encoders_": 20, "column_names_": 20, "scheme": [20, 31], "exist": [20, 37], "compat": 20, "There": [20, 28, 29], "na": 20, "consist": [20, 25], "get_left_exp_integ": 21, "main_grb_obj": 21, "entiti": 21, "linexpr": [21, 24, 25], "get": [21, 22, 25, 29, 31, 32, 35], "express": [21, 24, 25], "lh": 21, "hand": [21, 30, 38], "get_right_exp_integ": 21, "get_target_exp_integ": 21, "get_cut_integ": 21, "get_cut_express": 21, "path": [21, 22, 28, 29], "xi": [21, 22], "f_theta_indic": 21, "pair": 21, "expr": [21, 25], "get_all_terminal_path": 21, "terminal_nod": [21, 22], "path_dict": 21, "feature_path_dict": 21, "assignment_dict": 21, "cutoff_dict": 21, "curr_nod": 21, "curr_path": 21, "curr_feature_path": 21, "curr_cutoff_path": 21, "find": [21, 22, 27, 31, 37], "termin": [21, 22, 29], "updat": 21, "get_nominal_path": 21, "nomin": 21, "correctli": [21, 37], "shortest_path_solv": 21, "terminal_path_dict": [21, 22], "terminal_features_dict": [21, 22], "terminal_assignments_dict": [21, 22], "terminal_cutoffs_dict": [21, 22], "initial_xi": [21, 22], "initial_min": [21, 22], "initial_max": [21, 22], "shortest": [21, 22], "minimum": [21, 22], "benders_subproblem": 22, "main_model_obj": 22, "str_": 22, "int64": 22, "benderscallback": 22, "obj": [22, 24, 25, 30, 31, 32], "constrsgener": [22, 25], "sub": 22, "violat": 22, "lazi": [22, 29, 31, 32], "proce": 22, "whenev": 22, "mean": [22, 30, 31], "generate_constr": 22, "npass": [22, 24], "robust_tree_subproblem": 22, "map": [22, 30], "encount": 22, "empti": 22, "element": [22, 25, 37], "whose": 22, "part": [22, 31], "achiev": [22, 30, 31, 34], "robustbenderscallback": 22, "coin": [24, 29, 30], "OR": [24, 30], "logger": 24, "warningmessag": 24, "ffi": 24, "has_cbc": 24, "os_is_64_bit": 24, "inf": [24, 25, 30], "cut_idx": 24, "max_name_s": 24, "512": 24, "def_pumpp": 24, "30": [24, 30, 31, 32], "pathmip": 24, "char_on": 24, "char_zero": 24, "dbl_param_primal_tol": 24, "dbl_param_dual_tol": 24, "dbl_param_zero_tol": 24, "dbl_param_int_tol": 24, "dbl_param_presolve_tol": 24, "dbl_param_time_limit": 24, "dbl_param_psi": 24, "dbl_param_cutoff": 24, "dbl_param_allowable_gap": 24, "dbl_param_gap_ratio": 24, "dbl_param_max_secs_not_improv_f": 24, "10": [24, 29, 30, 31, 32, 37], "int_param_pert_valu": 24, "int_param_idiot": 24, "int_param_strong_branch": 24, "int_param_cut_depth": 24, "int_param_max_nod": 24, "int_param_number_befor": 24, "int_param_fpump_it": 24, "int_param_max_sol": 24, "int_param_cut_pass_in_tre": 24, "int_param_thread": 24, "int_param_cut_pass": 24, "int_param_log_level": 24, "11": [24, 30, 31, 32], "int_param_max_saved_sol": 24, "12": [24, 30, 31, 32], "int_param_multiple_root": 24, "13": [24, 30, 31, 32], "int_param_round_int_var": 24, "14": [24, 30, 31, 32], "int_param_random_se": 24, "15": [24, 30, 31, 32], "int_param_elapsed_tim": 24, "16": [24, 30, 31, 32], "int_param_cgraph": 24, "17": [24, 30, 31], "int_param_clique_merg": 24, "18": [24, 30, 31, 32], "int_param_max_nodes_not_improv_f": 24, "19": [24, 30, 31, 32], "osi_getnumcol": 24, "osi_getcolsolut": 24, "osi_getintegertoler": 24, "osi_isinteg": 24, "osi_isprovenoptim": 24, "cbc_setintparam": 24, "cbc_setdblparam": 24, "cbc_getsolverptr": 24, "cbc_generatecut": 24, "cbc_solvelinearprogram": 24, "cbc_reset": 24, "cbc_computefeatur": 24, "cbc_nfeatur": 24, "cbc_featurenam": 24, "osicuts_new": 24, "osicuts_addrowcut": 24, "osicuts_addglobalrowcut": 24, "osicuts_sizerowcut": 24, "osicuts_nzrowcut": 24, "osicuts_idxrowcut": 24, "osicuts_coefrowcut": 24, "osicuts_rhsrowcut": 24, "osicuts_senserowcut": 24, "osicuts_delet": 24, "cbc_set_paramet": 24, "param": 24, "solvercbc": [24, 25], "sens": [24, 25], "independ": [24, 35], "api": [24, 28], "commun": [24, 30], "engin": 24, "add_var": [24, 25], "lb": [24, 25], "ub": [24, 25], "coltyp": 24, "update_conflict_graph": 24, "cgraph_dens": 24, "densiti": 24, "conflict": 24, "graph": 24, "e1": 24, "var": 24, "e2": 24, "conflicting_nod": 24, "v1": 24, "get_objective_const": 24, "get_object": 24, "set_object": [24, 25], "lin_expr": [24, 25], "relax": [24, 30, 31, 32], "get_max_second": 24, "set_max_second": 24, "max_second": 24, "get_max_solut": 24, "set_max_solut": 24, "max_solut": 24, "get_max_nod": 24, "set_max_nod": 24, "max_nod": 24, "get_verbos": 24, "set_verbos": 24, "var_set_var_typ": 24, "var_set_obj": 24, "generate_cut": 24, "cut_typ": 24, "cuttyp": 24, "max_cut": 24, "maxsiz": 24, "min_viol": 24, "0001": 24, "cutpool": 24, "clique_merg": 24, "constr": 24, "optimizationstatu": 24, "get_objective_sens": 24, "set_objective_sens": 24, "get_objective_valu": 24, "get_statu": 24, "get_log": 24, "get_objective_bound": 24, "var_get_x": 24, "assum": 24, "get_num_solut": 24, "get_objective_value_i": 24, "var_get_xi": 24, "var_get_rc": 24, "var_get_lb": 24, "var_set_lb": 24, "var_get_ub": 24, "var_set_ub": 24, "var_get_nam": 24, "idx": 24, "var_get_index": 24, "var_get_branch_prior": 24, "constr_get_index": 24, "constr_get_rh": 24, "constr_set_rh": 24, "rh": [24, 30, 31, 32], "var_get_obj": 24, "var_get_var_typ": 24, "var_set_column": 24, "var_get_column": 24, "add_constr": [24, 25, 34], "add_lazy_constr": 24, "add_so": 24, "so": [24, 29, 38], "sos_typ": 24, "add_cut": 24, "write": [24, 27, 28], "file_path": 24, "read": [24, 27, 28, 29, 30, 31], "set_start": 24, "start": [24, 29, 30], "num_col": 24, "num_int": 24, "num_row": 24, "num_nz": 24, "get_cutoff": 24, "set_cutoff": 24, "get_mip_gap_ab": 24, "set_mip_gap_ab": 24, "allowable_gap": 24, "get_mip_gap": 24, "set_mip_gap": 24, "allowable_ratio_gap": 24, "constr_get_expr": 24, "constr_get_nam": 24, "set_processing_limit": 24, "max_tim": 24, "int_max": 24, "max_sol": 24, "max_seconds_same_incumb": 24, "max_nodes_same_incumb": 24, "get_emphasi": 24, "searchemphasi": 24, "set_emphasi": 24, "emph": 24, "set_num_thread": 24, "remove_constr": 24, "remove_var": 24, "varslist": 24, "get_problem_nam": 24, "set_problem_nam": 24, "get_pump_pass": 24, "set_pump_pass": 24, "constr_get_pi": 24, "constr_get_slack": 24, "feature_valu": 24, "reset": 24, "modelosi": 24, "osi_ptr": 24, "queri": 24, "re": 24, "To": [24, 29, 32, 34, 37, 39], "pleas": [24, 27, 28, 34], "varlist": 24, "constrlist": 24, "var_typ": 24, "statu": [24, 35], "refer": [24, 26], "arg": 24, "linear": [24, 25], "save": 24, "lp": [24, 30, 31], "mp": 24, "file": [24, 29], "prioriti": 24, "constant": [24, 25], "constraintprior": 24, "x_1": [24, 32], "x_2": [24, 32], "leq": [24, 37], "equival": [24, 35], "summat": 24, "displaystyl": 24, "sum_": 24, "x_i": 24, "cons1": 24, "xsum": 24, "solverosi": 24, "null": 24, "osisolverinterfac": 24, "restrict": 24, "mainli": 24, "pre": 24, "set_objective_const": 24, "const": 24, "mip_gap_ab": 24, "mip_gap": 24, "constr_set_expr": 24, "constrslist": 24, "var_set_branch_prior": 24, "grb_cbc_const_map": 25, "wrapper": 25, "interact": 25, "slightli": [25, 30], "modifi": [25, 34], "version": [25, 29, 30, 31, 32], "get_var_valu": 25, "var_nam": 25, "suppli": 25, "callback_act": 25, "decisiontre": 25, "copi": [25, 32], "action": 25, "prep_indic": 25, "helper": 25, "prep": 25, "mimic": 25, "vtype": 25, "arbitrari": [25, 35], "doubl": 25, "coeffici": [25, 30, 31, 32], "cons_expr_tupl": 25, "cons_expr": 25, "arg1": 25, "init": 25, "grb": 25, "quicksum": [25, 34], "store_data": 25, "For": [25, 26, 28, 29, 30, 31, 32, 34, 35, 37, 38, 39], "typic": [25, 30, 35, 38], "privat": 25, "_data_var": 25, "_data": 25, "check_ipw": 26, "validated_ipw": 26, "check_y_hat": 26, "dimens": 26, "validated_y_hat": 26, "check_i": 26, "validated_i": 26, "check_columns_match": 26, "original_column": 26, "origin": [26, 31, 35, 37, 38], "otherwis": 26, "present": 26, "perform": [26, 28, 30, 31, 32, 37, 39], "length": 26, "original_col": 26, "check_binari": 26, "identifi": 26, "check_integ": 26, "check_same_as_x": 26, "x_col_label": 26, "g_label": 26, "messag": 26, "wasn": 26, "alreadi": 26, "keyerror": 26, "don": [26, 28, 32], "typeerror": 26, "welcom": 27, "cover": [27, 30, 31], "wai": [27, 28, 30, 31], "you": [27, 28, 29, 30, 31, 32, 37], "project": 27, "everyon": [27, 38], "particip": 27, "govern": [27, 35], "By": [27, 30, 31, 35, 37], "uphold": 27, "doc": [27, 28], "written": 27, "markdown": 27, "built": [27, 31], "sphinx": 27, "your": [27, 29, 30, 31, 32], "small": [27, 30, 31, 32, 37], "typo": 27, "sentenc": 27, "easiest": 27, "via": [27, 37], "github": [27, 29], "onlin": 27, "editor": 27, "help": [27, 28, 30, 35, 37, 39], "touch": 27, "local": 27, "git": [27, 29], "submit": 27, "pull": 27, "sure": 27, "info": 27, "bodi": 27, "post": 27, "stackoverflow": 27, "page": 27, "reproduc": 27, "resolv": 27, "interpret": [28, 37], "machin": [28, 30, 31, 32, 35, 37, 38, 39], "routin": [28, 37], "involv": [28, 37], "eman": 28, "resp": 28, "fail": 28, "respect": [28, 29], "thu": [28, 29, 32, 37], "rule": 28, "goal": [28, 30, 34], "design": 28, "relev": 28, "variou": 28, "develop": 28, "univers": [28, 31, 32], "southern": 28, "california": [28, 31, 32], "technologi": 28, "varieti": 28, "strongtre": [28, 37], "aghaei": [28, 31, 32, 35, 37, 38, 39], "et": [28, 35, 37, 38, 39], "al": [28, 35, 37, 38, 39], "2021": [28, 31, 35, 37, 38, 39], "fairtre": [28, 35], "notion": [28, 34, 35], "jo": [28, 35, 38], "justin": [28, 32, 39], "prescriptivetre": 28, "few": 28, "instal": 28, "overview": [28, 30], "review": 28, "know": 28, "look": [28, 30], "run": [28, 29, 31], "walk": 28, "sever": [28, 30], "toi": [28, 30, 31], "particular": [28, 34, 38], "complet": [28, 34, 35, 37, 38, 39], "go": 28, "section": [28, 30, 31, 35], "peopl": [28, 35, 38], "contribut": 28, "extens": [28, 35], "worri": 28, "script": 28, "consult": 28, "model_select": [28, 30, 31, 32], "train_test_split": [28, 30, 31, 32], "read_csv": 28, "scale_enc": 28, "csv": 28, "pop": [28, 31], "y_test": [28, 30, 31, 32], "test_siz": [28, 30, 31, 32], "33": [28, 30, 31, 32], "random_st": [28, 30, 31, 32], "42": [28, 30, 31, 32], "stcl": [28, 31], "100": [28, 30, 31, 32], "test_pr": [28, 31], "g\u00f3mez": [28, 31, 32, 35, 37, 38, 39], "vayano": [28, 31, 32, 35, 37, 38, 39], "strong": [28, 31, 32, 37], "arxiv": [28, 31, 34, 35, 37, 38], "preprint": [28, 31, 35, 37, 38], "2103": [28, 31, 37], "15965": [28, 31, 37], "benson": [28, 35], "j": [28, 35], "2022": [28, 32, 35, 38, 39], "2201": [28, 34, 35], "09932": [28, 34, 35], "gomez": 28, "aaai": [28, 32, 39], "22": [28, 31], "workshop": [28, 32, 39], "beyond": [28, 32, 39], "2108": [28, 38], "13628": [28, 38], "explain": 29, "download": 29, "highli": 29, "virtual": 29, "environ": [29, 39], "mani": [29, 30, 37, 38, 39], "manag": [29, 37], "pipenv": 29, "foundat": 29, "command": 29, "pip": 29, "com": 29, "d3m": 29, "egg": 29, "free": 29, "academ": [29, 30, 31, 32], "64": [29, 31], "bit": 29, "window": 29, "linux": 29, "maco": 29, "intel": 29, "hardwar": 29, "seem": 29, "work": [29, 30, 31, 32, 37], "properli": 29, "some": [29, 32, 35, 39], "strongli": 29, "below": [29, 34, 38], "compil": 29, "coinbrew": 29, "mkdir": 29, "cd": 29, "wget": 29, "nh": 29, "raw": 29, "githubusercont": 29, "chmod": 29, "u": 29, "bash": 29, "fetch": [29, 32], "prompt": 29, "stabl": 29, "dyld_library_path": 29, "TO": 29, "dist": 29, "lib": 29, "pmip_cbc_librari": 29, "platform_specific_shared_lib": 29, "last": 29, "critic": 29, "share": 29, "librari": 29, "libcbc": 29, "dll": 29, "dylib": 29, "libcbcsolv": 29, "persist": 29, "suggest": 29, "zshrc": 29, "bashrc": 29, "pyplot": [30, 31, 32], "plt": [30, 31, 32], "make_classif": 30, "odtlearn": [30, 31, 32, 34, 37, 38], "focu": [30, 37], "addition": 30, "introduc": [30, 35], "synthet": 30, "ag": [30, 31, 35, 37, 38], "credit_scor": 30, "employment_statu": 30, "education_level": 30, "previous_default": 30, "loan_approv": 30, "deni": 30, "lead": [30, 34], "overfit": [30, 37], "gradual": 30, "increas": [30, 31, 32, 34, 35, 37], "monitor": 30, "trade": 30, "off": [30, 32], "higher": [30, 31, 37], "simpler": 30, "01": [30, 31, 32], "tune": [30, 32, 39], "cross": 30, "choic": 30, "close": [30, 38], "decreas": [30, 32], "open": 30, "case": [30, 31, 32, 37], "n_inform": 30, "n_redund": 30, "n_class": 30, "random": [30, 31, 32, 38], "split": [30, 32, 37], "gender_train": 30, "gender_test": 30, "prev_default_train": 30, "prev_default_test": 30, "drop": [30, 31], "would": [30, 32, 34, 35, 38], "pretend": 30, "feat_binar": 30, "x_train_bin": 30, "x_test_bin": 30, "let": [30, 31], "investig": [30, 31], "fcl_less_strict": 30, "usernam": [30, 31, 32], "licens": [30, 31, 32], "commerci": [30, 31, 32], "expir": [30, 31, 32], "2025": [30, 31], "06": [30, 31, 32], "28": [30, 31, 32], "timelimit": [30, 31, 32], "reshap": 30, "nodelimit": [30, 31, 32], "1073741824": [30, 31, 32], "solutionlimit": [30, 31, 32], "intfeastol": [30, 31, 32], "1e": [30, 31, 32], "v10": [30, 31, 32], "2rc0": [30, 31, 32], "mac64": [30, 31, 32], "arm": [30, 31, 32], "cpu": [30, 31, 32], "appl": [30, 31, 32], "m1": [30, 31, 32], "pro": [30, 31, 32], "count": [30, 31, 32], "physic": [30, 31, 32], "logic": [30, 31, 32], "processor": [30, 31, 32], "7232": 30, "3785": 30, "29354": 30, "nonzero": [30, 31, 32], "fingerprint": [30, 31, 32], "0x74d1434c": 30, "3755": 30, "2e": [30, 31, 32], "02": [30, 31, 32], "00": [30, 31, 32], "heurist": [30, 31, 37], "56": [30, 31, 32], "4300000": 30, "presolv": [30, 31, 32], "remov": [30, 31, 32], "3367": 30, "968": 30, "3865": 30, "2817": 30, "21981": 30, "2789": 30, "2787": 30, "concurr": [30, 31], "primal": [30, 31], "simplex": [30, 31, 32], "dual": [30, 31], "barrier": [30, 31], "dens": 30, "col": 30, "31": [30, 31, 32], "aa": 30, "39": [30, 31, 32], "nz": 30, "482e": 30, "04": [30, 31, 32], "109e": 30, "05": [30, 31, 32], "roughli": 30, "mb": 30, "memori": 30, "op": 30, "778e": 30, "07": [30, 31], "per": 30, "residu": 30, "compl": 30, "56909950e": 30, "03": [30, 31, 32], "58565472e": 30, "51e": 30, "35e": 30, "49e": 30, "60802983e": 30, "16301390e": 30, "84e": 30, "38e": 30, "52e": 30, "96532833e": 30, "88091169e": 30, "79e": 30, "30e": 30, "83e": 30, "36": [30, 31, 32], "unit": [30, 31, 32], "interrupt": [30, 31], "918167e": 30, "2573": 30, "09": [30, 31], "21": [30, 31, 32], "expl": [30, 31, 32], "unexpl": [30, 31, 32], "intinf": [30, 31, 32], "incumb": [30, 31, 32], "bestbd": [30, 31, 32], "79": [30, 31, 32], "18167": 30, "562": 30, "43000": 30, "40": [30, 31, 32], "18070": 30, "623": 30, "h": [30, 31, 32], "62": [30, 31, 32], "3400000": 30, "18036": 30, "627": 30, "34000": 30, "17947": 30, "754": 30, "762": 30, "69": [30, 31, 32], "2700000": 30, "17909": 30, "70": [30, 31, 32], "2600000": 30, "766": 30, "26000": 30, "751": 30, "752": 30, "761": 30, "734": [30, 31], "17881": 30, "721": 30, "17870": 30, "728": 30, "746": 30, "717": 30, "17869": 30, "706": 30, "34": [30, 31, 32], "71": 30, "2500000": [30, 32], "17795": 30, "187": [30, 31], "45": [30, 31, 32], "72": [30, 31, 32], "2200000": 30, "63": [30, 31], "149": 30, "141": [30, 31], "85": [30, 31, 32], "73": [30, 31], "2000000": 30, "180": 30, "144": [30, 31], "74": 30, "1900000": 30, "240": 30, "136": 30, "75": [30, 31], "1800000": 30, "32": [30, 31, 32], "688": 30, "274": [30, 31], "16667": [30, 31], "29": [30, 31, 32], "151": [30, 32], "3597": 30, "576": 30, "infeas": 30, "19000": 30, "77": [30, 31, 32], "66150": 30, "98": 30, "3764": 30, "489": 30, "76": [30, 31], "1600000": 30, "65583": 30, "96": [30, 31], "97": 30, "plane": [30, 31, 32], "gomori": [30, 31, 32], "26": [30, 31, 32], "mir": [30, 31, 32], "proof": [30, 37], "half": 30, "20": [30, 31, 32], "explor": [30, 31, 32], "5582": 30, "514386": 30, "toler": [30, 31, 32], "00e": [30, 31, 32], "616000000000e": 30, "0000": [30, 31, 32], "justifi": [30, 31, 35], "number_of_default": 30, "choos": [30, 35], "versu": 30, "deem": [30, 37], "influenc": [30, 31], "domain": [30, 32, 35, 37, 39], "knowledg": [30, 32, 39], "societ": 30, "norm": 30, "might": [30, 31], "unfair": 30, "carefulli": 30, "avoid": [30, 37], "perpetu": 30, "bias": [30, 38], "discrimin": [30, 35], "unfairli": 30, "disadvantag": 30, "essenti": 30, "engag": 30, "expert": 30, "stakehold": 30, "sole": 30, "purpos": 30, "align": 30, "sp_metric": 30, "item": 30, "928571": 30, "500000": 30, "071429": 30, "test_acc": 30, "3f": 30, "850": 30, "notic": 30, "shorter": 30, "easier": 30, "fig": [30, 31, 32], "subplot": [30, 31, 32], "figsiz": [30, 31, 32], "age_0": 30, "age_1": 30, "age_2": 30, "age_3": 30, "income_0": [30, 31], "income_1": [30, 31], "income_2": [30, 31], "income_3": [30, 31], "c_0": 30, "c_1": 30, "c_2": 30, "c_3": 30, "emp_0": 30, "emp_1": 30, "emp_2": 30, "emp_3": 30, "edu_0": 30, "edu_1": 30, "edu_2": 30, "edu_3": 30, "fcl_strict": 30, "0x7a7d351": 30, "5e": [30, 31], "56897422e": 30, "58312641e": 30, "60794849e": 30, "16134346e": 30, "96551428e": 30, "88011056e": 30, "11e": 30, "05663007e": 30, "30675595e": 30, "41e": 30, "26e": 30, "77e": 30, "58629616e": 30, "29251644e": 30, "53e": 30, "13e": 30, "50336865e": 30, "43154251e": 30, "47e": 30, "50e": 30, "07618020e": 30, "01799613e": 30, "57e": 30, "46e": 30, "71322505e": 30, "18862169e": 30, "40e": 30, "31e": 30, "91254856e": 30, "92213777e": 30, "65e": 30, "45e": 30, "07e": 30, "91623691e": 30, "92031912e": 30, "24e": 30, "70e": 30, "08": 30, "55e": 30, "91746197e": 30, "91934019e": 30, "97e": 30, "95e": 30, "09e": 30, "91797439e": 30, "91859055e": 30, "34e": 30, "88e": 30, "91812351e": 30, "91835130e": 30, "08e": 30, "54e": 30, "91814581e": 30, "91818461e": 30, "56e": 30, "12e": 30, "36e": 30, "91816584e": 30, "91816746e": 30, "60e": 30, "81e": 30, "91816667e": 30, "68e": 30, "14e": 30, "82e": 30, "322": [30, 31], "708": 30, "18130": 30, "694": 30, "664": 30, "18000": 30, "755": 30, "771": 30, "3600000": 30, "767": 30, "36000": 30, "17882": 30, "757": 30, "17838": 30, "20000": 30, "47": [30, 31, 32], "209": [30, 31], "266": 30, "99": [30, 31, 32], "164": 30, "1831": 30, "427": 30, "84500": 30, "295": 30, "78": [30, 32], "19003": 30, "124": [30, 32], "4038": 30, "448": 30, "16000": 30, "104": 30, "5421": 30, "516269": 30, "90": [30, 32], "48": [30, 31, 32], "43": [30, 32], "again": 30, "evalu": [30, 38], "contrast": 30, "much": [30, 37, 39], "closer": 30, "becaus": [30, 37, 38], "abil": 30, "impact": 30, "now": [30, 31, 32, 34], "seen": [30, 31], "captur": 30, "aspect": 30, "similar": [30, 31, 34, 35, 38], "definit": 30, "equat": 30, "hat": 30, "foral": 30, "crucial": [30, 37], "legal": 30, "overal": [30, 31], "proport": 30, "appropri": [30, 35], "mistak": 30, "suitabl": 30, "ongo": 30, "care": [30, 38], "consider": 30, "understand": [30, 31], "most": [30, 35, 37, 38, 39], "integr": 31, "number_of_child_list": 31, "age_list": 31, "race_list": 31, "black": 31, "white": 31, "hispan": 31, "sex_list": 31, "income_list": 31, "50000": [31, 32], "75000": [31, 32], "100000": 31, "60000": 31, "80000": 31, "55000": [31, 32], "90000": 31, "70000": 31, "85000": 31, "65000": 31, "zip": 31, "sex": [31, 37], "num_child": [31, 37], "df_enc": 31, "sex_m": 31, "race_black": 31, "race_hispan": 31, "race_whit": 31, "num_child_1": 31, "num_child_2": 31, "num_child_3": 31, "num_child_4": 31, "age_10": 31, "age_20": 31, "age_30": 31, "age_40": 31, "income_4": 31, "greater": 31, "readi": 31, "new_data_enc": 31, "categori": [31, 35], "refit": 31, "possibl": [31, 34, 37], "studi": 31, "simpl": 31, "intuit": 31, "110": 31, "89": 31, "250": 31, "0x5e9209d1": 31, "84": 31, "102": 31, "82": [31, 32], "0000000": [31, 32], "000000e": 31, "00000": [31, 32], "000000000000e": 31, "7692307692307693": 31, "access": [31, 35], "_solver": [31, 34], "after": [31, 34], "abov": [31, 35], "consol": 31, "x_0": 31, "23": [31, 32], "642": 31, "0x51470803": 31, "196": 31, "24": [31, 32], "300000e": [31, 32], "300000000000e": 31, "saw": 31, "fulli": 31, "high": [31, 35, 37], "enough": 31, "sparser": [31, 37], "51": [31, 32], "92": 31, "0x3e3f455b": 31, "9200000": 31, "105000e": 31, "10500": 31, "92000": 31, "8600000": 31, "86": 31, "860000000000e": 31, "9230769230769231": 31, "stcl_acc": 31, "314": 31, "237": 31, "0xa5b9a46b": 31, "224": 31, "269": 31, "203": 31, "134": 31, "400000e": 31, "8666666666666667": 31, "stcl_balanc": 31, "0x3bc6df12": 31, "4e": 31, "5000000": [31, 32], "500000e": 31, "50": [31, 32], "5288462": 31, "41": [31, 32], "6730769": 31, "67308": 31, "673077": 31, "No": 31, "730769230769e": 31, "just": 31, "without": [31, 37], "whole": 31, "But": [31, 32], "sacrif": 31, "world": 31, "__": 31, "625": 31, "v2": 31, "v3": 31, "v4": 31, "v5": 31, "25": [31, 32], "200": [31, 32], "lazyconstraint": [31, 32], "618": 31, "249": 31, "0xaeff5467": 31, "463": 31, "155": 31, "610": 31, "233": 31, "147": 31, "412": 31, "7100": 31, "180000e": 31, "418": 31, "55": [31, 32], "413": 31, "53": [31, 32], "308": 31, "294": 31, "272": 31, "52": [31, 32], "483": 31, "460": 31, "533": 31, "475": 31, "54": [31, 32], "290": 31, "1109": 31, "844": 31, "302": 31, "1310": 31, "970": 31, "291": 31, "40000": 31, "1556": 31, "1132": 31, "316": 31, "35": [31, 32], "409": 31, "65561": 31, "1629": 31, "1180": 31, "371": 31, "73684": 31, "403": 31, "03327": 31, "38": [31, 32], "67": 31, "1835": 31, "1309": 31, "374": 31, "20287": 31, "37": [31, 32], "402": 31, "17829": 31, "93": 31, "2163": 31, "1398": 31, "293": 31, "400": 31, "54472": 31, "2375": 31, "1361": 31, "111": 31, "296": 31, "399": 31, "64465": 31, "91": 31, "3419": 31, "1561": 31, "299": 31, "398": 31, "14472": 31, "3999": 31, "1769": 31, "327": 31, "17857": 31, "68": 31, "87": 31, "4454": 31, "1024": 31, "312": 31, "8406": 31, "2589": 31, "318": 31, "66667": 31, "359": 31, "80769": 31, "83": [31, 32], "15419": 31, "5646": 31, "325": 31, "12500": 31, "340": 31, "10000": 31, "h17827": 31, "5595": 31, "338": 31, "16497": 31, "25506": 31, "8599": 31, "329": 31, "85714": 31, "80": 31, "331": 31, "59": 31, "h31789": 31, "9084": 31, "315": 31, "54167": [31, 32], "57": 31, "44": [31, 32], "32844": 31, "9456": 31, "324": 31, "87500": 31, "05882": 31, "46": [31, 32], "h35037": 31, "8771": 31, "328": 31, "02174": 31, "h36500": 31, "6760": 31, "41723": 31, "6893": 31, "52260": 31, "4795": 31, "321": 31, "27273": 31, "61742": 31, "3152": 31, "319": 31, "92757": 31, "320": 31, "120": 31, "193": 31, "236": [31, 32], "70775": 31, "3292092": 31, "180000000000e": 31, "150930": 31, "sec": [31, 32], "6859903381642513": 31, "ll": [31, 32], "seed": [31, 32], "randint": 31, "bincount": 31, "heavili": 31, "favor": 31, "ones_lik": 31, "flow_oct_default": 31, "flow_oct_custom": 31, "ndefault": 31, "averag": [31, 32, 37], "414": 31, "1153": 31, "0x1ad65f5a": 31, "205": 31, "186": 31, "130": [31, 32], "660": 31, "112": [31, 32], "966667e": 31, "166": 31, "rlt": 31, "198": 31, "700000000000e": 31, "0xf6c20781": 31, "140": 31, "456667e": 31, "173": [31, 32], "145": 31, "143": 31, "430000000000e": 31, "9794520547945206": 31, "ax1": 31, "ax2": 31, "set_titl": 31, "tight_layout": 31, "benders_oct_default": 31, "benders_oct_custom": 31, "0x28902962": 31, "26563": 31, "96429": 31, "95833": 31, "76563": 31, "74194": 31, "73913": 31, "59091": 31, "37500": 31, "33333": 31, "31250": 31, "30000": 31, "65": [31, 32], "14706": 31, "09524": 31, "07059": 31, "03478": 31, "01765": 31, "01333": 31, "00532": 31, "00463": 31, "91304": 31, "90909": 31, "89873": 31, "372": 31, "0x75b5cba0": 31, "460000e": 31, "146": 31, "66": 31, "88542": 31, "88194": 31, "08333": 31, "08036": 31, "02737": 31, "02632": 31, "157": 31, "ve": 31, "costli": [31, 37], "deal": 31, "actual": 31, "due": 31, "natur": [31, 35, 37], "dua": [31, 32], "d": [31, 32], "graff": [31, 32], "2019": [31, 32], "irvin": [31, 32], "ca": [31, 32], "school": [31, 32], "scienc": [31, 32], "org": [31, 34, 35, 37, 38], "ab": [31, 34, 37], "tailor": 32, "sai": [32, 37], "doe": [32, 39], "robust_classifi": 32, "2024": 32, "0x78ba3dea": 32, "38889": 32, "25000": 32, "225000000000e": 32, "170": 32, "schema": 32, "pai": 32, "proxi": 32, "infinit": 32, "\u03b5": 32, "sinc": [32, 38], "27513": 32, "23554": 32, "22893": 32, "21106": 32, "19909": 32, "61": 32, "025000000000e": 32, "257": 32, "epsilon": 32, "switch": 32, "worst": 32, "think": 32, "els": 32, "153": 32, "500000000000e": 32, "benefit": [32, 35], "sake": 32, "comparison": 32, "non_robust_classifi": 32, "0xafd32360": 32, "126": 32, "169": 32, "1072": 32, "260000e": 32, "125": 32, "53640": 32, "206": 32, "81": 32, "91667": 32, "934": 32, "451": 32, "02237": 32, "2715": 32, "519": 32, "95": 32, "994": 32, "3627": 32, "70039": 32, "325000000000e": 32, "7707": 32, "94": 32, "feat5": 32, "feat3": 32, "feat2": 32, "certainti": 32, "randomli": 32, "practic": 32, "guess": 32, "simplic": 32, "lambda": [32, 37], "q_f": 32, "normal": 32, "loc": 32, "len": [32, 37], "snap": 32, "nextaft": 32, "float32": 32, "94967142": 32, "88617357": 32, "96476885": 32, "87658466": 32, "8765863": 32, "calibr": 32, "math": 32, "275424972886112": 32, "deepcopi": 32, "astyp": 32, "feat0": 32, "feat1": 32, "feat4": 32, "989182": 32, "173081": 32, "345825": 32, "275425": 32, "0922": 32, "092213": 32, "121": 32, "122": 32, "123": 32, "472": 32, "333": 32, "24074": 32, "2519": 32, "887": 32, "3648": 32, "758": 32, "1319": 32, "5135": 32, "84698": 32, "950000000000e": 32, "11149": 32, "49": 32, "accuracy_scor": 32, "6666666666666666": 32, "6587301587301587": 32, "5813953488372093": 32, "5581395348837209": 32, "known": [32, 35, 38], "distribt": 32, "well": [32, 34, 35], "def": [32, 34], "symmetr": 32, "geometr": 32, "sign": 32, "binomi": 32, "1000": 32, "non_robust_acc": 32, "robust_acc": 32, "1001": 32, "x_test_perturb": 32, "non_robust_pr": 32, "robust_pr": 32, "4418604651162791": 32, "5116279069767442": 32, "5660930232558059": 32, "5584186046511533": 32, "openreview": [32, 39], "net": [32, 39], "pdf": [32, 35, 38, 39], "id": [32, 39], "hbasa9ysa3": [32, 39], "leverag": [34, 37], "orient": [34, 35], "simplifi": 34, "_define_side_constraint": 34, "declar": 34, "word": [34, 35], "exce": 34, "rather": 34, "absolut": 34, "fairconstrainedonesideoct": 34, "_add_one_sided_fairness_constraint": 34, "shown": 34, "feasibl": 34, "four": 34, "futur": 34, "modif": 34, "complic": 34, "__init__": 34, "super": 34, "count_p": 34, "count_p_prim": 34, "constraint_ad": 34, "_tree": 34, "still": 34, "remain": 34, "omit": 34, "reader": 34, "mirror": 34, "fairconstrain": 34, "fairconstrainedonesidedoct": 34, "faironesidespoct": 34, "loop": 34, "protected_featur": 34, "_p_col_label": 34, "combo": 34, "_x_p": 34, "p_prime": 34, "formula": 34, "further": 34, "paper": [34, 35, 37, 38, 39], "year": 35, "maker": 35, "begun": 35, "social": 35, "sensit": 35, "stake": 35, "frequenc": 35, "decid": 35, "who": 35, "give": [35, 37], "credit": 35, "public": 35, "servic": 35, "polic": 35, "assist": 35, "screen": 35, "job": 35, "colleg": 35, "admiss": 35, "system": 35, "treat": [35, 37], "unequ": 35, "membership": 35, "ethnic": 35, "marit": 35, "nation": 35, "religion": 35, "sexual": 35, "hire": 35, "interview": 35, "someon": 35, "invit": 35, "regard": 35, "fairtreeclassifi": 35, "abl": 35, "strictli": 35, "becom": 35, "strict": 35, "showcas": 35, "mention": 35, "meritori": 35, "experienc": 35, "homeless": 35, "scarc": 35, "hous": 35, "resourc": 35, "vulner": 35, "risk": 35, "convict": 35, "person": [35, 38], "recidiv": 35, "releas": 35, "bail": 35, "inde": 35, "defend": 35, "gone": 35, "detent": 35, "One": 35, "matter": 35, "admit": 35, "qualifi": 35, "unqualifi": 35, "popular": 37, "inher": 37, "revenu": 37, "medicin": 37, "bioinformat": 37, "full": [37, 39], "mathemat": [37, 39], "yield": 37, "misclassif": 37, "popul": 37, "significantli": 37, "tradit": 37, "altern": 37, "unlik": 37, "vari": 37, "poorli": [37, 39], "occur": 37, "suicid": 37, "veri": 37, "flexibl": 37, "particularli": 37, "ones": 37, "minority_class": 37, "fine": 37, "grain": 37, "amount": 37, "spend": 37, "onc": 37, "elaps": 37, "report": 37, "qualiti": 37, "far": 37, "offer": [37, 38], "novel": 37, "penal": 37, "ordin": 37, "binarized_df": 37, "wide": 37, "granular": 37, "effici": 37, "polici": 38, "flowopt_": 38, "imag": 38, "warfarin": 38, "dose": 38, "patient": 38, "phenotyp": 38, "past": 38, "react": 38, "drug": 38, "dud\u00edk": 38, "2011": 38, "reli": 38, "reweight": 38, "histor": 38, "reliabl": 38, "unknown": 38, "execut": 38, "NOT": 38, "partit": 38, "subpopul": 38, "entir": 38, "what": 38, "happen": 38, "trial": 38, "suffici": 38, "good": 38, "less": 38, "famili": 38, "dampen": 38, "brought": 38, "varianc": 38, "unsur": 38, "emploi": 38, "often": 38, "safest": 38, "advantag": 38, "slight": 38, "miroslav": 38, "john": 38, "langford": 38, "lihong": 38, "li": 38, "proceed": 38, "28th": 38, "confer": 38, "icml": 38, "collect": 39, "deploy": 39, "rare": 39, "mechan": 39, "phase": 39, "presenc": 39, "robusttreeclassifi": 39, "probabilities_to_cost": 39, "prob": 39, "entri": 39, "exchang": 39, "exclus": 39, "inclus": 39, "reason": 39, "advis": 39, "try": 39}, "objects": {"": [[10, 0, 0, "-", "odtlearn"]], "odtlearn": [[10, 1, 1, "", "ODTL"], [1, 0, 0, "-", "constrained_oct"], [2, 0, 0, "-", "datasets"], [3, 0, 0, "-", "fair_oct"], [4, 0, 0, "-", "flow_oct"], [5, 0, 0, "-", "flow_oct_ms"], [6, 0, 0, "-", "flow_oct_ss"], [7, 0, 0, "-", "flow_opt"], [8, 0, 0, "-", "flow_opt_ms"], [9, 0, 0, "-", "flow_opt_ss"], [10, 5, 1, "", "name"], [11, 0, 0, "-", "opt_ct"], [12, 0, 0, "-", "opt_dt"], [13, 0, 0, "-", "opt_pt"], [14, 0, 0, "-", "robust_oct"], [16, 0, 0, "-", "tests"], [23, 0, 0, "-", "utils"]], "odtlearn.ODTL": [[10, 2, 1, "", "BINARY"], [10, 2, 1, "", "CONTINUOUS"], [10, 2, 1, "", "INTEGER"], [10, 2, 1, "", "MAX"], [10, 2, 1, "", "MAXIMIZE"], [10, 2, 1, "", "MIN"], [10, 2, 1, "", "MINIMIZE"]], "odtlearn.constrained_oct": [[1, 1, 1, "", "ConstrainedOCT"]], "odtlearn.datasets": [[2, 3, 1, "", "balance_scale_data"], [2, 3, 1, "", "example_2_data"], [2, 3, 1, "", "fairness_example"], [2, 3, 1, "", "flow_oct_example"], [2, 3, 1, "", "prescriptive_ex_data"], [2, 3, 1, "", "robust_example"], [2, 3, 1, "", "robustness_example"]], "odtlearn.fair_oct": [[3, 1, 1, "", "FairCSPOCT"], [3, 1, 1, "", "FairConstrainedOCT"], [3, 1, 1, "", "FairEOddsOCT"], [3, 1, 1, "", "FairEOppOCT"], [3, 1, 1, "", "FairOCT"], [3, 1, 1, "", "FairPEOCT"], [3, 1, 1, "", "FairSPOCT"]], "odtlearn.fair_oct.FairCSPOCT": [[3, 4, 1, "", "calc_metric"]], "odtlearn.fair_oct.FairConstrainedOCT": [[3, 4, 1, "", "fit"], [3, 4, 1, "", "predict"]], "odtlearn.fair_oct.FairEOppOCT": [[3, 4, 1, "", "calc_metric"]], "odtlearn.fair_oct.FairOCT": [[3, 4, 1, "", "fairness_metric_summary"], [3, 4, 1, "", "fit"], [3, 4, 1, "", "get_CSP"], [3, 4, 1, "", "get_CondEqOdds"], [3, 4, 1, "", "get_EqOdds"], [3, 4, 1, "", "get_SP"], [3, 4, 1, "", "predict"]], "odtlearn.fair_oct.FairPEOCT": [[3, 4, 1, "", "calc_metric"]], "odtlearn.fair_oct.FairSPOCT": [[3, 4, 1, "", "calc_metric"]], "odtlearn.flow_oct": [[4, 1, 1, "", "BendersOCT"], [4, 1, 1, "", "FlowOCT"]], "odtlearn.flow_oct.BendersOCT": [[4, 4, 1, "", "fit"], [4, 4, 1, "", "predict"]], "odtlearn.flow_oct.FlowOCT": [[4, 4, 1, "", "fit"], [4, 4, 1, "", "predict"]], "odtlearn.flow_oct_ms": [[5, 1, 1, "", "FlowOCTMultipleSink"]], "odtlearn.flow_oct_ss": [[6, 1, 1, "", "FlowOCTSingleSink"]], "odtlearn.flow_opt": [[7, 1, 1, "", "FlowOPT_DM"], [7, 1, 1, "", "FlowOPT_DR"], [7, 1, 1, "", "FlowOPT_IPW"]], "odtlearn.flow_opt.FlowOPT_DM": [[7, 4, 1, "", "fit"], [7, 4, 1, "", "predict"]], "odtlearn.flow_opt.FlowOPT_DR": [[7, 4, 1, "", "fit"], [7, 4, 1, "", "predict"]], "odtlearn.flow_opt.FlowOPT_IPW": [[7, 4, 1, "", "fit"], [7, 4, 1, "", "predict"]], "odtlearn.flow_opt_ms": [[8, 1, 1, "", "FlowOPTMultipleSink"]], "odtlearn.flow_opt_ss": [[9, 1, 1, "", "FlowOPTSingleSink"]], "odtlearn.opt_ct": [[11, 1, 1, "", "OptimalClassificationTree"]], "odtlearn.opt_ct.OptimalClassificationTree": [[11, 4, 1, "", "plot_tree"], [11, 4, 1, "", "print_tree"]], "odtlearn.opt_dt": [[12, 1, 1, "", "OptimalDecisionTree"]], "odtlearn.opt_dt.OptimalDecisionTree": [[12, 4, 1, "", "fit"], [12, 6, 1, "", "num_constraints"], [12, 6, 1, "", "num_decision_vars"], [12, 6, 1, "", "num_integer_vars"], [12, 6, 1, "", "num_non_zero"], [12, 6, 1, "", "num_solutions"], [12, 6, 1, "", "objective_bound"], [12, 6, 1, "", "objective_value"], [12, 6, 1, "", "optim_gap"], [12, 4, 1, "", "plot_search_progress"], [12, 4, 1, "", "predict"], [12, 6, 1, "", "search_progress_log"], [12, 6, 1, "", "store_search_progress_log"]], "odtlearn.opt_pt": [[13, 1, 1, "", "OptimalPrescriptiveTree"]], "odtlearn.opt_pt.OptimalPrescriptiveTree": [[13, 4, 1, "", "plot_tree"], [13, 4, 1, "", "print_tree"]], "odtlearn.robust_oct": [[14, 1, 1, "", "RobustOCT"]], "odtlearn.robust_oct.RobustOCT": [[14, 4, 1, "", "fit"], [14, 4, 1, "", "plot_tree"], [14, 4, 1, "", "predict"], [14, 4, 1, "", "print_tree"]], "odtlearn.tests": [[15, 0, 0, "-", "conftest"]], "odtlearn.tests.conftest": [[15, 3, 1, "", "pytest_addoption"], [15, 3, 1, "", "pytest_configure"], [15, 3, 1, "", "skip_solver"]], "odtlearn.utils": [[17, 0, 0, "-", "Tree"], [18, 0, 0, "-", "TreePlotter"], [19, 0, 0, "-", "_reingold_tilford"], [20, 0, 0, "-", "binarize"], [21, 0, 0, "-", "callback_helpers"], [22, 0, 0, "-", "callbacks"], [24, 0, 0, "-", "mip_cbc"], [25, 0, 0, "-", "solver"], [26, 0, 0, "-", "validation"]], "odtlearn.utils.TreePlotter": [[18, 1, 1, "", "MPLPlotter"]], "odtlearn.utils.TreePlotter.MPLPlotter": [[18, 4, 1, "", "export"], [18, 4, 1, "", "get_fill_color"], [18, 4, 1, "", "node_to_str"], [18, 4, 1, "", "recurse"]], "odtlearn.utils._reingold_tilford": [[19, 1, 1, "", "DrawTree"], [19, 1, 1, "", "Tree"], [19, 3, 1, "", "ancestor"], [19, 3, 1, "", "apportion"], [19, 3, 1, "", "buchheim"], [19, 3, 1, "", "execute_shifts"], [19, 3, 1, "", "first_walk"], [19, 3, 1, "", "move_subtree"], [19, 3, 1, "", "second_walk"], [19, 3, 1, "", "third_walk"]], "odtlearn.utils._reingold_tilford.DrawTree": [[19, 4, 1, "", "get_lmost_sibling"], [19, 4, 1, "", "lbrother"], [19, 4, 1, "", "left"], [19, 2, 1, "", "lmost_sibling"], [19, 4, 1, "", "max_extents"], [19, 4, 1, "", "right"]], "odtlearn.utils.binarize": [[20, 1, 1, "", "Binarizer"], [20, 3, 1, "", "binarize"]], "odtlearn.utils.binarize.Binarizer": [[20, 4, 1, "", "fit"], [20, 4, 1, "", "transform"]], "odtlearn.utils.callback_helpers": [[21, 3, 1, "", "get_all_terminal_paths"], [21, 3, 1, "", "get_cut_expression"], [21, 3, 1, "", "get_cut_integer"], [21, 3, 1, "", "get_left_exp_integer"], [21, 3, 1, "", "get_nominal_path"], [21, 3, 1, "", "get_right_exp_integer"], [21, 3, 1, "", "get_target_exp_integer"], [21, 3, 1, "", "shortest_path_solver"]], "odtlearn.utils.callbacks": [[22, 1, 1, "", "BendersCallback"], [22, 1, 1, "", "RobustBendersCallback"], [22, 3, 1, "", "benders_subproblem"], [22, 3, 1, "", "robust_tree_subproblem"]], "odtlearn.utils.callbacks.BendersCallback": [[22, 4, 1, "", "generate_constrs"]], "odtlearn.utils.callbacks.RobustBendersCallback": [[22, 4, 1, "", "generate_constrs"]], "odtlearn.utils.mip_cbc": [[24, 5, 1, "", "CHAR_ONE"], [24, 5, 1, "", "CHAR_ZERO"], [24, 5, 1, "", "Cbc_computeFeatures"], [24, 5, 1, "", "Cbc_featureName"], [24, 5, 1, "", "Cbc_generateCuts"], [24, 5, 1, "", "Cbc_getSolverPtr"], [24, 5, 1, "", "Cbc_nFeatures"], [24, 5, 1, "", "Cbc_reset"], [24, 5, 1, "", "Cbc_setDblParam"], [24, 5, 1, "", "Cbc_setIntParam"], [24, 5, 1, "", "Cbc_solveLinearProgram"], [24, 5, 1, "", "DBL_PARAM_ALLOWABLE_GAP"], [24, 5, 1, "", "DBL_PARAM_CUTOFF"], [24, 5, 1, "", "DBL_PARAM_DUAL_TOL"], [24, 5, 1, "", "DBL_PARAM_GAP_RATIO"], [24, 5, 1, "", "DBL_PARAM_INT_TOL"], [24, 5, 1, "", "DBL_PARAM_MAX_SECS_NOT_IMPROV_FS"], [24, 5, 1, "", "DBL_PARAM_PRESOLVE_TOL"], [24, 5, 1, "", "DBL_PARAM_PRIMAL_TOL"], [24, 5, 1, "", "DBL_PARAM_PSI"], [24, 5, 1, "", "DBL_PARAM_TIME_LIMIT"], [24, 5, 1, "", "DBL_PARAM_ZERO_TOL"], [24, 5, 1, "", "DEF_PUMPP"], [24, 5, 1, "", "INF"], [24, 5, 1, "", "INT_PARAM_CGRAPH"], [24, 5, 1, "", "INT_PARAM_CLIQUE_MERGING"], [24, 5, 1, "", "INT_PARAM_CUT_DEPTH"], [24, 5, 1, "", "INT_PARAM_CUT_PASS"], [24, 5, 1, "", "INT_PARAM_CUT_PASS_IN_TREE"], [24, 5, 1, "", "INT_PARAM_ELAPSED_TIME"], [24, 5, 1, "", "INT_PARAM_FPUMP_ITS"], [24, 5, 1, "", "INT_PARAM_IDIOT"], [24, 5, 1, "", "INT_PARAM_LOG_LEVEL"], [24, 5, 1, "", "INT_PARAM_MAX_NODES"], [24, 5, 1, "", "INT_PARAM_MAX_NODES_NOT_IMPROV_FS"], [24, 5, 1, "", "INT_PARAM_MAX_SAVED_SOLS"], [24, 5, 1, "", "INT_PARAM_MAX_SOLS"], [24, 5, 1, "", "INT_PARAM_MULTIPLE_ROOTS"], [24, 5, 1, "", "INT_PARAM_NUMBER_BEFORE"], [24, 5, 1, "", "INT_PARAM_PERT_VALUE"], [24, 5, 1, "", "INT_PARAM_RANDOM_SEED"], [24, 5, 1, "", "INT_PARAM_ROUND_INT_VARS"], [24, 5, 1, "", "INT_PARAM_STRONG_BRANCHING"], [24, 5, 1, "", "INT_PARAM_THREADS"], [24, 5, 1, "", "MAX_NAME_SIZE"], [24, 1, 1, "", "ModelOsi"], [24, 5, 1, "", "OsiCuts_addGlobalRowCut"], [24, 5, 1, "", "OsiCuts_addRowCut"], [24, 5, 1, "", "OsiCuts_coefRowCut"], [24, 5, 1, "", "OsiCuts_delete"], [24, 5, 1, "", "OsiCuts_idxRowCut"], [24, 5, 1, "", "OsiCuts_new"], [24, 5, 1, "", "OsiCuts_nzRowCut"], [24, 5, 1, "", "OsiCuts_rhsRowCut"], [24, 5, 1, "", "OsiCuts_senseRowCut"], [24, 5, 1, "", "OsiCuts_sizeRowCuts"], [24, 5, 1, "", "Osi_getColSolution"], [24, 5, 1, "", "Osi_getIntegerTolerance"], [24, 5, 1, "", "Osi_getNumCols"], [24, 5, 1, "", "Osi_isInteger"], [24, 5, 1, "", "Osi_isProvenOptimal"], [24, 1, 1, "", "SolverCbc"], [24, 1, 1, "", "SolverOsi"], [24, 3, 1, "", "cbc_set_parameter"], [24, 5, 1, "", "cut_idx"], [24, 3, 1, "", "feature_names"], [24, 5, 1, "", "ffi"], [24, 5, 1, "", "has_cbc"], [24, 5, 1, "", "logger"], [24, 5, 1, "", "os_is_64_bit"], [24, 5, 1, "", "pathmip"], [24, 5, 1, "", "warningMessages"]], "odtlearn.utils.mip_cbc.ModelOsi": [[24, 4, 1, "", "add_constr"]], "odtlearn.utils.mip_cbc.SolverCbc": [[24, 4, 1, "", "add_constr"], [24, 4, 1, "", "add_cut"], [24, 4, 1, "", "add_lazy_constr"], [24, 4, 1, "", "add_sos"], [24, 4, 1, "", "add_var"], [24, 4, 1, "", "cgraph_density"], [24, 4, 1, "", "clique_merge"], [24, 4, 1, "", "conflicting"], [24, 4, 1, "", "conflicting_nodes"], [24, 4, 1, "", "constr_get_expr"], [24, 4, 1, "", "constr_get_index"], [24, 4, 1, "", "constr_get_name"], [24, 4, 1, "", "constr_get_pi"], [24, 4, 1, "", "constr_get_rhs"], [24, 4, 1, "", "constr_get_slack"], [24, 4, 1, "", "constr_set_rhs"], [24, 4, 1, "", "feature_values"], [24, 4, 1, "", "generate_cuts"], [24, 4, 1, "", "get_cutoff"], [24, 4, 1, "", "get_emphasis"], [24, 4, 1, "", "get_log"], [24, 4, 1, "", "get_max_nodes"], [24, 4, 1, "", "get_max_seconds"], [24, 4, 1, "", "get_max_solutions"], [24, 4, 1, "", "get_mip_gap"], [24, 4, 1, "", "get_mip_gap_abs"], [24, 4, 1, "", "get_num_solutions"], [24, 4, 1, "", "get_objective"], [24, 4, 1, "", "get_objective_bound"], [24, 4, 1, "", "get_objective_const"], [24, 4, 1, "", "get_objective_sense"], [24, 4, 1, "", "get_objective_value"], [24, 4, 1, "", "get_objective_value_i"], [24, 4, 1, "", "get_problem_name"], [24, 4, 1, "", "get_pump_passes"], [24, 4, 1, "", "get_status"], [24, 4, 1, "", "get_verbose"], [24, 4, 1, "", "num_cols"], [24, 4, 1, "", "num_int"], [24, 4, 1, "", "num_nz"], [24, 4, 1, "", "num_rows"], [24, 4, 1, "", "optimize"], [24, 4, 1, "", "read"], [24, 4, 1, "", "relax"], [24, 4, 1, "", "remove_constrs"], [24, 4, 1, "", "remove_vars"], [24, 4, 1, "", "reset"], [24, 4, 1, "", "set_cutoff"], [24, 4, 1, "", "set_emphasis"], [24, 4, 1, "", "set_max_nodes"], [24, 4, 1, "", "set_max_seconds"], [24, 4, 1, "", "set_max_solutions"], [24, 4, 1, "", "set_mip_gap"], [24, 4, 1, "", "set_mip_gap_abs"], [24, 4, 1, "", "set_num_threads"], [24, 4, 1, "", "set_objective"], [24, 4, 1, "", "set_objective_sense"], [24, 4, 1, "", "set_problem_name"], [24, 4, 1, "", "set_processing_limits"], [24, 4, 1, "", "set_pump_passes"], [24, 4, 1, "", "set_start"], [24, 4, 1, "", "set_verbose"], [24, 4, 1, "", "update_conflict_graph"], [24, 4, 1, "", "var_get_branch_priority"], [24, 4, 1, "", "var_get_column"], [24, 4, 1, "", "var_get_index"], [24, 4, 1, "", "var_get_lb"], [24, 4, 1, "", "var_get_name"], [24, 4, 1, "", "var_get_obj"], [24, 4, 1, "", "var_get_rc"], [24, 4, 1, "", "var_get_ub"], [24, 4, 1, "", "var_get_var_type"], [24, 4, 1, "", "var_get_x"], [24, 4, 1, "", "var_get_xi"], [24, 4, 1, "", "var_set_column"], [24, 4, 1, "", "var_set_lb"], [24, 4, 1, "", "var_set_obj"], [24, 4, 1, "", "var_set_ub"], [24, 4, 1, "", "var_set_var_type"], [24, 4, 1, "", "write"]], "odtlearn.utils.mip_cbc.SolverOsi": [[24, 4, 1, "", "add_constr"], [24, 4, 1, "", "add_cut"], [24, 4, 1, "", "add_lazy_constr"], [24, 4, 1, "", "add_var"], [24, 4, 1, "", "constr_get_expr"], [24, 4, 1, "", "constr_get_index"], [24, 4, 1, "", "constr_get_name"], [24, 4, 1, "", "constr_get_pi"], [24, 4, 1, "", "constr_get_slack"], [24, 4, 1, "", "constr_set_expr"], [24, 4, 1, "", "get_cutoff"], [24, 4, 1, "", "get_emphasis"], [24, 4, 1, "", "get_log"], [24, 4, 1, "", "get_max_nodes"], [24, 4, 1, "", "get_max_seconds"], [24, 4, 1, "", "get_max_solutions"], [24, 4, 1, "", "get_mip_gap"], [24, 4, 1, "", "get_mip_gap_abs"], [24, 4, 1, "", "get_num_solutions"], [24, 4, 1, "", "get_objective"], [24, 4, 1, "", "get_objective_bound"], [24, 4, 1, "", "get_objective_const"], [24, 4, 1, "", "get_objective_sense"], [24, 4, 1, "", "get_objective_value"], [24, 4, 1, "", "get_objective_value_i"], [24, 4, 1, "", "get_problem_name"], [24, 4, 1, "", "get_pump_passes"], [24, 4, 1, "", "get_status"], [24, 4, 1, "", "get_verbose"], [24, 4, 1, "", "num_cols"], [24, 4, 1, "", "num_int"], [24, 4, 1, "", "num_nz"], [24, 4, 1, "", "num_rows"], [24, 4, 1, "", "optimize"], [24, 4, 1, "", "read"], [24, 4, 1, "", "relax"], [24, 4, 1, "", "remove_constrs"], [24, 4, 1, "", "remove_vars"], [24, 4, 1, "", "set_cutoff"], [24, 4, 1, "", "set_emphasis"], [24, 4, 1, "", "set_max_nodes"], [24, 4, 1, "", "set_max_seconds"], [24, 4, 1, "", "set_max_solutions"], [24, 4, 1, "", "set_mip_gap"], [24, 4, 1, "", "set_mip_gap_abs"], [24, 4, 1, "", "set_num_threads"], [24, 4, 1, "", "set_objective"], [24, 4, 1, "", "set_objective_const"], [24, 4, 1, "", "set_objective_sense"], [24, 4, 1, "", "set_problem_name"], [24, 4, 1, "", "set_processing_limits"], [24, 4, 1, "", "set_pump_passes"], [24, 4, 1, "", "set_start"], [24, 4, 1, "", "set_verbose"], [24, 4, 1, "", "var_get_branch_priority"], [24, 4, 1, "", "var_get_column"], [24, 4, 1, "", "var_get_index"], [24, 4, 1, "", "var_get_lb"], [24, 4, 1, "", "var_get_name"], [24, 4, 1, "", "var_get_obj"], [24, 4, 1, "", "var_get_rc"], [24, 4, 1, "", "var_get_ub"], [24, 4, 1, "", "var_get_var_type"], [24, 4, 1, "", "var_get_x"], [24, 4, 1, "", "var_get_xi"], [24, 4, 1, "", "var_set_branch_priority"], [24, 4, 1, "", "var_set_column"], [24, 4, 1, "", "var_set_lb"], [24, 4, 1, "", "var_set_obj"], [24, 4, 1, "", "var_set_ub"], [24, 4, 1, "", "var_set_var_type"], [24, 4, 1, "", "write"]], "odtlearn.utils.solver": [[25, 5, 1, "", "GRB_CBC_CONST_MAP"], [25, 1, 1, "", "Solver"]], "odtlearn.utils.solver.Solver": [[25, 4, 1, "", "add_constr"], [25, 4, 1, "", "add_constrs"], [25, 4, 1, "", "add_vars"], [25, 4, 1, "", "get_var_value"], [25, 4, 1, "", "lin_expr"], [25, 4, 1, "", "optimize"], [25, 4, 1, "", "prep_indices"], [25, 4, 1, "", "quicksum"], [25, 4, 1, "", "set_objective"], [25, 4, 1, "", "store_data"]], "odtlearn.utils.validation": [[26, 3, 1, "", "check_binary"], [26, 3, 1, "", "check_columns_match"], [26, 3, 1, "", "check_integer"], [26, 3, 1, "", "check_ipw"], [26, 3, 1, "", "check_same_as_X"], [26, 3, 1, "", "check_y"], [26, 3, 1, "", "check_y_hat"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:attribute", "3": "py:function", "4": "py:method", "5": "py:data", "6": "py:property"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "attribute", "Python attribute"], "3": ["py", "function", "Python function"], "4": ["py", "method", "Python method"], "5": ["py", "data", "Python data"], "6": ["py", "property", "Python property"]}, "titleterms": {"odtlearn": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29], "api": 0, "constrained_oct": 1, "modul": [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 18, 19, 20, 21, 22, 24, 25, 26], "content": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 18, 19, 20, 21, 22, 24, 25, 26], "class": [1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 18, 19, 20, 22, 24, 25], "dataset": [2, 30], "function": [2, 15, 19, 20, 21, 22, 24, 26, 31, 38], "fair_oct": 3, "flow_oct": 4, "flow_oct_m": 5, "flow_oct_ss": 6, "flow_opt": 7, "flow_opt_m": 8, "flow_opt_ss": 9, "subpackag": 10, "submodul": [10, 23], "packag": 10, "attribut": [10, 24, 25], "opt_ct": 11, "opt_dt": 12, "opt_pt": 13, "robust_oct": 14, "test": [15, 16], "conftest": 15, "util": [17, 18, 19, 20, 21, 22, 23, 24, 25, 26], "tree": [17, 30, 31, 34, 35, 37, 38, 39], "treeplott": 18, "_reingold_tilford": 19, "binar": [20, 31], "callback_help": 21, "callback": 22, "mip_cbc": 24, "solver": 25, "valid": 26, "how": 27, "contribut": 27, "code": 27, "conduct": 27, "improv": 27, "document": [27, 28], "file": 27, "bug": 27, "report": 27, "what": 28, "i": 28, "resourc": 28, "get": 28, "start": 28, "structur": 28, "usag": 28, "exampl": [28, 31, 32, 33], "refer": [28, 31, 32, 35, 37, 38, 39], "instal": 29, "guid": [29, 36], "python": 29, "obtain": 29, "gurobi": 29, "licens": 29, "cbc": 29, "binari": 29, "fair": [30, 35], "optim": [30, 34, 35, 37, 38, 39], "classif": [30, 31, 34, 35, 37, 39], "introduct": 30, "loan": 30, "approv": 30, "learn": 30, "statist": [30, 35], "pariti": [30, 35], "initi": 30, "fairspoct": 30, "classifi": 30, "less": 30, "strict": 30, "bound": 30, "stricter": 30, "addit": 30, "support": 30, "metric": [30, 35], "flowoct": 31, "0": 31, "1": [31, 32, 38], "vari": 31, "depth": 31, "_lambda": 31, "2": [31, 32, 38], "posit": 31, "differ": 31, "object": [31, 37, 38], "accuraci": 31, "balanc": 31, "3": [31, 32, 38], "uci": [31, 32], "data": [31, 32], "4": 31, "custom": 31, "weight": [31, 38], "bendersoct": 31, "robustoct": 32, "synthet": 32, "without": 32, "specifi": [32, 39], "shift": [32, 39], "notebook": 33, "ad": 34, "side": 34, "constraint": 34, "condit": 35, "predict": 35, "equal": 35, "opportun": 35, "odd": 35, "user": 36, "choos": 37, "an": 37, "speed": 37, "up": 37, "comput": 37, "bender": 37, "decomposit": 37, "regular": 37, "handl": [37, 38], "integ": [37, 38], "featur": [37, 38], "prescript": 38, "choic": 38, "invers": 38, "propens": 38, "ipw": 38, "direct": 38, "method": 38, "dm": 38, "doubli": 38, "robust": [38, 39], "dr": 38, "distribut": 39}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx.ext.viewcode": 1, "nbsphinx": 4, "sphinx": 58}, "alltitles": {"ODTlearn API": [[0, "odtlearn-api"]], "odtlearn.constrained_oct": [[1, "module-odtlearn.constrained_oct"]], "Module Contents": [[1, "module-contents"], [2, "module-contents"], [3, "module-contents"], [4, "module-contents"], [5, "module-contents"], [6, "module-contents"], [7, "module-contents"], [8, "module-contents"], [9, "module-contents"], [11, "module-contents"], [12, "module-contents"], [13, "module-contents"], [14, "module-contents"], [15, "module-contents"], [18, "module-contents"], [19, "module-contents"], [20, "module-contents"], [21, "module-contents"], [22, "module-contents"], [24, "module-contents"], [25, "module-contents"], [26, "module-contents"]], "Classes": [[1, "classes"], [3, "classes"], [4, "classes"], [5, "classes"], [6, "classes"], [7, "classes"], [8, "classes"], [9, "classes"], [10, "classes"], [11, "classes"], [12, "classes"], [13, "classes"], [14, "classes"], [18, "classes"], [19, "classes"], [20, "classes"], [22, "classes"], [24, "classes"], [25, "classes"]], "odtlearn.datasets": [[2, "module-odtlearn.datasets"]], "Functions": [[2, "functions"], [15, "functions"], [19, "functions"], [20, "functions"], [21, "functions"], [22, "functions"], [24, "functions"], [26, "functions"]], "odtlearn.fair_oct": [[3, "module-odtlearn.fair_oct"]], "odtlearn.flow_oct": [[4, "module-odtlearn.flow_oct"]], "odtlearn.flow_oct_ms": [[5, "module-odtlearn.flow_oct_ms"]], "odtlearn.flow_oct_ss": [[6, "module-odtlearn.flow_oct_ss"]], "odtlearn.flow_opt": [[7, "module-odtlearn.flow_opt"]], "odtlearn.flow_opt_ms": [[8, "module-odtlearn.flow_opt_ms"]], "odtlearn.flow_opt_ss": [[9, "module-odtlearn.flow_opt_ss"]], "odtlearn": [[10, "module-odtlearn"]], "Subpackages": [[10, "subpackages"]], "Submodules": [[10, "submodules"], [23, "submodules"]], "Package Contents": [[10, "package-contents"]], "Attributes": [[10, "attributes"], [24, "attributes"], [25, "attributes"]], "odtlearn.opt_ct": [[11, "module-odtlearn.opt_ct"]], "odtlearn.opt_dt": [[12, "module-odtlearn.opt_dt"]], "odtlearn.opt_pt": [[13, "module-odtlearn.opt_pt"]], "odtlearn.robust_oct": [[14, "module-odtlearn.robust_oct"]], "odtlearn.tests.conftest": [[15, "module-odtlearn.tests.conftest"]], "odtlearn.tests": [[16, "module-odtlearn.tests"]], "odtlearn.utils.Tree": [[17, "module-odtlearn.utils.Tree"]], "odtlearn.utils.TreePlotter": [[18, "module-odtlearn.utils.TreePlotter"]], "odtlearn.utils._reingold_tilford": [[19, "module-odtlearn.utils._reingold_tilford"]], "odtlearn.utils.binarize": [[20, "module-odtlearn.utils.binarize"]], "odtlearn.utils.callback_helpers": [[21, "module-odtlearn.utils.callback_helpers"]], "odtlearn.utils.callbacks": [[22, "module-odtlearn.utils.callbacks"]], "odtlearn.utils": [[23, "module-odtlearn.utils"]], "odtlearn.utils.mip_cbc": [[24, "module-odtlearn.utils.mip_cbc"]], "odtlearn.utils.solver": [[25, "module-odtlearn.utils.solver"]], "odtlearn.utils.validation": [[26, "module-odtlearn.utils.validation"]], "How to contribute to ODTlearn": [[27, "how-to-contribute-to-odtlearn"]], "Code of Conduct": [[27, "code-of-conduct"]], "Improve the documentation": [[27, "improve-the-documentation"]], "File a bug report": [[27, "file-a-bug-report"]], "What is ODTlearn?": [[28, "what-is-odtlearn"]], "Resources for Getting Started": [[28, "resources-for-getting-started"]], "Documentation Structure": [[28, "documentation-structure"]], "Usage Example": [[28, "usage-example"]], "References": [[28, "references"], [31, "References"], [32, "References"], [35, "references"], [37, "references"], [38, "references"], [39, "references"]], "Installation Guide": [[29, "installation-guide"]], "Install Python": [[29, "install-python"]], "Install ODTlearn": [[29, "install-odtlearn"]], "Obtain Gurobi License": [[29, "obtain-gurobi-license"]], "CBC Binaries": [[29, "cbc-binaries"]], "Fair Optimal Classification Trees": [[30, "Fair-Optimal-Classification-Trees"], [35, "fair-optimal-classification-trees"]], "Introduction": [[30, "Introduction"]], "Loan Approval Dataset": [[30, "Loan-Approval-Dataset"]], "Learning Fair Optimal Classification Trees with Statistical Parity": [[30, "Learning-Fair-Optimal-Classification-Trees-with-Statistical-Parity"]], "Initialize FairSPOCT classifier with a less strict fairness bound": [[30, "Initialize-FairSPOCT-classifier-with-a-less-strict-fairness-bound"]], "Initialize FairSPOCT classifier with a stricter fairness bound": [[30, "Initialize-FairSPOCT-classifier-with-a-stricter-fairness-bound"]], "Additional Supported Fairness Metrics": [[30, "Additional-Supported-Fairness-Metrics"]], "FlowOCT Examples": [[31, "FlowOCT-Examples"]], "Example 0: Binarization": [[31, "Example-0:-Binarization"]], "Example 1: Varying depth and _lambda": [[31, "Example-1:-Varying-depth-and-_lambda"]], "Tree with depth = 1": [[31, "Tree-with-depth-=-1"]], "Tree with depth = 2": [[31, "Tree-with-depth-=-2"]], "Tree with depth=2 and Positive _lambda": [[31, "Tree-with-depth=2-and-Positive-_lambda"]], "Example 2: Different Objective Functions": [[31, "Example-2:-Different-Objective-Functions"]], "Tree with classification accuracy objective": [[31, "Tree-with-classification-accuracy-objective"]], "Tree with Balanced Classification Accuracy Objective": [[31, "Tree-with-Balanced-Classification-Accuracy-Objective"]], "Example 3: UCI Data Example": [[31, "Example-3:-UCI-Data-Example"]], "Example 4: Custom Weights": [[31, "Example-4:-Custom-Weights"]], "FlowOCT with Custom Weights": [[31, "FlowOCT-with-Custom-Weights"]], "BendersOCT with Custom Weights": [[31, "BendersOCT-with-Custom-Weights"]], "RobustOCT Examples": [[32, "RobustOCT-Examples"]], "Example 1: Synthetic Data Without Specified Shifts": [[32, "Example-1:-Synthetic-Data-Without-Specified-Shifts"]], "Example 2: synthetic data with specified shifts": [[32, "Example-2:-synthetic-data-with-specified-shifts"]], "Example 3: UCI data example": [[32, "Example-3:-UCI-data-example"]], "Example Notebooks": [[33, "example-notebooks"]], "Adding side constraints to optimal classification trees": [[34, "adding-side-constraints-to-optimal-classification-trees"]], "Fairness Metrics": [[35, "fairness-metrics"]], "Statistical Parity": [[35, "statistical-parity"]], "Conditional Statistical Parity": [[35, "conditional-statistical-parity"]], "Predictive Equality": [[35, "predictive-equality"]], "Equal Opportunity": [[35, "equal-opportunity"]], "Equalized Odds": [[35, "equalized-odds"]], "User Guide": [[36, "user-guide"]], "Optimal Classification Trees": [[37, "optimal-classification-trees"]], "Choosing an Objective to Optimize": [[37, "choosing-an-objective-to-optimize"]], "Optimality": [[37, "optimality"]], "Speeding up Computation: Benders\u2019 Decomposition": [[37, "speeding-up-computation-benders-decomposition"]], "Regularization": [[37, "regularization"]], "Handling Integer Features": [[37, "handling-integer-features"], [38, "handling-integer-features"]], "Optimal Prescriptive Trees": [[38, "optimal-prescriptive-trees"]], "Objective Function Choices": [[38, "objective-function-choices"]], "1. Inverse Propensity Weighting (IPW)": [[38, "inverse-propensity-weighting-ipw"]], "2. Direct Method (DM)": [[38, "direct-method-dm"]], "3. Doubly Robust Method (DR)": [[38, "doubly-robust-method-dr"]], "Robust Optimal Classification Trees": [[39, "robust-optimal-classification-trees"]], "Specifying the Distribution Shift": [[39, "specifying-the-distribution-shift"]]}, "indexentries": {"constrainedoct (class in odtlearn.constrained_oct)": [[1, "odtlearn.constrained_oct.ConstrainedOCT"]], "module": [[1, "module-odtlearn.constrained_oct"], [2, "module-odtlearn.datasets"], [3, "module-odtlearn.fair_oct"], [4, "module-odtlearn.flow_oct"], [5, "module-odtlearn.flow_oct_ms"], [6, "module-odtlearn.flow_oct_ss"], [7, "module-odtlearn.flow_opt"], [8, "module-odtlearn.flow_opt_ms"], [9, "module-odtlearn.flow_opt_ss"], [10, "module-odtlearn"], [11, "module-odtlearn.opt_ct"], [12, "module-odtlearn.opt_dt"], [13, "module-odtlearn.opt_pt"], [14, "module-odtlearn.robust_oct"], [15, "module-odtlearn.tests.conftest"], [16, "module-odtlearn.tests"], [17, "module-odtlearn.utils.Tree"], [18, "module-odtlearn.utils.TreePlotter"], [19, "module-odtlearn.utils._reingold_tilford"], [20, "module-odtlearn.utils.binarize"], [21, "module-odtlearn.utils.callback_helpers"], [22, "module-odtlearn.utils.callbacks"], [23, "module-odtlearn.utils"], [24, "module-odtlearn.utils.mip_cbc"], [25, "module-odtlearn.utils.solver"], [26, "module-odtlearn.utils.validation"]], "odtlearn.constrained_oct": [[1, "module-odtlearn.constrained_oct"]], "balance_scale_data() (in module odtlearn.datasets)": [[2, "odtlearn.datasets.balance_scale_data"]], "example_2_data() (in module odtlearn.datasets)": [[2, "odtlearn.datasets.example_2_data"]], "fairness_example() (in module odtlearn.datasets)": [[2, "odtlearn.datasets.fairness_example"]], "flow_oct_example() (in module odtlearn.datasets)": [[2, "odtlearn.datasets.flow_oct_example"]], "odtlearn.datasets": [[2, "module-odtlearn.datasets"]], "prescriptive_ex_data() (in module odtlearn.datasets)": [[2, "odtlearn.datasets.prescriptive_ex_data"]], "robust_example() (in module odtlearn.datasets)": [[2, "odtlearn.datasets.robust_example"]], "robustness_example() (in module odtlearn.datasets)": [[2, "odtlearn.datasets.robustness_example"]], "faircspoct (class in odtlearn.fair_oct)": [[3, "odtlearn.fair_oct.FairCSPOCT"]], "fairconstrainedoct (class in odtlearn.fair_oct)": [[3, "odtlearn.fair_oct.FairConstrainedOCT"]], "faireoddsoct (class in odtlearn.fair_oct)": [[3, "odtlearn.fair_oct.FairEOddsOCT"]], "faireoppoct (class in odtlearn.fair_oct)": [[3, "odtlearn.fair_oct.FairEOppOCT"]], "fairoct (class in odtlearn.fair_oct)": [[3, "odtlearn.fair_oct.FairOCT"]], "fairpeoct (class in odtlearn.fair_oct)": [[3, "odtlearn.fair_oct.FairPEOCT"]], "fairspoct (class in odtlearn.fair_oct)": [[3, "odtlearn.fair_oct.FairSPOCT"]], "calc_metric() (odtlearn.fair_oct.faircspoct method)": [[3, "odtlearn.fair_oct.FairCSPOCT.calc_metric"]], "calc_metric() (odtlearn.fair_oct.faireoppoct method)": [[3, "odtlearn.fair_oct.FairEOppOCT.calc_metric"]], "calc_metric() (odtlearn.fair_oct.fairpeoct method)": [[3, "odtlearn.fair_oct.FairPEOCT.calc_metric"]], "calc_metric() (odtlearn.fair_oct.fairspoct method)": [[3, "odtlearn.fair_oct.FairSPOCT.calc_metric"]], "fairness_metric_summary() (odtlearn.fair_oct.fairoct method)": [[3, "odtlearn.fair_oct.FairOCT.fairness_metric_summary"]], "fit() (odtlearn.fair_oct.fairconstrainedoct method)": [[3, "odtlearn.fair_oct.FairConstrainedOCT.fit"]], "fit() (odtlearn.fair_oct.fairoct method)": [[3, "odtlearn.fair_oct.FairOCT.fit"]], "get_csp() (odtlearn.fair_oct.fairoct method)": [[3, "odtlearn.fair_oct.FairOCT.get_CSP"]], "get_condeqodds() (odtlearn.fair_oct.fairoct method)": [[3, "odtlearn.fair_oct.FairOCT.get_CondEqOdds"]], "get_eqodds() (odtlearn.fair_oct.fairoct method)": [[3, "odtlearn.fair_oct.FairOCT.get_EqOdds"]], "get_sp() (odtlearn.fair_oct.fairoct method)": [[3, "odtlearn.fair_oct.FairOCT.get_SP"]], "odtlearn.fair_oct": [[3, "module-odtlearn.fair_oct"]], "predict() (odtlearn.fair_oct.fairconstrainedoct method)": [[3, "odtlearn.fair_oct.FairConstrainedOCT.predict"]], "predict() (odtlearn.fair_oct.fairoct method)": [[3, "odtlearn.fair_oct.FairOCT.predict"]], "bendersoct (class in odtlearn.flow_oct)": [[4, "odtlearn.flow_oct.BendersOCT"]], "flowoct (class in odtlearn.flow_oct)": [[4, "odtlearn.flow_oct.FlowOCT"]], "fit() (odtlearn.flow_oct.bendersoct method)": [[4, "odtlearn.flow_oct.BendersOCT.fit"]], "fit() (odtlearn.flow_oct.flowoct method)": [[4, "odtlearn.flow_oct.FlowOCT.fit"]], "odtlearn.flow_oct": [[4, "module-odtlearn.flow_oct"]], "predict() (odtlearn.flow_oct.bendersoct method)": [[4, "odtlearn.flow_oct.BendersOCT.predict"]], "predict() (odtlearn.flow_oct.flowoct method)": [[4, "odtlearn.flow_oct.FlowOCT.predict"]], "flowoctmultiplesink (class in odtlearn.flow_oct_ms)": [[5, "odtlearn.flow_oct_ms.FlowOCTMultipleSink"]], "odtlearn.flow_oct_ms": [[5, "module-odtlearn.flow_oct_ms"]], "flowoctsinglesink (class in odtlearn.flow_oct_ss)": [[6, "odtlearn.flow_oct_ss.FlowOCTSingleSink"]], "odtlearn.flow_oct_ss": [[6, "module-odtlearn.flow_oct_ss"]], "flowopt_dm (class in odtlearn.flow_opt)": [[7, "odtlearn.flow_opt.FlowOPT_DM"]], "flowopt_dr (class in odtlearn.flow_opt)": [[7, "odtlearn.flow_opt.FlowOPT_DR"]], "flowopt_ipw (class in odtlearn.flow_opt)": [[7, "odtlearn.flow_opt.FlowOPT_IPW"]], "fit() (odtlearn.flow_opt.flowopt_dm method)": [[7, "odtlearn.flow_opt.FlowOPT_DM.fit"]], "fit() (odtlearn.flow_opt.flowopt_dr method)": [[7, "odtlearn.flow_opt.FlowOPT_DR.fit"]], "fit() (odtlearn.flow_opt.flowopt_ipw method)": [[7, "odtlearn.flow_opt.FlowOPT_IPW.fit"]], "odtlearn.flow_opt": [[7, "module-odtlearn.flow_opt"]], "predict() (odtlearn.flow_opt.flowopt_dm method)": [[7, "odtlearn.flow_opt.FlowOPT_DM.predict"]], "predict() (odtlearn.flow_opt.flowopt_dr method)": [[7, "odtlearn.flow_opt.FlowOPT_DR.predict"]], "predict() (odtlearn.flow_opt.flowopt_ipw method)": [[7, "odtlearn.flow_opt.FlowOPT_IPW.predict"]], "flowoptmultiplesink (class in odtlearn.flow_opt_ms)": [[8, "odtlearn.flow_opt_ms.FlowOPTMultipleSink"]], "odtlearn.flow_opt_ms": [[8, "module-odtlearn.flow_opt_ms"]], "flowoptsinglesink (class in odtlearn.flow_opt_ss)": [[9, "odtlearn.flow_opt_ss.FlowOPTSingleSink"]], "odtlearn.flow_opt_ss": [[9, "module-odtlearn.flow_opt_ss"]], "binary (odtlearn.odtl attribute)": [[10, "odtlearn.ODTL.BINARY"]], "continuous (odtlearn.odtl attribute)": [[10, "odtlearn.ODTL.CONTINUOUS"]], "integer (odtlearn.odtl attribute)": [[10, "odtlearn.ODTL.INTEGER"]], "max (odtlearn.odtl attribute)": [[10, "odtlearn.ODTL.MAX"]], "maximize (odtlearn.odtl attribute)": [[10, "odtlearn.ODTL.MAXIMIZE"]], "min (odtlearn.odtl attribute)": [[10, "odtlearn.ODTL.MIN"]], "minimize (odtlearn.odtl attribute)": [[10, "odtlearn.ODTL.MINIMIZE"]], "odtl (class in odtlearn)": [[10, "odtlearn.ODTL"]], "name (in module odtlearn)": [[10, "odtlearn.name"]], "odtlearn": [[10, "module-odtlearn"]], "optimalclassificationtree (class in odtlearn.opt_ct)": [[11, "odtlearn.opt_ct.OptimalClassificationTree"]], "odtlearn.opt_ct": [[11, "module-odtlearn.opt_ct"]], "plot_tree() (odtlearn.opt_ct.optimalclassificationtree method)": [[11, "odtlearn.opt_ct.OptimalClassificationTree.plot_tree"]], "print_tree() (odtlearn.opt_ct.optimalclassificationtree method)": [[11, "odtlearn.opt_ct.OptimalClassificationTree.print_tree"]], "optimaldecisiontree (class in odtlearn.opt_dt)": [[12, "odtlearn.opt_dt.OptimalDecisionTree"]], "fit() (odtlearn.opt_dt.optimaldecisiontree method)": [[12, "odtlearn.opt_dt.OptimalDecisionTree.fit"]], "num_constraints (odtlearn.opt_dt.optimaldecisiontree property)": [[12, "odtlearn.opt_dt.OptimalDecisionTree.num_constraints"]], "num_decision_vars (odtlearn.opt_dt.optimaldecisiontree property)": [[12, "odtlearn.opt_dt.OptimalDecisionTree.num_decision_vars"]], "num_integer_vars (odtlearn.opt_dt.optimaldecisiontree property)": [[12, "odtlearn.opt_dt.OptimalDecisionTree.num_integer_vars"]], "num_non_zero (odtlearn.opt_dt.optimaldecisiontree property)": [[12, "odtlearn.opt_dt.OptimalDecisionTree.num_non_zero"]], "num_solutions (odtlearn.opt_dt.optimaldecisiontree property)": [[12, "odtlearn.opt_dt.OptimalDecisionTree.num_solutions"]], "objective_bound (odtlearn.opt_dt.optimaldecisiontree property)": [[12, "odtlearn.opt_dt.OptimalDecisionTree.objective_bound"]], "objective_value (odtlearn.opt_dt.optimaldecisiontree property)": [[12, "odtlearn.opt_dt.OptimalDecisionTree.objective_value"]], "odtlearn.opt_dt": [[12, "module-odtlearn.opt_dt"]], "optim_gap (odtlearn.opt_dt.optimaldecisiontree property)": [[12, "odtlearn.opt_dt.OptimalDecisionTree.optim_gap"]], "plot_search_progress() (odtlearn.opt_dt.optimaldecisiontree method)": [[12, "odtlearn.opt_dt.OptimalDecisionTree.plot_search_progress"]], "predict() (odtlearn.opt_dt.optimaldecisiontree method)": [[12, "odtlearn.opt_dt.OptimalDecisionTree.predict"]], "search_progress_log (odtlearn.opt_dt.optimaldecisiontree property)": [[12, "odtlearn.opt_dt.OptimalDecisionTree.search_progress_log"]], "store_search_progress_log (odtlearn.opt_dt.optimaldecisiontree property)": [[12, "odtlearn.opt_dt.OptimalDecisionTree.store_search_progress_log"]], "optimalprescriptivetree (class in odtlearn.opt_pt)": [[13, "odtlearn.opt_pt.OptimalPrescriptiveTree"]], "odtlearn.opt_pt": [[13, "module-odtlearn.opt_pt"]], "plot_tree() (odtlearn.opt_pt.optimalprescriptivetree method)": [[13, "odtlearn.opt_pt.OptimalPrescriptiveTree.plot_tree"]], "print_tree() (odtlearn.opt_pt.optimalprescriptivetree method)": [[13, "odtlearn.opt_pt.OptimalPrescriptiveTree.print_tree"]], "robustoct (class in odtlearn.robust_oct)": [[14, "odtlearn.robust_oct.RobustOCT"]], "fit() (odtlearn.robust_oct.robustoct method)": [[14, "odtlearn.robust_oct.RobustOCT.fit"]], "odtlearn.robust_oct": [[14, "module-odtlearn.robust_oct"]], "plot_tree() (odtlearn.robust_oct.robustoct method)": [[14, "odtlearn.robust_oct.RobustOCT.plot_tree"]], "predict() (odtlearn.robust_oct.robustoct method)": [[14, "odtlearn.robust_oct.RobustOCT.predict"]], "print_tree() (odtlearn.robust_oct.robustoct method)": [[14, "odtlearn.robust_oct.RobustOCT.print_tree"]], "odtlearn.tests.conftest": [[15, "module-odtlearn.tests.conftest"]], "pytest_addoption() (in module odtlearn.tests.conftest)": [[15, "odtlearn.tests.conftest.pytest_addoption"]], "pytest_configure() (in module odtlearn.tests.conftest)": [[15, "odtlearn.tests.conftest.pytest_configure"]], "skip_solver() (in module odtlearn.tests.conftest)": [[15, "odtlearn.tests.conftest.skip_solver"]], "odtlearn.tests": [[16, "module-odtlearn.tests"]], "odtlearn.utils.tree": [[17, "module-odtlearn.utils.Tree"]], "mplplotter (class in odtlearn.utils.treeplotter)": [[18, "odtlearn.utils.TreePlotter.MPLPlotter"]], "export() (odtlearn.utils.treeplotter.mplplotter method)": [[18, "odtlearn.utils.TreePlotter.MPLPlotter.export"]], "get_fill_color() (odtlearn.utils.treeplotter.mplplotter method)": [[18, "odtlearn.utils.TreePlotter.MPLPlotter.get_fill_color"]], "node_to_str() (odtlearn.utils.treeplotter.mplplotter method)": [[18, "odtlearn.utils.TreePlotter.MPLPlotter.node_to_str"]], "odtlearn.utils.treeplotter": [[18, "module-odtlearn.utils.TreePlotter"]], "recurse() (odtlearn.utils.treeplotter.mplplotter method)": [[18, "odtlearn.utils.TreePlotter.MPLPlotter.recurse"]], "drawtree (class in odtlearn.utils._reingold_tilford)": [[19, "odtlearn.utils._reingold_tilford.DrawTree"]], "tree (class in odtlearn.utils._reingold_tilford)": [[19, "odtlearn.utils._reingold_tilford.Tree"]], "ancestor() (in module odtlearn.utils._reingold_tilford)": [[19, "odtlearn.utils._reingold_tilford.ancestor"]], "apportion() (in module odtlearn.utils._reingold_tilford)": [[19, "odtlearn.utils._reingold_tilford.apportion"]], "buchheim() (in module odtlearn.utils._reingold_tilford)": [[19, "odtlearn.utils._reingold_tilford.buchheim"]], "execute_shifts() (in module odtlearn.utils._reingold_tilford)": [[19, "odtlearn.utils._reingold_tilford.execute_shifts"]], "first_walk() (in module odtlearn.utils._reingold_tilford)": [[19, "odtlearn.utils._reingold_tilford.first_walk"]], "get_lmost_sibling() (odtlearn.utils._reingold_tilford.drawtree method)": [[19, "odtlearn.utils._reingold_tilford.DrawTree.get_lmost_sibling"]], "lbrother() (odtlearn.utils._reingold_tilford.drawtree method)": [[19, "odtlearn.utils._reingold_tilford.DrawTree.lbrother"]], "left() (odtlearn.utils._reingold_tilford.drawtree method)": [[19, "odtlearn.utils._reingold_tilford.DrawTree.left"]], "lmost_sibling (odtlearn.utils._reingold_tilford.drawtree attribute)": [[19, "odtlearn.utils._reingold_tilford.DrawTree.lmost_sibling"]], "max_extents() (odtlearn.utils._reingold_tilford.drawtree method)": [[19, "odtlearn.utils._reingold_tilford.DrawTree.max_extents"]], "move_subtree() (in module odtlearn.utils._reingold_tilford)": [[19, "odtlearn.utils._reingold_tilford.move_subtree"]], "odtlearn.utils._reingold_tilford": [[19, "module-odtlearn.utils._reingold_tilford"]], "right() (odtlearn.utils._reingold_tilford.drawtree method)": [[19, "odtlearn.utils._reingold_tilford.DrawTree.right"]], "second_walk() (in module odtlearn.utils._reingold_tilford)": [[19, "odtlearn.utils._reingold_tilford.second_walk"]], "third_walk() (in module odtlearn.utils._reingold_tilford)": [[19, "odtlearn.utils._reingold_tilford.third_walk"]], "binarizer (class in odtlearn.utils.binarize)": [[20, "odtlearn.utils.binarize.Binarizer"]], "binarize() (in module odtlearn.utils.binarize)": [[20, "odtlearn.utils.binarize.binarize"]], "fit() (odtlearn.utils.binarize.binarizer method)": [[20, "odtlearn.utils.binarize.Binarizer.fit"]], "odtlearn.utils.binarize": [[20, "module-odtlearn.utils.binarize"]], "transform() (odtlearn.utils.binarize.binarizer method)": [[20, "odtlearn.utils.binarize.Binarizer.transform"]], "get_all_terminal_paths() (in module odtlearn.utils.callback_helpers)": [[21, "odtlearn.utils.callback_helpers.get_all_terminal_paths"]], "get_cut_expression() (in module odtlearn.utils.callback_helpers)": [[21, "odtlearn.utils.callback_helpers.get_cut_expression"]], "get_cut_integer() (in module odtlearn.utils.callback_helpers)": [[21, "odtlearn.utils.callback_helpers.get_cut_integer"]], "get_left_exp_integer() (in module odtlearn.utils.callback_helpers)": [[21, "odtlearn.utils.callback_helpers.get_left_exp_integer"]], "get_nominal_path() (in module odtlearn.utils.callback_helpers)": [[21, "odtlearn.utils.callback_helpers.get_nominal_path"]], "get_right_exp_integer() (in module odtlearn.utils.callback_helpers)": [[21, "odtlearn.utils.callback_helpers.get_right_exp_integer"]], "get_target_exp_integer() (in module odtlearn.utils.callback_helpers)": [[21, "odtlearn.utils.callback_helpers.get_target_exp_integer"]], "odtlearn.utils.callback_helpers": [[21, "module-odtlearn.utils.callback_helpers"]], "shortest_path_solver() (in module odtlearn.utils.callback_helpers)": [[21, "odtlearn.utils.callback_helpers.shortest_path_solver"]], "benderscallback (class in odtlearn.utils.callbacks)": [[22, "odtlearn.utils.callbacks.BendersCallback"]], "robustbenderscallback (class in odtlearn.utils.callbacks)": [[22, "odtlearn.utils.callbacks.RobustBendersCallback"]], "benders_subproblem() (in module odtlearn.utils.callbacks)": [[22, "odtlearn.utils.callbacks.benders_subproblem"]], "generate_constrs() (odtlearn.utils.callbacks.benderscallback method)": [[22, "odtlearn.utils.callbacks.BendersCallback.generate_constrs"]], "generate_constrs() (odtlearn.utils.callbacks.robustbenderscallback method)": [[22, "odtlearn.utils.callbacks.RobustBendersCallback.generate_constrs"]], "odtlearn.utils.callbacks": [[22, "module-odtlearn.utils.callbacks"]], "robust_tree_subproblem() (in module odtlearn.utils.callbacks)": [[22, "odtlearn.utils.callbacks.robust_tree_subproblem"]], "odtlearn.utils": [[23, "module-odtlearn.utils"]], "char_one (in module odtlearn.utils.mip_cbc)": [[24, "odtlearn.utils.mip_cbc.CHAR_ONE"]], "char_zero (in module odtlearn.utils.mip_cbc)": [[24, "odtlearn.utils.mip_cbc.CHAR_ZERO"]], "cbc_computefeatures (in module odtlearn.utils.mip_cbc)": [[24, "odtlearn.utils.mip_cbc.Cbc_computeFeatures"]], "cbc_featurename (in module odtlearn.utils.mip_cbc)": [[24, "odtlearn.utils.mip_cbc.Cbc_featureName"]], "cbc_generatecuts (in module odtlearn.utils.mip_cbc)": [[24, "odtlearn.utils.mip_cbc.Cbc_generateCuts"]], "cbc_getsolverptr (in module odtlearn.utils.mip_cbc)": [[24, "odtlearn.utils.mip_cbc.Cbc_getSolverPtr"]], "cbc_nfeatures (in module odtlearn.utils.mip_cbc)": [[24, "odtlearn.utils.mip_cbc.Cbc_nFeatures"]], "cbc_reset (in module odtlearn.utils.mip_cbc)": [[24, "odtlearn.utils.mip_cbc.Cbc_reset"]], "cbc_setdblparam (in module odtlearn.utils.mip_cbc)": [[24, "odtlearn.utils.mip_cbc.Cbc_setDblParam"]], "cbc_setintparam (in module odtlearn.utils.mip_cbc)": [[24, "odtlearn.utils.mip_cbc.Cbc_setIntParam"]], "cbc_solvelinearprogram (in module odtlearn.utils.mip_cbc)": [[24, "odtlearn.utils.mip_cbc.Cbc_solveLinearProgram"]], "dbl_param_allowable_gap (in module odtlearn.utils.mip_cbc)": [[24, "odtlearn.utils.mip_cbc.DBL_PARAM_ALLOWABLE_GAP"]], "dbl_param_cutoff (in module odtlearn.utils.mip_cbc)": [[24, "odtlearn.utils.mip_cbc.DBL_PARAM_CUTOFF"]], "dbl_param_dual_tol (in module odtlearn.utils.mip_cbc)": [[24, "odtlearn.utils.mip_cbc.DBL_PARAM_DUAL_TOL"]], "dbl_param_gap_ratio (in module odtlearn.utils.mip_cbc)": [[24, "odtlearn.utils.mip_cbc.DBL_PARAM_GAP_RATIO"]], "dbl_param_int_tol (in module odtlearn.utils.mip_cbc)": [[24, "odtlearn.utils.mip_cbc.DBL_PARAM_INT_TOL"]], "dbl_param_max_secs_not_improv_fs (in module odtlearn.utils.mip_cbc)": [[24, "odtlearn.utils.mip_cbc.DBL_PARAM_MAX_SECS_NOT_IMPROV_FS"]], "dbl_param_presolve_tol (in module odtlearn.utils.mip_cbc)": [[24, "odtlearn.utils.mip_cbc.DBL_PARAM_PRESOLVE_TOL"]], "dbl_param_primal_tol (in module odtlearn.utils.mip_cbc)": [[24, "odtlearn.utils.mip_cbc.DBL_PARAM_PRIMAL_TOL"]], "dbl_param_psi (in module odtlearn.utils.mip_cbc)": [[24, "odtlearn.utils.mip_cbc.DBL_PARAM_PSI"]], "dbl_param_time_limit (in module odtlearn.utils.mip_cbc)": [[24, "odtlearn.utils.mip_cbc.DBL_PARAM_TIME_LIMIT"]], "dbl_param_zero_tol (in module odtlearn.utils.mip_cbc)": [[24, "odtlearn.utils.mip_cbc.DBL_PARAM_ZERO_TOL"]], "def_pumpp (in module odtlearn.utils.mip_cbc)": [[24, "odtlearn.utils.mip_cbc.DEF_PUMPP"]], "inf (in module odtlearn.utils.mip_cbc)": [[24, "odtlearn.utils.mip_cbc.INF"]], "int_param_cgraph (in module odtlearn.utils.mip_cbc)": [[24, "odtlearn.utils.mip_cbc.INT_PARAM_CGRAPH"]], "int_param_clique_merging (in module odtlearn.utils.mip_cbc)": [[24, "odtlearn.utils.mip_cbc.INT_PARAM_CLIQUE_MERGING"]], "int_param_cut_depth (in module odtlearn.utils.mip_cbc)": [[24, "odtlearn.utils.mip_cbc.INT_PARAM_CUT_DEPTH"]], "int_param_cut_pass (in module odtlearn.utils.mip_cbc)": [[24, "odtlearn.utils.mip_cbc.INT_PARAM_CUT_PASS"]], "int_param_cut_pass_in_tree (in module odtlearn.utils.mip_cbc)": [[24, "odtlearn.utils.mip_cbc.INT_PARAM_CUT_PASS_IN_TREE"]], "int_param_elapsed_time (in module odtlearn.utils.mip_cbc)": [[24, "odtlearn.utils.mip_cbc.INT_PARAM_ELAPSED_TIME"]], "int_param_fpump_its (in module odtlearn.utils.mip_cbc)": [[24, "odtlearn.utils.mip_cbc.INT_PARAM_FPUMP_ITS"]], "int_param_idiot (in module odtlearn.utils.mip_cbc)": [[24, "odtlearn.utils.mip_cbc.INT_PARAM_IDIOT"]], "int_param_log_level (in module odtlearn.utils.mip_cbc)": [[24, "odtlearn.utils.mip_cbc.INT_PARAM_LOG_LEVEL"]], "int_param_max_nodes (in module odtlearn.utils.mip_cbc)": [[24, "odtlearn.utils.mip_cbc.INT_PARAM_MAX_NODES"]], "int_param_max_nodes_not_improv_fs (in module odtlearn.utils.mip_cbc)": [[24, "odtlearn.utils.mip_cbc.INT_PARAM_MAX_NODES_NOT_IMPROV_FS"]], "int_param_max_saved_sols (in module odtlearn.utils.mip_cbc)": [[24, "odtlearn.utils.mip_cbc.INT_PARAM_MAX_SAVED_SOLS"]], "int_param_max_sols (in module odtlearn.utils.mip_cbc)": [[24, "odtlearn.utils.mip_cbc.INT_PARAM_MAX_SOLS"]], "int_param_multiple_roots (in module odtlearn.utils.mip_cbc)": [[24, "odtlearn.utils.mip_cbc.INT_PARAM_MULTIPLE_ROOTS"]], "int_param_number_before (in module odtlearn.utils.mip_cbc)": [[24, "odtlearn.utils.mip_cbc.INT_PARAM_NUMBER_BEFORE"]], "int_param_pert_value (in module odtlearn.utils.mip_cbc)": [[24, "odtlearn.utils.mip_cbc.INT_PARAM_PERT_VALUE"]], "int_param_random_seed (in module odtlearn.utils.mip_cbc)": [[24, "odtlearn.utils.mip_cbc.INT_PARAM_RANDOM_SEED"]], "int_param_round_int_vars (in module odtlearn.utils.mip_cbc)": [[24, "odtlearn.utils.mip_cbc.INT_PARAM_ROUND_INT_VARS"]], "int_param_strong_branching (in module odtlearn.utils.mip_cbc)": [[24, "odtlearn.utils.mip_cbc.INT_PARAM_STRONG_BRANCHING"]], "int_param_threads (in module odtlearn.utils.mip_cbc)": [[24, "odtlearn.utils.mip_cbc.INT_PARAM_THREADS"]], "max_name_size (in module odtlearn.utils.mip_cbc)": [[24, "odtlearn.utils.mip_cbc.MAX_NAME_SIZE"]], "modelosi (class in odtlearn.utils.mip_cbc)": [[24, "odtlearn.utils.mip_cbc.ModelOsi"]], "osicuts_addglobalrowcut (in module odtlearn.utils.mip_cbc)": [[24, "odtlearn.utils.mip_cbc.OsiCuts_addGlobalRowCut"]], "osicuts_addrowcut (in module odtlearn.utils.mip_cbc)": [[24, "odtlearn.utils.mip_cbc.OsiCuts_addRowCut"]], "osicuts_coefrowcut (in module odtlearn.utils.mip_cbc)": [[24, "odtlearn.utils.mip_cbc.OsiCuts_coefRowCut"]], "osicuts_delete (in module odtlearn.utils.mip_cbc)": [[24, "odtlearn.utils.mip_cbc.OsiCuts_delete"]], "osicuts_idxrowcut (in module odtlearn.utils.mip_cbc)": [[24, "odtlearn.utils.mip_cbc.OsiCuts_idxRowCut"]], "osicuts_new (in module odtlearn.utils.mip_cbc)": [[24, "odtlearn.utils.mip_cbc.OsiCuts_new"]], "osicuts_nzrowcut (in module odtlearn.utils.mip_cbc)": [[24, "odtlearn.utils.mip_cbc.OsiCuts_nzRowCut"]], "osicuts_rhsrowcut (in module odtlearn.utils.mip_cbc)": [[24, "odtlearn.utils.mip_cbc.OsiCuts_rhsRowCut"]], "osicuts_senserowcut (in module odtlearn.utils.mip_cbc)": [[24, "odtlearn.utils.mip_cbc.OsiCuts_senseRowCut"]], "osicuts_sizerowcuts (in module odtlearn.utils.mip_cbc)": [[24, "odtlearn.utils.mip_cbc.OsiCuts_sizeRowCuts"]], "osi_getcolsolution (in module odtlearn.utils.mip_cbc)": [[24, "odtlearn.utils.mip_cbc.Osi_getColSolution"]], "osi_getintegertolerance (in module odtlearn.utils.mip_cbc)": [[24, "odtlearn.utils.mip_cbc.Osi_getIntegerTolerance"]], "osi_getnumcols (in module odtlearn.utils.mip_cbc)": [[24, "odtlearn.utils.mip_cbc.Osi_getNumCols"]], "osi_isinteger (in module odtlearn.utils.mip_cbc)": [[24, "odtlearn.utils.mip_cbc.Osi_isInteger"]], "osi_isprovenoptimal (in module odtlearn.utils.mip_cbc)": [[24, "odtlearn.utils.mip_cbc.Osi_isProvenOptimal"]], "solvercbc (class in odtlearn.utils.mip_cbc)": [[24, "odtlearn.utils.mip_cbc.SolverCbc"]], "solverosi (class in odtlearn.utils.mip_cbc)": [[24, "odtlearn.utils.mip_cbc.SolverOsi"]], "add_constr() (odtlearn.utils.mip_cbc.modelosi method)": [[24, "odtlearn.utils.mip_cbc.ModelOsi.add_constr"]], "add_constr() (odtlearn.utils.mip_cbc.solvercbc method)": [[24, "odtlearn.utils.mip_cbc.SolverCbc.add_constr"]], "add_constr() (odtlearn.utils.mip_cbc.solverosi method)": [[24, "odtlearn.utils.mip_cbc.SolverOsi.add_constr"]], "add_cut() (odtlearn.utils.mip_cbc.solvercbc method)": [[24, "odtlearn.utils.mip_cbc.SolverCbc.add_cut"]], "add_cut() (odtlearn.utils.mip_cbc.solverosi method)": [[24, "odtlearn.utils.mip_cbc.SolverOsi.add_cut"]], "add_lazy_constr() (odtlearn.utils.mip_cbc.solvercbc method)": [[24, "odtlearn.utils.mip_cbc.SolverCbc.add_lazy_constr"]], "add_lazy_constr() (odtlearn.utils.mip_cbc.solverosi method)": [[24, "odtlearn.utils.mip_cbc.SolverOsi.add_lazy_constr"]], "add_sos() (odtlearn.utils.mip_cbc.solvercbc method)": [[24, "odtlearn.utils.mip_cbc.SolverCbc.add_sos"]], "add_var() (odtlearn.utils.mip_cbc.solvercbc method)": [[24, "odtlearn.utils.mip_cbc.SolverCbc.add_var"]], "add_var() (odtlearn.utils.mip_cbc.solverosi method)": [[24, "odtlearn.utils.mip_cbc.SolverOsi.add_var"]], "cbc_set_parameter() (in module odtlearn.utils.mip_cbc)": [[24, "odtlearn.utils.mip_cbc.cbc_set_parameter"]], "cgraph_density() (odtlearn.utils.mip_cbc.solvercbc method)": [[24, "odtlearn.utils.mip_cbc.SolverCbc.cgraph_density"]], "clique_merge() (odtlearn.utils.mip_cbc.solvercbc method)": [[24, "odtlearn.utils.mip_cbc.SolverCbc.clique_merge"]], "conflicting() (odtlearn.utils.mip_cbc.solvercbc method)": [[24, "odtlearn.utils.mip_cbc.SolverCbc.conflicting"]], "conflicting_nodes() (odtlearn.utils.mip_cbc.solvercbc method)": [[24, "odtlearn.utils.mip_cbc.SolverCbc.conflicting_nodes"]], "constr_get_expr() (odtlearn.utils.mip_cbc.solvercbc method)": [[24, "odtlearn.utils.mip_cbc.SolverCbc.constr_get_expr"]], "constr_get_expr() (odtlearn.utils.mip_cbc.solverosi method)": [[24, "odtlearn.utils.mip_cbc.SolverOsi.constr_get_expr"]], "constr_get_index() (odtlearn.utils.mip_cbc.solvercbc method)": [[24, "odtlearn.utils.mip_cbc.SolverCbc.constr_get_index"]], "constr_get_index() (odtlearn.utils.mip_cbc.solverosi method)": [[24, "odtlearn.utils.mip_cbc.SolverOsi.constr_get_index"]], "constr_get_name() (odtlearn.utils.mip_cbc.solvercbc method)": [[24, "odtlearn.utils.mip_cbc.SolverCbc.constr_get_name"]], "constr_get_name() (odtlearn.utils.mip_cbc.solverosi method)": [[24, "odtlearn.utils.mip_cbc.SolverOsi.constr_get_name"]], "constr_get_pi() (odtlearn.utils.mip_cbc.solvercbc method)": [[24, "odtlearn.utils.mip_cbc.SolverCbc.constr_get_pi"]], "constr_get_pi() (odtlearn.utils.mip_cbc.solverosi method)": [[24, "odtlearn.utils.mip_cbc.SolverOsi.constr_get_pi"]], "constr_get_rhs() (odtlearn.utils.mip_cbc.solvercbc method)": [[24, "odtlearn.utils.mip_cbc.SolverCbc.constr_get_rhs"]], "constr_get_slack() (odtlearn.utils.mip_cbc.solvercbc method)": [[24, "odtlearn.utils.mip_cbc.SolverCbc.constr_get_slack"]], "constr_get_slack() (odtlearn.utils.mip_cbc.solverosi method)": [[24, "odtlearn.utils.mip_cbc.SolverOsi.constr_get_slack"]], "constr_set_expr() (odtlearn.utils.mip_cbc.solverosi method)": [[24, "odtlearn.utils.mip_cbc.SolverOsi.constr_set_expr"]], "constr_set_rhs() (odtlearn.utils.mip_cbc.solvercbc method)": [[24, "odtlearn.utils.mip_cbc.SolverCbc.constr_set_rhs"]], "cut_idx (in module odtlearn.utils.mip_cbc)": [[24, "odtlearn.utils.mip_cbc.cut_idx"]], "feature_names() (in module odtlearn.utils.mip_cbc)": [[24, "odtlearn.utils.mip_cbc.feature_names"]], "feature_values() (odtlearn.utils.mip_cbc.solvercbc method)": [[24, "odtlearn.utils.mip_cbc.SolverCbc.feature_values"]], "ffi (in module odtlearn.utils.mip_cbc)": [[24, "odtlearn.utils.mip_cbc.ffi"]], "generate_cuts() (odtlearn.utils.mip_cbc.solvercbc method)": [[24, "odtlearn.utils.mip_cbc.SolverCbc.generate_cuts"]], "get_cutoff() (odtlearn.utils.mip_cbc.solvercbc method)": [[24, "odtlearn.utils.mip_cbc.SolverCbc.get_cutoff"]], "get_cutoff() (odtlearn.utils.mip_cbc.solverosi method)": [[24, "odtlearn.utils.mip_cbc.SolverOsi.get_cutoff"]], "get_emphasis() (odtlearn.utils.mip_cbc.solvercbc method)": [[24, "odtlearn.utils.mip_cbc.SolverCbc.get_emphasis"]], "get_emphasis() (odtlearn.utils.mip_cbc.solverosi method)": [[24, "odtlearn.utils.mip_cbc.SolverOsi.get_emphasis"]], "get_log() (odtlearn.utils.mip_cbc.solvercbc method)": [[24, "odtlearn.utils.mip_cbc.SolverCbc.get_log"]], "get_log() (odtlearn.utils.mip_cbc.solverosi method)": [[24, "odtlearn.utils.mip_cbc.SolverOsi.get_log"]], "get_max_nodes() (odtlearn.utils.mip_cbc.solvercbc method)": [[24, "odtlearn.utils.mip_cbc.SolverCbc.get_max_nodes"]], "get_max_nodes() (odtlearn.utils.mip_cbc.solverosi method)": [[24, "odtlearn.utils.mip_cbc.SolverOsi.get_max_nodes"]], "get_max_seconds() (odtlearn.utils.mip_cbc.solvercbc method)": [[24, "odtlearn.utils.mip_cbc.SolverCbc.get_max_seconds"]], "get_max_seconds() (odtlearn.utils.mip_cbc.solverosi method)": [[24, "odtlearn.utils.mip_cbc.SolverOsi.get_max_seconds"]], "get_max_solutions() (odtlearn.utils.mip_cbc.solvercbc method)": [[24, "odtlearn.utils.mip_cbc.SolverCbc.get_max_solutions"]], "get_max_solutions() (odtlearn.utils.mip_cbc.solverosi method)": [[24, "odtlearn.utils.mip_cbc.SolverOsi.get_max_solutions"]], "get_mip_gap() (odtlearn.utils.mip_cbc.solvercbc method)": [[24, "odtlearn.utils.mip_cbc.SolverCbc.get_mip_gap"]], "get_mip_gap() (odtlearn.utils.mip_cbc.solverosi method)": [[24, "odtlearn.utils.mip_cbc.SolverOsi.get_mip_gap"]], "get_mip_gap_abs() (odtlearn.utils.mip_cbc.solvercbc method)": [[24, "odtlearn.utils.mip_cbc.SolverCbc.get_mip_gap_abs"]], "get_mip_gap_abs() (odtlearn.utils.mip_cbc.solverosi method)": [[24, "odtlearn.utils.mip_cbc.SolverOsi.get_mip_gap_abs"]], "get_num_solutions() (odtlearn.utils.mip_cbc.solvercbc method)": [[24, "odtlearn.utils.mip_cbc.SolverCbc.get_num_solutions"]], "get_num_solutions() (odtlearn.utils.mip_cbc.solverosi method)": [[24, "odtlearn.utils.mip_cbc.SolverOsi.get_num_solutions"]], "get_objective() (odtlearn.utils.mip_cbc.solvercbc method)": [[24, "odtlearn.utils.mip_cbc.SolverCbc.get_objective"]], "get_objective() (odtlearn.utils.mip_cbc.solverosi method)": [[24, "odtlearn.utils.mip_cbc.SolverOsi.get_objective"]], "get_objective_bound() (odtlearn.utils.mip_cbc.solvercbc method)": [[24, "odtlearn.utils.mip_cbc.SolverCbc.get_objective_bound"]], "get_objective_bound() (odtlearn.utils.mip_cbc.solverosi method)": [[24, "odtlearn.utils.mip_cbc.SolverOsi.get_objective_bound"]], "get_objective_const() (odtlearn.utils.mip_cbc.solvercbc method)": [[24, "odtlearn.utils.mip_cbc.SolverCbc.get_objective_const"]], "get_objective_const() (odtlearn.utils.mip_cbc.solverosi method)": [[24, "odtlearn.utils.mip_cbc.SolverOsi.get_objective_const"]], "get_objective_sense() (odtlearn.utils.mip_cbc.solvercbc method)": [[24, "odtlearn.utils.mip_cbc.SolverCbc.get_objective_sense"]], "get_objective_sense() (odtlearn.utils.mip_cbc.solverosi method)": [[24, "odtlearn.utils.mip_cbc.SolverOsi.get_objective_sense"]], "get_objective_value() (odtlearn.utils.mip_cbc.solvercbc method)": [[24, "odtlearn.utils.mip_cbc.SolverCbc.get_objective_value"]], "get_objective_value() (odtlearn.utils.mip_cbc.solverosi method)": [[24, "odtlearn.utils.mip_cbc.SolverOsi.get_objective_value"]], "get_objective_value_i() (odtlearn.utils.mip_cbc.solvercbc method)": [[24, "odtlearn.utils.mip_cbc.SolverCbc.get_objective_value_i"]], "get_objective_value_i() (odtlearn.utils.mip_cbc.solverosi method)": [[24, "odtlearn.utils.mip_cbc.SolverOsi.get_objective_value_i"]], "get_problem_name() (odtlearn.utils.mip_cbc.solvercbc method)": [[24, "odtlearn.utils.mip_cbc.SolverCbc.get_problem_name"]], "get_problem_name() (odtlearn.utils.mip_cbc.solverosi method)": [[24, "odtlearn.utils.mip_cbc.SolverOsi.get_problem_name"]], "get_pump_passes() (odtlearn.utils.mip_cbc.solvercbc method)": [[24, "odtlearn.utils.mip_cbc.SolverCbc.get_pump_passes"]], "get_pump_passes() (odtlearn.utils.mip_cbc.solverosi method)": [[24, "odtlearn.utils.mip_cbc.SolverOsi.get_pump_passes"]], "get_status() (odtlearn.utils.mip_cbc.solvercbc method)": [[24, "odtlearn.utils.mip_cbc.SolverCbc.get_status"]], "get_status() (odtlearn.utils.mip_cbc.solverosi method)": [[24, "odtlearn.utils.mip_cbc.SolverOsi.get_status"]], "get_verbose() (odtlearn.utils.mip_cbc.solvercbc method)": [[24, "odtlearn.utils.mip_cbc.SolverCbc.get_verbose"]], "get_verbose() (odtlearn.utils.mip_cbc.solverosi method)": [[24, "odtlearn.utils.mip_cbc.SolverOsi.get_verbose"]], "has_cbc (in module odtlearn.utils.mip_cbc)": [[24, "odtlearn.utils.mip_cbc.has_cbc"]], "logger (in module odtlearn.utils.mip_cbc)": [[24, "odtlearn.utils.mip_cbc.logger"]], "num_cols() (odtlearn.utils.mip_cbc.solvercbc method)": [[24, "odtlearn.utils.mip_cbc.SolverCbc.num_cols"]], "num_cols() (odtlearn.utils.mip_cbc.solverosi method)": [[24, "odtlearn.utils.mip_cbc.SolverOsi.num_cols"]], "num_int() (odtlearn.utils.mip_cbc.solvercbc method)": [[24, "odtlearn.utils.mip_cbc.SolverCbc.num_int"]], "num_int() (odtlearn.utils.mip_cbc.solverosi method)": [[24, "odtlearn.utils.mip_cbc.SolverOsi.num_int"]], "num_nz() (odtlearn.utils.mip_cbc.solvercbc method)": [[24, "odtlearn.utils.mip_cbc.SolverCbc.num_nz"]], "num_nz() (odtlearn.utils.mip_cbc.solverosi method)": [[24, "odtlearn.utils.mip_cbc.SolverOsi.num_nz"]], "num_rows() (odtlearn.utils.mip_cbc.solvercbc method)": [[24, "odtlearn.utils.mip_cbc.SolverCbc.num_rows"]], "num_rows() (odtlearn.utils.mip_cbc.solverosi method)": [[24, "odtlearn.utils.mip_cbc.SolverOsi.num_rows"]], "odtlearn.utils.mip_cbc": [[24, "module-odtlearn.utils.mip_cbc"]], "optimize() (odtlearn.utils.mip_cbc.solvercbc method)": [[24, "odtlearn.utils.mip_cbc.SolverCbc.optimize"]], "optimize() (odtlearn.utils.mip_cbc.solverosi method)": [[24, "odtlearn.utils.mip_cbc.SolverOsi.optimize"]], "os_is_64_bit (in module odtlearn.utils.mip_cbc)": [[24, "odtlearn.utils.mip_cbc.os_is_64_bit"]], "pathmip (in module odtlearn.utils.mip_cbc)": [[24, "odtlearn.utils.mip_cbc.pathmip"]], "read() (odtlearn.utils.mip_cbc.solvercbc method)": [[24, "odtlearn.utils.mip_cbc.SolverCbc.read"]], "read() (odtlearn.utils.mip_cbc.solverosi method)": [[24, "odtlearn.utils.mip_cbc.SolverOsi.read"]], "relax() (odtlearn.utils.mip_cbc.solvercbc method)": [[24, "odtlearn.utils.mip_cbc.SolverCbc.relax"]], "relax() (odtlearn.utils.mip_cbc.solverosi method)": [[24, "odtlearn.utils.mip_cbc.SolverOsi.relax"]], "remove_constrs() (odtlearn.utils.mip_cbc.solvercbc method)": [[24, "odtlearn.utils.mip_cbc.SolverCbc.remove_constrs"]], "remove_constrs() (odtlearn.utils.mip_cbc.solverosi method)": [[24, "odtlearn.utils.mip_cbc.SolverOsi.remove_constrs"]], "remove_vars() (odtlearn.utils.mip_cbc.solvercbc method)": [[24, "odtlearn.utils.mip_cbc.SolverCbc.remove_vars"]], "remove_vars() (odtlearn.utils.mip_cbc.solverosi method)": [[24, "odtlearn.utils.mip_cbc.SolverOsi.remove_vars"]], "reset() (odtlearn.utils.mip_cbc.solvercbc method)": [[24, "odtlearn.utils.mip_cbc.SolverCbc.reset"]], "set_cutoff() (odtlearn.utils.mip_cbc.solvercbc method)": [[24, "odtlearn.utils.mip_cbc.SolverCbc.set_cutoff"]], "set_cutoff() (odtlearn.utils.mip_cbc.solverosi method)": [[24, "odtlearn.utils.mip_cbc.SolverOsi.set_cutoff"]], "set_emphasis() (odtlearn.utils.mip_cbc.solvercbc method)": [[24, "odtlearn.utils.mip_cbc.SolverCbc.set_emphasis"]], "set_emphasis() (odtlearn.utils.mip_cbc.solverosi method)": [[24, "odtlearn.utils.mip_cbc.SolverOsi.set_emphasis"]], "set_max_nodes() (odtlearn.utils.mip_cbc.solvercbc method)": [[24, "odtlearn.utils.mip_cbc.SolverCbc.set_max_nodes"]], "set_max_nodes() (odtlearn.utils.mip_cbc.solverosi method)": [[24, "odtlearn.utils.mip_cbc.SolverOsi.set_max_nodes"]], "set_max_seconds() (odtlearn.utils.mip_cbc.solvercbc method)": [[24, "odtlearn.utils.mip_cbc.SolverCbc.set_max_seconds"]], "set_max_seconds() (odtlearn.utils.mip_cbc.solverosi method)": [[24, "odtlearn.utils.mip_cbc.SolverOsi.set_max_seconds"]], "set_max_solutions() (odtlearn.utils.mip_cbc.solvercbc method)": [[24, "odtlearn.utils.mip_cbc.SolverCbc.set_max_solutions"]], "set_max_solutions() (odtlearn.utils.mip_cbc.solverosi method)": [[24, "odtlearn.utils.mip_cbc.SolverOsi.set_max_solutions"]], "set_mip_gap() (odtlearn.utils.mip_cbc.solvercbc method)": [[24, "odtlearn.utils.mip_cbc.SolverCbc.set_mip_gap"]], "set_mip_gap() (odtlearn.utils.mip_cbc.solverosi method)": [[24, "odtlearn.utils.mip_cbc.SolverOsi.set_mip_gap"]], "set_mip_gap_abs() (odtlearn.utils.mip_cbc.solvercbc method)": [[24, "odtlearn.utils.mip_cbc.SolverCbc.set_mip_gap_abs"]], "set_mip_gap_abs() (odtlearn.utils.mip_cbc.solverosi method)": [[24, "odtlearn.utils.mip_cbc.SolverOsi.set_mip_gap_abs"]], "set_num_threads() (odtlearn.utils.mip_cbc.solvercbc method)": [[24, "odtlearn.utils.mip_cbc.SolverCbc.set_num_threads"]], "set_num_threads() (odtlearn.utils.mip_cbc.solverosi method)": [[24, "odtlearn.utils.mip_cbc.SolverOsi.set_num_threads"]], "set_objective() (odtlearn.utils.mip_cbc.solvercbc method)": [[24, "odtlearn.utils.mip_cbc.SolverCbc.set_objective"]], "set_objective() (odtlearn.utils.mip_cbc.solverosi method)": [[24, "odtlearn.utils.mip_cbc.SolverOsi.set_objective"]], "set_objective_const() (odtlearn.utils.mip_cbc.solverosi method)": [[24, "odtlearn.utils.mip_cbc.SolverOsi.set_objective_const"]], "set_objective_sense() (odtlearn.utils.mip_cbc.solvercbc method)": [[24, "odtlearn.utils.mip_cbc.SolverCbc.set_objective_sense"]], "set_objective_sense() (odtlearn.utils.mip_cbc.solverosi method)": [[24, "odtlearn.utils.mip_cbc.SolverOsi.set_objective_sense"]], "set_problem_name() (odtlearn.utils.mip_cbc.solvercbc method)": [[24, "odtlearn.utils.mip_cbc.SolverCbc.set_problem_name"]], "set_problem_name() (odtlearn.utils.mip_cbc.solverosi method)": [[24, "odtlearn.utils.mip_cbc.SolverOsi.set_problem_name"]], "set_processing_limits() (odtlearn.utils.mip_cbc.solvercbc method)": [[24, "odtlearn.utils.mip_cbc.SolverCbc.set_processing_limits"]], "set_processing_limits() (odtlearn.utils.mip_cbc.solverosi method)": [[24, "odtlearn.utils.mip_cbc.SolverOsi.set_processing_limits"]], "set_pump_passes() (odtlearn.utils.mip_cbc.solvercbc method)": [[24, "odtlearn.utils.mip_cbc.SolverCbc.set_pump_passes"]], "set_pump_passes() (odtlearn.utils.mip_cbc.solverosi method)": [[24, "odtlearn.utils.mip_cbc.SolverOsi.set_pump_passes"]], "set_start() (odtlearn.utils.mip_cbc.solvercbc method)": [[24, "odtlearn.utils.mip_cbc.SolverCbc.set_start"]], "set_start() (odtlearn.utils.mip_cbc.solverosi method)": [[24, "odtlearn.utils.mip_cbc.SolverOsi.set_start"]], "set_verbose() (odtlearn.utils.mip_cbc.solvercbc method)": [[24, "odtlearn.utils.mip_cbc.SolverCbc.set_verbose"]], "set_verbose() (odtlearn.utils.mip_cbc.solverosi method)": [[24, "odtlearn.utils.mip_cbc.SolverOsi.set_verbose"]], "update_conflict_graph() (odtlearn.utils.mip_cbc.solvercbc method)": [[24, "odtlearn.utils.mip_cbc.SolverCbc.update_conflict_graph"]], "var_get_branch_priority() (odtlearn.utils.mip_cbc.solvercbc method)": [[24, "odtlearn.utils.mip_cbc.SolverCbc.var_get_branch_priority"]], "var_get_branch_priority() (odtlearn.utils.mip_cbc.solverosi method)": [[24, "odtlearn.utils.mip_cbc.SolverOsi.var_get_branch_priority"]], "var_get_column() (odtlearn.utils.mip_cbc.solvercbc method)": [[24, "odtlearn.utils.mip_cbc.SolverCbc.var_get_column"]], "var_get_column() (odtlearn.utils.mip_cbc.solverosi method)": [[24, "odtlearn.utils.mip_cbc.SolverOsi.var_get_column"]], "var_get_index() (odtlearn.utils.mip_cbc.solvercbc method)": [[24, "odtlearn.utils.mip_cbc.SolverCbc.var_get_index"]], "var_get_index() (odtlearn.utils.mip_cbc.solverosi method)": [[24, "odtlearn.utils.mip_cbc.SolverOsi.var_get_index"]], "var_get_lb() (odtlearn.utils.mip_cbc.solvercbc method)": [[24, "odtlearn.utils.mip_cbc.SolverCbc.var_get_lb"]], "var_get_lb() (odtlearn.utils.mip_cbc.solverosi method)": [[24, "odtlearn.utils.mip_cbc.SolverOsi.var_get_lb"]], "var_get_name() (odtlearn.utils.mip_cbc.solvercbc method)": [[24, "odtlearn.utils.mip_cbc.SolverCbc.var_get_name"]], "var_get_name() (odtlearn.utils.mip_cbc.solverosi method)": [[24, "odtlearn.utils.mip_cbc.SolverOsi.var_get_name"]], "var_get_obj() (odtlearn.utils.mip_cbc.solvercbc method)": [[24, "odtlearn.utils.mip_cbc.SolverCbc.var_get_obj"]], "var_get_obj() (odtlearn.utils.mip_cbc.solverosi method)": [[24, "odtlearn.utils.mip_cbc.SolverOsi.var_get_obj"]], "var_get_rc() (odtlearn.utils.mip_cbc.solvercbc method)": [[24, "odtlearn.utils.mip_cbc.SolverCbc.var_get_rc"]], "var_get_rc() (odtlearn.utils.mip_cbc.solverosi method)": [[24, "odtlearn.utils.mip_cbc.SolverOsi.var_get_rc"]], "var_get_ub() (odtlearn.utils.mip_cbc.solvercbc method)": [[24, "odtlearn.utils.mip_cbc.SolverCbc.var_get_ub"]], "var_get_ub() (odtlearn.utils.mip_cbc.solverosi method)": [[24, "odtlearn.utils.mip_cbc.SolverOsi.var_get_ub"]], "var_get_var_type() (odtlearn.utils.mip_cbc.solvercbc method)": [[24, "odtlearn.utils.mip_cbc.SolverCbc.var_get_var_type"]], "var_get_var_type() (odtlearn.utils.mip_cbc.solverosi method)": [[24, "odtlearn.utils.mip_cbc.SolverOsi.var_get_var_type"]], "var_get_x() (odtlearn.utils.mip_cbc.solvercbc method)": [[24, "odtlearn.utils.mip_cbc.SolverCbc.var_get_x"]], "var_get_x() (odtlearn.utils.mip_cbc.solverosi method)": [[24, "odtlearn.utils.mip_cbc.SolverOsi.var_get_x"]], "var_get_xi() (odtlearn.utils.mip_cbc.solvercbc method)": [[24, "odtlearn.utils.mip_cbc.SolverCbc.var_get_xi"]], "var_get_xi() (odtlearn.utils.mip_cbc.solverosi method)": [[24, "odtlearn.utils.mip_cbc.SolverOsi.var_get_xi"]], "var_set_branch_priority() (odtlearn.utils.mip_cbc.solverosi method)": [[24, "odtlearn.utils.mip_cbc.SolverOsi.var_set_branch_priority"]], "var_set_column() (odtlearn.utils.mip_cbc.solvercbc method)": [[24, "odtlearn.utils.mip_cbc.SolverCbc.var_set_column"]], "var_set_column() (odtlearn.utils.mip_cbc.solverosi method)": [[24, "odtlearn.utils.mip_cbc.SolverOsi.var_set_column"]], "var_set_lb() (odtlearn.utils.mip_cbc.solvercbc method)": [[24, "odtlearn.utils.mip_cbc.SolverCbc.var_set_lb"]], "var_set_lb() (odtlearn.utils.mip_cbc.solverosi method)": [[24, "odtlearn.utils.mip_cbc.SolverOsi.var_set_lb"]], "var_set_obj() (odtlearn.utils.mip_cbc.solvercbc method)": [[24, "odtlearn.utils.mip_cbc.SolverCbc.var_set_obj"]], "var_set_obj() (odtlearn.utils.mip_cbc.solverosi method)": [[24, "odtlearn.utils.mip_cbc.SolverOsi.var_set_obj"]], "var_set_ub() (odtlearn.utils.mip_cbc.solvercbc method)": [[24, "odtlearn.utils.mip_cbc.SolverCbc.var_set_ub"]], "var_set_ub() (odtlearn.utils.mip_cbc.solverosi method)": [[24, "odtlearn.utils.mip_cbc.SolverOsi.var_set_ub"]], "var_set_var_type() (odtlearn.utils.mip_cbc.solvercbc method)": [[24, "odtlearn.utils.mip_cbc.SolverCbc.var_set_var_type"]], "var_set_var_type() (odtlearn.utils.mip_cbc.solverosi method)": [[24, "odtlearn.utils.mip_cbc.SolverOsi.var_set_var_type"]], "warningmessages (in module odtlearn.utils.mip_cbc)": [[24, "odtlearn.utils.mip_cbc.warningMessages"]], "write() (odtlearn.utils.mip_cbc.solvercbc method)": [[24, "odtlearn.utils.mip_cbc.SolverCbc.write"]], "write() (odtlearn.utils.mip_cbc.solverosi method)": [[24, "odtlearn.utils.mip_cbc.SolverOsi.write"]], "grb_cbc_const_map (in module odtlearn.utils.solver)": [[25, "odtlearn.utils.solver.GRB_CBC_CONST_MAP"]], "solver (class in odtlearn.utils.solver)": [[25, "odtlearn.utils.solver.Solver"]], "add_constr() (odtlearn.utils.solver.solver method)": [[25, "odtlearn.utils.solver.Solver.add_constr"]], "add_constrs() (odtlearn.utils.solver.solver method)": [[25, "odtlearn.utils.solver.Solver.add_constrs"]], "add_vars() (odtlearn.utils.solver.solver method)": [[25, "odtlearn.utils.solver.Solver.add_vars"]], "get_var_value() (odtlearn.utils.solver.solver method)": [[25, "odtlearn.utils.solver.Solver.get_var_value"]], "lin_expr() (odtlearn.utils.solver.solver method)": [[25, "odtlearn.utils.solver.Solver.lin_expr"]], "odtlearn.utils.solver": [[25, "module-odtlearn.utils.solver"]], "optimize() (odtlearn.utils.solver.solver method)": [[25, "odtlearn.utils.solver.Solver.optimize"]], "prep_indices() (odtlearn.utils.solver.solver method)": [[25, "odtlearn.utils.solver.Solver.prep_indices"]], "quicksum() (odtlearn.utils.solver.solver method)": [[25, "odtlearn.utils.solver.Solver.quicksum"]], "set_objective() (odtlearn.utils.solver.solver method)": [[25, "odtlearn.utils.solver.Solver.set_objective"]], "store_data() (odtlearn.utils.solver.solver method)": [[25, "odtlearn.utils.solver.Solver.store_data"]], "check_binary() (in module odtlearn.utils.validation)": [[26, "odtlearn.utils.validation.check_binary"]], "check_columns_match() (in module odtlearn.utils.validation)": [[26, "odtlearn.utils.validation.check_columns_match"]], "check_integer() (in module odtlearn.utils.validation)": [[26, "odtlearn.utils.validation.check_integer"]], "check_ipw() (in module odtlearn.utils.validation)": [[26, "odtlearn.utils.validation.check_ipw"]], "check_same_as_x() (in module odtlearn.utils.validation)": [[26, "odtlearn.utils.validation.check_same_as_X"]], "check_y() (in module odtlearn.utils.validation)": [[26, "odtlearn.utils.validation.check_y"]], "check_y_hat() (in module odtlearn.utils.validation)": [[26, "odtlearn.utils.validation.check_y_hat"]], "odtlearn.utils.validation": [[26, "module-odtlearn.utils.validation"]]}})